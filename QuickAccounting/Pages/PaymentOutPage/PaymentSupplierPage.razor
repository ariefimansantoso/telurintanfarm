@page "/app/paymentsmade/{id}"
@inject IPurchaseInvoice _purchase
@inject ICustomerSupplier _ledger
@inject IPaymentOut _payment
@inject IInvoiceSetting _setting
@inject ISnackbar Snackbar
@inject NavigationManager navigation
@using System.Security.Claims
@using QuickAccounting.Components
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<Loader IsLoading="isLoading"></Loader>
<PageTitle>Payment Out</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>New Supplier Payment</h4>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>#Payment No</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <input type="text" @bind="master.VoucherNo" readonly />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Paid To</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-11 col-11">
                                <RadzenDropDown Style="width:100%;" @bind-Value="@master.LedgerId" Placeholder="Choose Supplier" AllowFiltering="true" Data="@(listLedger)" TextProperty="LedgerName" ValueProperty="LedgerId" ReadOnly />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Paid From</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-11 col-11">
                                <RadzenDropDown Style="width:100%;" @bind-Value="@intCashBank" Placeholder="Choose Cash/Bank" AllowFiltering="true" Data="@(listCashOrBank)" TextProperty="LedgerName" ValueProperty="LedgerId" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Date </label>
                        <div class="input-groupicon">
                            <RadzenDatePicker @bind-Value=@master.Date DateFormat="d" Class="w-100" />
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Amount </label>
                        <div class="input-groupicon">
                            <input type="number" @bind="master.Amount" readonly class="form-control">
                        @if(master.Amount == 0)
                        {
                            <label style="color:red;">Already paid</label>
                        }
                        </div>
                    </div>
                </div>
            </div> 
            <div class="row">
                <div class="col-lg-12 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Note</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-8 col-12">
                                <input type="text"style="width:100%;" @bind="master.Narration" />
                            </div>
                        </div>
                    </div>
                </div>
                </div>
                <hr/>
            <h5>Payment Allocations</h5>
            <div class="row">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Bill No</th>
                                <th>Date</th>
                                <th>Amount</th>
                                <th>Left to allocate</th>
                                <th>this allocation</th>
                                <th>Clear all</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(TodoList == null)
                            {

                            }
                            else
                            {
                            @foreach (var td in TodoList)
                            {
                                <tr>

                                    <td>@td.VoucherNo</td>
                                    <td>@td.Date</td>
                                        <td class="">@PublicVariables._Symbol @string.Format("{0:n0}", td.GrandTotal)</td>
                                        <td class="">0</td>
                                    <td><input type="number" class="form-control" @bind-value="td.ReceiveAmount" style="width: 100px" @onkeyup="@(e => editItem(td.PurchaseMasterId))" @onclick="@(e => editItem(td.PurchaseMasterId))" @bind-value:event="oninput" /></td>

                                    <td>
                                        <a style="color:#ff6b6b!important;">Clear</a>
                                    </td>
                                </tr>
                            }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <br/> <br/>
            <div class="row">
                <div class="col-lg-12">
                    <div class="payment-options">
                        <div class="column-5">
                            <Loading IsLoading="isProcessing">
                                @if(master.Amount == 0)
                        {

                        }
                        else
                        {
                                <button @onclick="@Save" class="btn btn-submit me-2">Save</button>
                        }
                            </Loading>
                        </div>

                        <div class="column-5">
                            <a href="/app/paymentsuspplier" class="btn btn-cancel">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    PurchaseMaster purchase = new PurchaseMaster();
    PaymentMaster master = new PaymentMaster();
    PurchaseMasterView viewMaster = new PurchaseMasterView();
    IList<AccountLedgerView> listLedger;
    IList<AccountLedgerView> listCashOrBank;
    int intCashBank = 0;
    IList<PurchaseMasterView> TodoList;
    int decPaymentOutVoucher = 4;
    int editedID = 0;
    InvoiceSetting setting = new InvoiceSetting();
    string strMenu = "Purchase";
    bool isProcessing;
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }
    private async Task LoadData()
    {
        //GetSerialNo
        string serial = await _purchase.GetSerialNo();
        //setting = await _setting.GetbyId(decPaymentOutVoucher);
        //master.VoucherNo = setting.Prefix + serial + setting.Suffix;
        //master.SerialNo = serial;
        purchase = await _purchase.GetbyId(Convert.ToInt32(id));
        master.LedgerId = purchase.LedgerId;
        master.SerialNo = serial;
        listLedger = await _ledger.GetAll(22);
        listCashOrBank = await _ledger.GetCashOrBank();
        intCashBank = 0;
        master.VoucherNo = "DRAFT";
        master.Date = DateTime.UtcNow;
        master.Narration = string.Empty;
        TodoList = await _purchase.PaymentAllocations(purchase.PurchaseMasterId);
        master.Amount = TodoList.Sum(item => item.ReceiveAmount);
        isLoading = false;
        StateHasChanged();
    }
    private async void Save()
    {
        isProcessing = true;
        try
        {
        if (TodoList == null)
        {
            Snackbar.Add("Invalid Entry.", Severity.Info);
        }
        else if (master.LedgerId == 0)
        {
            Snackbar.Add("Choose Supplier.", Severity.Info);
        }
        else if (intCashBank == 0)
        {
            Snackbar.Add("Choose Cash / Bank.", Severity.Info);
        }
        else if (master.VoucherNo == string.Empty)
        {
            Snackbar.Add("Type Voucher No.", Severity.Info);
        }
        else
        {
            var authState = await authenticationState;
            var user = authState.User;
            string userName = user.FindFirst(ClaimTypes.Name).Value;
            master.VoucherTypeId = decPaymentOutVoucher;
            master.PaymentType = "Draft";
            master.Type = "SupplierPayment";
            master.UserId = userName;
            master.FinancialYearId = 1;
            master.CompanyId = 1;
            master.PurchaseMasterId = purchase.PurchaseMasterId;
            master.Narration = string.Empty;
            master.AddedDate = DateTime.UtcNow;

            foreach (var item in TodoList)
            {
                PaymentDetails details = new PaymentDetails();
                if (item != null)
                {
                    details.PurchaseMasterId = item.PurchaseMasterId;
                    details.LedgerId = intCashBank;
                    details.TotalAmount = item.GrandTotal;
                    details.ReceiveAmount = item.ReceiveAmount;
                    details.DueAmount = 0;
                    master.listOrder.Add(details);
                }
            }
            var result = await _payment.Save(master);

            if (result > 0)
            {
                Snackbar.Add("Successfully Save Supplier Payment.", Severity.Info);
                navigation.NavigateTo($"/app/paymentsupplierview/{result}");
            }
            else
            {
                Snackbar.Add("Invalid.", Severity.Info);
            }
        }
        }
        finally
        {
            isProcessing = false;
        }
    }
    void editItem(int id)
    {
        var myTodo = TodoList.FirstOrDefault(x => x.PurchaseMasterId == id);
        viewMaster.PurchaseMasterId = myTodo.PurchaseMasterId;
        viewMaster.GrandTotal = myTodo.GrandTotal;
        viewMaster.ReceiveAmount = myTodo.ReceiveAmount;
        viewMaster.LedgerId = myTodo.LedgerId;
        editedID = id;
        AddToList();
    }
    private async void AddToList()
    {
        if (viewMaster.PurchaseMasterId == 0)
        {
            Snackbar.Add("Invalid.", Severity.Info);
            return;
        }
        if (editedID == 0)
        {
            var myTodoItem = new PurchaseMasterView()
                {
                    PurchaseMasterId = viewMaster.PurchaseMasterId,
                    GrandTotal = viewMaster.GrandTotal,
                    ReceiveAmount = viewMaster.ReceiveAmount,
                    LedgerId = intCashBank
                };
            TodoList.Add(myTodoItem);
            viewMaster.PurchaseMasterId = 0;
            viewMaster.GrandTotal = 0;
            viewMaster.ReceiveAmount = 0;
        }
        else
        {
            var myTodos = TodoList.FirstOrDefault(x => x.PurchaseMasterId == editedID);
            if (viewMaster.ReceiveAmount > viewMaster.GrandTotal)
            {
                myTodos.PurchaseMasterId = viewMaster.PurchaseMasterId;
                myTodos.GrandTotal = viewMaster.GrandTotal;
                myTodos.LedgerId = intCashBank;
                myTodos.ReceiveAmount = 0;
                master.Amount = viewMaster.ReceiveAmount;
                viewMaster.PurchaseMasterId = 0;
                viewMaster.GrandTotal = 0;
                viewMaster.ReceiveAmount = 0;
                editedID = 0;
            }
            else
            {
                myTodos.PurchaseMasterId = viewMaster.PurchaseMasterId;
                myTodos.GrandTotal = viewMaster.GrandTotal;
                myTodos.ReceiveAmount = viewMaster.ReceiveAmount;
                myTodos.LedgerId = intCashBank;
                master.Amount = viewMaster.ReceiveAmount;
                viewMaster.PurchaseMasterId = 0;
                viewMaster.GrandTotal = 0;
                viewMaster.ReceiveAmount = 0;
                editedID = 0;
            }
        }
        StateHasChanged();
    }
}
