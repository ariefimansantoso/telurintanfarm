
@page "/app/calculatedatadaily"
@layout EmptyLayout;

@inject ApplicationDbContext _context
@inject IAuditLogService _audit

@using QuickAccounting.Data.Recording
<h1>@status</h1>
@code{
    string status = "Not Yet";
    protected async override void OnInitialized()
    {
        var now = new DateTime(2025,5,16,0,0,0);
        var dateNow = DateTime.Now.Date;

        var daysDifference = (dateNow - now).Days;
        string auditMessage = "Schedule Task CalculateRecordingData is running: " + DateTime.Now.ToString("dd/MM/yyyy hh:mm");
        await _audit.LogAsync(LogTypes.LogInfo, "CalculateRecordingData", auditMessage, -99, "System");

        for (int i = 1; i <= daysDifference; i++)
        {
            CalculateDailyRecording(now, 5);
            now = now.AddDays(1);
            status = "Done " + i;

        }

        status = "COMPLETED";
    }

    protected void CalculateDailyRecording(DateTime recordDate, int modifiedBy)
    {                
        // Get all cage numbers and their population from the previous day
        var todayRecords = _context.DailyRecording
            .Where(r => r.RecordDate.Date == recordDate.Date)
            .ToList();

        string auditMessage = "Schedule Task CalculateRecordingData is running: " + recordDate.ToString("dd/MM/yyyy hh:mm");
        _audit.LogAsync(LogTypes.LogInfo, "CalculateRecordingData", auditMessage, -99, "System");

        foreach (var record in todayRecords)
        {
            if(record.CageNumber == "5")
            {
                var x = 0;
            }
            record.FoodNeededTodayKg = (record.PopulationEnd * record.FoodIntakePerHen) / 1000;
            record.ActualFoodNeededKG = (record.PopulationEnd * record.FoodIntakePerHen) / 1000;

            if (record.PopulationStart > 0 && record.TotalEggCount > 0)
            {
                record.ActualHenDay = ((decimal)record.TotalEggCount / (decimal)record.PopulationStart) * (decimal)100;
            }

            if (record.TotalEggKg > 0 && record.FoodNeededTodayKg > 0)
            {
                record.FeedConversionRatio = record.FoodNeededTodayKg / record.TotalEggKg;
            }

            if (record.PopulationStart > 0)
            {
                record.ActualEggMassKg = record.TotalEggKg / (decimal)record.PopulationStart * (decimal)1000;
            }

            if (record.TotalEggCount > 0) {
                record.ActualEggWeightG = (record.TotalEggKg / record.TotalEggCount) * 1000;
            }

            record.ModifiedBy = modifiedBy;
            record.ModifiedDate = DateTime.Now;

            auditMessage = "Schedule Task CalculateRecordingData is calculating: " + _audit.SerializeObjectToString(record);
            _audit.LogAsync(LogTypes.LogInfo, "CalculateRecordingData", auditMessage, -99, "System");

            _context.DailyRecording.Update(record);

            auditMessage = "Schedule Task CalculateRecordingData is DONE: " + _audit.SerializeObjectToString(record);
            _audit.LogAsync(LogTypes.LogInfo, "CalculateRecordingData", auditMessage, -99, "System");
        }

        _context.SaveChanges();
    }
}