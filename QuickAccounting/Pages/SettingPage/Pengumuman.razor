@page "/app/pengumuman"
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject ApplicationDbContext _db
@attribute [Authorize]
<PageTitle>Edit Pengumuman</PageTitle>
<div class="content">
					<div class="page-header">
						<div class="page-title">
							<h4>Edit Pengumuman</h4>							
						</div>
					</div>					
					<div class="card">
						<div class="card-body">
							<div class="row">
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Pengumuman</label>
										<div id="quill-editor-pengumuman" style="height: 500px; width: 100%;"></div>
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									
								</div>
							</div>
							<div class="row">
								<div class="col-lg-12">
									<button type="submit" class="btn btn-submit me-2" @onclick="Save">Submit</button>
								</div>
							</div>
						</div>
					</div>
				</div>
@code {
	[Parameter]
	public string id { get; set; }
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	static QuickAccounting.Data.Pengumuman model = new QuickAccounting.Data.Pengumuman();
	string strMenu = "Pengumuman";	
	bool quillRendered = false;

	protected override async Task OnInitializedAsync()
	{
		//CheckPriviliagee
		var authState = await authenticationState;
		var strRole = authState.User;
		string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		var strShow = await _privilege.PriviliageCheck(strMenu, strName);
		if (strShow.ShowAction == true)
		{
			await LoadData();
		}
		else
		{
			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("Anda tidak memiliki akses", Severity.Error);
		}
	}

	private async Task LoadData()
	{
		model = _db.Pengumuman.FirstOrDefault(x => x.ID == 1);
		await JSRuntime.InvokeVoidAsync("quillInterop.initializeQuill", "quill-editor-pengumuman", model.PengumumanContent);		
		StateHasChanged();
	}

	private async Task Save()
	{
		var pengumuman = _db.Pengumuman.FirstOrDefault(x => x.ID == 1);
		pengumuman.PengumumanContent = model.PengumumanContent;

		_db.Update(pengumuman);
		var result = await _db.SaveChangesAsync();
		if (result > 0)
		{
			Snackbar.Add("Updated Successfully.", Severity.Success);
			StateHasChanged();
			navigation.NavigateTo("/app/pengumuman");
		}
		else
		{
			Snackbar.Add("Invalid.", Severity.Error);
			StateHasChanged();
		}
	}

	[JSInvokable]
	public static async Task UpdateQuillContentPengumuman(string elementId, string content)
	{		
		if (elementId == "quill-editor-pengumuman")
			model.PengumumanContent = content;
	}
}
