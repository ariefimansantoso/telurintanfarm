@page "/app/reportperformaayam"
@using System.Security.Claims;
@using Microsoft.EntityFrameworkCore;
@using QuickAccounting.Data.Recording;
@using System.Transactions;
@using System.Globalization;
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IUser _user
@inject IEmployee _employee
@inject IWebHostEnvironment _hostingEnvironment
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IDailyRecordingService _recording
@inject IKandangService _kandang
@inject IDailyEggPickupService _egg
@inject ApplicationDbContext _db
@attribute [Authorize]

<PageTitle>Laporan Performa Ayam</PageTitle>
<Loader IsLoading="isProcessing"></Loader>
@* <style type="text/css">
    .table tbody tr td {
        padding: 2px !important;
        color: #637381;
        font-size: 14px !important;
        border-bottom: 1px solid #E9ECEF;
        vertical-align: middle;
        white-space: nowrap;
        border: 1px solid #979797;
    }

    .table thead th {
        color: #637381;
        padding: 2px !important;
        font-size: 14px !important;
        white-space: nowrap;
        border: 1px solid #979797 !important;
    }
</style> *@
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Laporan Grafik Performa Ayam</h4>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <label>Pilih Jenis Laporan</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-12 col-12">
                                <select class="form-control" @onchange="OnJenisLaporanChanged">
                                    <option value="KANDANG">PER KANDANG</option>
                                    <option value="STRAIN">PER STRAIN</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (JenisLaporan == "STRAIN")
            {
                <div class="row">
                    <div class="col-lg-12 col-sm-12 col-12">
                        <div class="form-group">
                            <label>Pilih Strain</label>
                            <div class="row">
                                <div class="col-lg col-sm-12 col-12">
                                    <select class="form-control" @onchange="SelectedStrainChange">
                                        @foreach (var karyawan in DaftarStrain)
                                        {
                                            <option value="@karyawan">@karyawan</option>
                                        }
                                    </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }

            @if(JenisLaporan == "KANDANG") 
            {
                <div class="row">
                    <div class="col-lg-12 col-sm-12 col-12">
                        <div class="form-group" style="text-align: center !important;">
                            <label>Pilih Nomor Kandang</label>
                            <div class="row">
                                <div class="col-lg col-sm-12 col-12">
                                    <select class="form-control" @onchange="OnCageChanged">
                                        <option value="TIDAK">PILIH NO KANDANG</option>
                                        <option value="ALL">SEMUA KANDANG</option>
                                        @foreach (var kandangItem in CageList)
                                        {
                                            <option value="@kandangItem.NoKandang">@kandangItem.NoKandang</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="row">
			<div class="col-lg col-sm-6 col-12">
				<div class="form-group">
					Dari Tanggal
					<input type="date" @bind="@dtFromDate" class="form-control" />
				</div>
			</div>
			<div class="col-lg col-sm-6 col-12">
				<div class="form-group">
					Ke Tanggal
					<input type="date" @bind="@dtToDate" class="form-control" />
				</div>
			</div>				
			<div class="col-lg-1 col-sm-6 col-12">
				<div class="form-group" style="margin-top:20px;">
                        <a class="btn btn-filters ms-auto" @onclick="()=>LoadRecording()"><img src="assets/img/icons/search-whites.svg" alt="img" /></a>
				</div>
			</div>
		</div>
        </div>
    </div>


    <div class="card">
        <div class="card-body">
            @if (ChartDataLoaded)
            {
                <MudChart ChartType="ChartType.Line" ChartOptions="@Options" Style="width: 100%;" ChartSeries="@Series" @bind-SelectedIndex="SeriesIndex" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" />
            }
        </div>
    </div>

    @* <div class="card">
        <div class="card-body">
            @if (DailyRecordings != null && DailyRecordings.Count > 0)
            {
                if (SelectedNoKandang != "ALL") 
                {                                                               
                    <div class="table-responsive table-scrollable">
                        <h3>
                            Kandang: @DailyRecordings[0].CageNumber<br />
                            Strain: @DailyRecordings[0].StrainName
                        </h3>
                        <table class="table table-striped">
                            <thead>                                
                                <tr>                                    
                                    <th>Bulan</th>
                                    <th>Afkir</th>
                                    <th>Populasi</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var totalAfkiran = 0;
                                    var totalPopulasi = 0;
                                }
                                @foreach (var record in ReportItems)
                                {
                                    <tr>                                        
                                        <td>@record.MonthLabel</td>
                                        <td>@record.TotalAfkirCount</td>
                                        <td>@record.TotalPopulasi</td>
                                    </tr>
                                    totalAfkiran = totalAfkiran + record.TotalAfkirCount;
                                    totalPopulasi = totalPopulasi + record.TotalPopulasi;
                                }
                                @{
                                    decimal ratarataAfkir = 0;
                                    if (totalPopulasi > 0)
                                    {
                                        ratarataAfkir = (((decimal)totalAfkiran / (decimal)totalPopulasi) * (decimal)100);
                                    }
                                }
                                <tr>
                                    <td><b>TOTAL</b></td>
                                    <td>@totalAfkiran</td>
                                    <td>@ratarataAfkir.ToString("N2") %</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="table-responsive table-scrollable">                        
                        <table class="table table-striped">
                            <thead>                                
                                <tr>
                                    <th>Bulan</th>
                                    <th>Afkir</th>
                                    <th>Populasi</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{                                    
                                    var totalAfkiranAll = 0;
                                    var totalPopulasiAll = 0;
                                }

                                @foreach (var record in ReportItems)
                                {
                                    <tr>
                                        <td>@record.MonthLabel</td>
                                        <td>@record.TotalAfkirCount</td>
                                        <td>@record.TotalPopulasi</td>
                                    </tr>
                                    totalAfkiranAll = totalAfkiranAll + record.TotalAfkirCount;
                                    totalPopulasiAll = totalPopulasiAll + record.TotalPopulasi;
                                }
                                @{
                                    decimal ratarataAfkirAll = 0;
                                    if (totalPopulasiAll > 0)
                                    {
                                        ratarataAfkirAll = (((decimal)totalAfkiranAll / (decimal)totalPopulasiAll) * (decimal)100);
                                    }
                                }
                                <tr>                                   
                                    <td><b>TOTAL</b></td>
                                    <td>@totalAfkiranAll</td>
                                    <td>@ratarataAfkirAll.ToString("N2") %</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
            }
            else
            {
                <p>Data belum ada.</p>
            }
        </div>
    </div> *@
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    string strMenu = "Laporan Performa Ayam";

    string SelectedNoKandang = "";
    private UserMaster modelUser;
    private Employee modelEmployee;
    private List<Kandang> CageList = new List<Kandang>();
    private List<DailyRecording> DailyRecordings = new List<DailyRecording>();
    private List<ReportItem> ReportItems = new List<ReportItem>();
    DateTime dtFromDate;
    DateTime dtToDate;

    private List<ReportItem> StrainData;
    List<string> DaftarStrain;
    string SelectedStrain;
    private string[] XAxisLabels; // Stores RecordDate as strings for X-axis labels
    private List<decimal> yAxisValues = new(); // Stores ActualHenDay values for Y-axis data    
    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();
    private int SeriesIndex = -1;
    bool ChartDataLoaded = false;

    string JenisLaporan = "KANDANG";
    int RataRataAfkir = 2000;
    bool isProcessing;

    private async Task OnJenisLaporanChanged(ChangeEventArgs e)
    {
        JenisLaporan = e.Value.ToString();
    }

    private async Task GetStrainGraphData()
    {		
        List<DailyRecording> records = new List<DailyRecording>();

        if (JenisLaporan == "STRAIN") {
            records = await _db.DailyRecording
                                .Where(recording => recording.StrainName == SelectedStrain &&
                                    recording.RecordDate >= dtFromDate && recording.RecordDate <= dtToDate)
                                .OrderBy(recording => recording.RecordDate)
                                .ToListAsync();
        }
        else
        {
            if(SelectedNoKandang != "ALL") 
            {
                records = await _db.DailyRecording
                            .Where(recording => recording.CageNumber == Helpers.Helper.ConvertCageNumber(SelectedNoKandang) &&
                                recording.RecordDate >= dtFromDate && recording.RecordDate <= dtToDate)
                            .OrderBy(recording => recording.RecordDate)
                            .ToListAsync();
            }
            else
            {
                records = await _db.DailyRecording
                            .Where(recording => recording.RecordDate >= dtFromDate && recording.RecordDate <= dtToDate)
                            .OrderBy(recording => recording.RecordDate)
                            .ToListAsync();
            }
        }

        var recordsGrouped = records.GroupBy(record => new
        {
            WeekStartDate = record.RecordDate.AddDays(-(int)record.RecordDate.DayOfWeek) // Start of the week (Sunday)
        })
        .Select(group => new ReportItem
        {
            WeekLabel = group.Key.WeekStartDate.ToString("dd MMM yyyy"), // Format: e.g., "01 Jan 2024"
                HenDay = group.Sum(record => record.ActualHenDay)
        })
        .ToList();


        Series = new List<ChartSeries>();
        ChartSeries series = new ChartSeries();
        series.Name = "+/- HD";
        series.Data = recordsGrouped.Select(record => Convert.ToDouble(record.HenDay)).ToArray();
        Series.Add(series);

        // Map strainData to chart data
        XAxisLabels = recordsGrouped.Select(record => record.WeekLabel.ToString()).ToArray();
        yAxisValues = recordsGrouped.Select(record => record.HenDay).ToList();

        Options.YAxisTicks = 20;

        if(recordsGrouped.Count > 0)
        {
            ChartDataLoaded = true;
        }
    }

    private async Task SelectedStrainChange(ChangeEventArgs e)
    {        
        SelectedStrain = e.Value.ToString();
        //await GetStrainGraphData();
    }

    private async Task LoadRecording()
    {
        isProcessing = true;

        await GetStrainGraphData();
        // DailyRecordings = await _recording.GetRecordingsByKandang(SelectedNoKandang, dtFromDate, dtToDate);        

        // if (SelectedNoKandang != "ALL")
        // {
        //     DailyRecordings = DailyRecordings.OrderBy(x => x.RecordDate).ToList();
        //     ReportItems = DailyRecordings
        //                     .GroupBy(record => new {record.RecordDate.Year, record.RecordDate.Month })
        //                     .Select(group => new ReportItem
        //                         {
        //                             MonthLabel = new DateTime(group.Key.Year, group.Key.Month, 1).ToString("MMM yyyy"),
        //                             TotalAfkirCount = group.Sum(record => record.UnproductiveHenCount),
        //                             TotalPopulasi = group.Where(record => record.RecordDate == new DateTime(group.Key.Year, group.Key.Month, 1)).Sum(record => record.PopulationEnd)
        //                         })
        //                     .ToList();
        //     await GetGraphData();
        // }
        // else
        // {
        //     DailyRecordings = DailyRecordings.OrderBy(x => x.RecordDate).ToList();            
        //     ReportItems = DailyRecordings
        //                     .GroupBy(record => new { record.RecordDate.Year, record.RecordDate.Month })
        //                     .Select(group => new ReportItem
        //                         {                                    
        //                             MonthLabel = new DateTime(group.Key.Year, group.Key.Month, 1).ToString("MMM yyyy"),
        //                             TotalAfkirCount = group.Sum(record => record.UnproductiveHenCount),
        //                             TotalPopulasi = group.Where(record => record.RecordDate == new DateTime(group.Key.Year, group.Key.Month, 1)).Sum(record => record.PopulationEnd)
        //                         })
        //                     .ToList();
        //     RataRataAfkir = ReportItems.Sum(x => x.TotalAfkirCount) / ReportItems.Count;
        //     await GetGraphDataAll();
        // }

        isProcessing = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var now = DateTime.Now;
        dtFromDate = new DateTime(now.Year, now.Month, 1);
        int lastDay = DateTime.DaysInMonth(now.Year, now.Month);
        dtToDate = new DateTime(now.Year, now.Month, lastDay);

        // Simulate fetching data from a service
        CageList = await _kandang.GetAll();

        DaftarStrain = await _recording.GetStrainNameList();
        SelectedStrain = DaftarStrain.FirstOrDefault();
    }

    // private async Task GetGraphData()
    // {               
    //     Series = new List<ChartSeries>();
    //     ChartSeries series = new ChartSeries();
    //     series.Name = "Afkir";
    //     series.Data = ReportItems.Select(record => Convert.ToDouble(record.TotalAfkirCount)).ToArray();
    //     Series.Add(series);

    //     // Map strainData to chart data
    //     XAxisLabels = ReportItems
    //         .Select(record => record.WeekLabel) // Monthly format
    //         .ToArray();
    //     yAxisValues = ReportItems.Select(record => (decimal)record.TotalAfkirCount).ToList();

    //     Options.YAxisTicks = 5;       

    //     if(DailyRecordings.Count > 0)
    //     {
    //         ChartDataLoaded = true;
    //     }
    // }

    // private async Task GetGraphDataAll()
    // {
    //     Series = new List<ChartSeries>();
    //     ChartSeries series = new ChartSeries();
    //     series.Name = "Afkir";
    //     series.Data = ReportItems.Select(record => Convert.ToDouble(record.TotalAfkirCount)).ToArray();
    //     Series.Add(series);

    //     // Map strainData to chart data
    //     XAxisLabels = ReportItems
    //             .Select(record => record.WeekLabel) // Monthly format
    //             .ToArray();
    //     yAxisValues = ReportItems.Select(record => (decimal)record.TotalAfkirCount).ToList();

    //     Options.YAxisTicks = RataRataAfkir;

    //     if (DailyRecordings.Count > 0)
    //     {
    //         ChartDataLoaded = true;
    //     }
    // }

    private async Task OnCageChanged(ChangeEventArgs e)
    {        
        if (e.Value.ToString() != "TIDAK")
        {
            SelectedNoKandang = e.Value.ToString();
        }
    }

    public class ReportItem
    {
        public string WeekLabel { get; set; }
        public decimal HenDay { get; set; }
    }
}
