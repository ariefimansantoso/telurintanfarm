@page "/app/recordingreports"
@using System.Security.Claims;
@using Microsoft.EntityFrameworkCore;
@using QuickAccounting.Data.Recording;
@using System.Transactions;
@using System.Globalization;
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Axes;
@using ChartJs.Blazor.Common.Axes.Ticks;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.Common.Handlers;
@using ChartJs.Blazor.Common.Time;
@using ChartJs.Blazor.Util;
@using ChartJs.Blazor.Interop;
@using ChartJs.Blazor;
@using ChartJs.Blazor.LineChart;
@using System.Drawing;
@using QuickAccounting.Helpers;
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IUser _user
@inject IEmployee _employee
@inject IWebHostEnvironment _hostingEnvironment
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IDailyRecordingService _recording
@inject IKandangService _kandang
@inject IDailyEggPickupService _egg
@inject ApplicationDbContext _db
@attribute [Authorize]

<PageTitle>Laporan Recording</PageTitle>
<Loader IsLoading="isProcessing"></Loader>

<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Laporan Recording</h4>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <label>Pilih Nomor Kandang</label>
                        <div class="row">
                            <div class="col-lg col-sm-12 col-12">
                                <select class="form-control" @onchange="OnCageChanged">
                                    <option value="TIDAK">PILIH NO KANDANG</option>
                                    @foreach (var kandangItem in CageList)
                                    {
                                        <option value="@kandangItem.NoKandang">@kandangItem.NoKandang</option>
                                    }
                                </select>
                                <a class="btn btn-filters ms-auto" @onclick="()=>LoadRecording()"><img src="assets/img/icons/search-whites.svg" alt="img" /></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
                   
            @* <div class="row">
			    <div class="col-lg col-sm-6 col-12">
				    <div class="form-group">
					    Dari Tanggal
					    <input type="date" @bind="@dtFromDate" class="form-control" />
				    </div>
			    </div>
			    <div class="col-lg col-sm-6 col-12">
				    <div class="form-group">
					    Ke Tanggal
					    <input type="date" @bind="@dtToDate" class="form-control" />
				    </div>
			    </div>				
			    <div class="col-lg-1 col-sm-6 col-12">
				    <div class="form-group" style="margin-top:20px;">
                        
				    </div>
			    </div>
		    </div> *@
        </div>
    </div>    

    <div class="card">
        <div class="card-body">
            @if (ChartDataLoaded)
            {
                <Chart Config="_config" @ref="_chart" @key="_chartKey"></Chart>

                @* <MudChart ChartType="ChartType.Line" ChartOptions="@Options" Style="width: 100%;" ChartSeries="@Series" @bind-SelectedIndex="SeriesIndex" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" /> *@
            }
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            @if (DailyRecordings != null && DailyRecordings.Count > 0)
            {
                <div class="table-responsive table-scrollable">
                    <h3>
                        Kandang: @DailyRecordings[0].CageNumber<br />
                        Strain: @DailyRecordings[0].StrainName
                    </h3>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th></th>
                                <th colspan="2" style="text-align:center;">UMUR</th>
                                <th colspan="8" style="text-align:center;">POPULASI</th>
                                <th colspan="3" style="text-align:center;">PAKAN</th>

                                <th colspan="10" style="text-align:center;">PROD TELUR</th>

                                <th colspan="7" style="text-align:center;"></th>
                                <th colspan="2" style="text-align:center;">Program Kesehatan</th>

                                <th></th>

                            </tr>
                            <tr>
                                @* <th>KDG</th> *@
                                <th>TGL</th>
                                @* <th>Strain</th> *@
                                <th>MGG</th>
                                <th>HARI</th>   

                                <th>Awal</th>
                                <th>Mati</th>
                                <th>Afkir</th>                                                                                                                            
                                <th>S-</th>
                                <th>S+</th>
                                <th>P-</th>
                                <th>P+</th>                                
                                <th>Sisa</th>

                                <th>PAKAN</th>
                                @* <th>KRM</th>
                                <th>SLD</th>
                                <th>PAKAI</th>
                                <th>SISA</th> *@
                                <th>PAKAI</th>
                                <th>FI</th>   

                                <th>UTUH</th>
                                <th>Kg</th>
                                <th>PUTIH</th>
                                <th>Kg</th>
                                <th>BENTES</th>
                                <th>Kg</th>
                                <th>Total BTR</th>
                                <th>Total Kg</th>
                                <th>Kum BTR</th>
                                <th>KWM KG</th>

                                <th>%HD</th>                                
                                <th>+/- HD</th>
                                <th>HH (BTR)</th>
                                <th>HH (KG)</th>
                                <th>EM</th>
                                <th>Grbt</th>
                                <th>FCR</th>

                                <th>Nama</th>
                                <th>Pakai</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var record in DailyRecordings)
                            {
                                <tr>
                                    @* <td>@record.CageNumber</td> *@
                                    <td>@record.RecordDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                                    @* <td>@record.StrainName</td> *@
                                    <td>@record.HenAgeWeeks</td>
                                    <td>@record.HenAgeDays</td>  

                                    <td>@record.PopulationStart</td>                                                                      
                                    <td>@record.DeadHenCount</td>
                                    <td>@record.UnproductiveHenCount</td>
                                    <td></td>
                                    <td></td>
                                    <td>@record.MoveOutHenCount</td>
                                    <td>@record.MoveInHenCount</td>
                                    <td>@record.PopulationEnd</td>

                                    <td>@record.ConcentrateType</td>
                                    @* <td>@record.ActualFoodNeededKG</td>
                                    <td>@record.SaldoFoodKG</td>
                                    <td>@record.FoodNeededTodayKg</td>
                                    <td>@record.RemainingFoodKg</td> *@
                                    <td>@record.FoodNeededTodayKg</td>
                                    <td>@record.FoodIntakePerHen</td>

                                    <td>@record.PerfectEggCount</td>
                                    <td>@record.PerfectEggKg</td>
                                    <td>@record.TelurPutihButir</td>
                                    <td>@record.TelurPutihKG</td>
                                    <td>@record.BrokenEggCount</td>
                                    <td>@record.BrokenEggKg</td>
                                    <td>@record.TotalEggCount</td>
                                    <td>@record.TotalEggKg</td>
                                    <td></td>
                                    <td></td>

                                    <td>@record.ActualHenDay</td>
                                    @* <td>@record.StandardHenDay</td> *@
                                    @if(record.DailyHenDayDifference < 0)
                                    {
                                        <td style="color:#ff0000 !important;">@record.DailyHenDayDifference</td>
                                    }
                                    else
                                    {
                                        <td>@record.DailyHenDayDifference</td>
                                    }
                                    
                                    <td></td>
                                    <td></td>
                                    <td>@record.ActualEggMassKg</td>
                                    <td>@record.ActualEggWeightG</td>
                                    <td>@record.FeedConversionRatio</td>

                                    <td></td>
                                    <td></td>
                                    @* <td>@record.ModifiedBy</td>
                                    <td>@record.ModifiedDate.ToString("dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture)</td> *@
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>                
            }
            else
            {
                <p>No data available.</p>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    string strMenu = "Laporan Recording";

    string SelectedNoKandang = "";
    private UserMaster modelUser;
    private Employee modelEmployee;
    private List<Kandang> CageList = new List<Kandang>();
    private List<DailyRecording> DailyRecordings = new List<DailyRecording>();
    private List<DailyRecording> PagedData = new List<DailyRecording>();
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalItems => DailyRecordings.Count; 
    DateTime dtFromDate;
    DateTime dtToDate;
    private string[] XAxisLabels; // Stores RecordDate as strings for X-axis labels
    private List<decimal> yAxisValues = new(); // Stores ActualHenDay values for Y-axis data
    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();
    private int SeriesIndex = -1;
    bool ChartDataLoaded = false;

    bool isProcessing;

    private LineConfig _config;
    private Chart _chart;
    private string _chartKey = Guid.NewGuid().ToString();

    private async Task InitChart(List<WeeklyProductionSummary> recordings)
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,                    
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Laporan Recording"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                        {
                            new CategoryAxis
                            {
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Month"
                                }
                            }
                        },
                        YAxes = new List<CartesianAxis>
                        {
                            new LinearCartesianAxis
                            {
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Value"
                                }
                            }
                        }
                    }
                }
            };
        _chartKey = Guid.NewGuid().ToString();

        var standardData = await _db.StandardData.ToListAsync();
        var weeks = standardData.Select(x => x.Weeks).ToList();

        foreach (var week in weeks)
        {
            _config.Data.Labels.Add(week.ToString());
        }

        var fiStandard = standardData.Select(x => x.FI_Standard).ToList();
        var hdStd = standardData.Select(x => x.HD_Standard).ToList();
        var emassStandard = standardData.Select(x => x.EMass_Standard).ToList();
        var grbtStd = standardData.Select(x => x.GrBt_Standard).ToList();

        LineDataset<decimal> dataset1 = new LineDataset<decimal>(fiStandard)
            {
                Label = "FI",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightBlue),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightBlue),
                Fill = FillingMode.Disabled               
            };
        dataset1.PointRadius = 0;

        LineDataset<decimal> HD = new LineDataset<decimal>(hdStd)
            {
                Label = "HD",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightPink),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightPink),
                Fill = FillingMode.Disabled
            };
        HD.PointRadius = 0;

        LineDataset<decimal> Emass = new LineDataset<decimal>(emassStandard)
            {
                Label = "E Mass",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Yellow),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Yellow),
                Fill = FillingMode.Disabled
            };
        Emass.PointRadius = 0;

        LineDataset<decimal> grbt = new LineDataset<decimal>(grbtStd)
            {
                Label = "GrBt",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightGreen),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightGreen),
                Fill = FillingMode.Disabled
            };
        grbt.PointRadius = 0;

        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(HD);
        _config.Data.Datasets.Add(Emass);
        _config.Data.Datasets.Add(grbt);

        // WeekNumber = week,
        // AverageHenDayActual = existing?.AverageHenDayActual ?? 0,
        // AverageFIActual = existing?.AverageFIActual ?? 0,
        // AverageEggMass = existing?.AverageEggMass ?? 0,
        // AverageGrBt

        var hdReal = recordings.Select(x => (decimal)x.AverageHenDayActual).ToList();

        // load chart recording
        LineDataset<decimal> HDReal = new LineDataset<decimal>(hdReal)
            {
                Label = "HD Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
                Fill = FillingMode.Disabled               
            };
        HDReal.PointRadius = 0;

        var fiReal = recordings.Select(x => (decimal)x.AverageFIActual).ToList();

        // load chart recording
        LineDataset<decimal> FIReal = new LineDataset<decimal>(fiReal)
            {
                Label = "FI Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
                Fill = FillingMode.Disabled               
            };
        FIReal.PointRadius = 0;

        var emReal = recordings.Select(x => (decimal)x.AverageEggMass).ToList();

        // load chart recording
        LineDataset<decimal> EMReal = new LineDataset<decimal>(emReal)
            {
                Label = "EM Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Orange),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Orange),
                Fill = FillingMode.Disabled               
            };
        EMReal.PointRadius = 0;

        var grBt = recordings.Select(x => (decimal)x.AverageGrBt).ToList();

        // load chart recording
        LineDataset<decimal> GrBtReal = new LineDataset<decimal>(grBt)
            {
                Label = "GrBt Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Green),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Green),
                Fill = FillingMode.Disabled
            };
        GrBtReal.PointRadius = 0;

        _config.Data.Datasets.Add(HDReal);
        _config.Data.Datasets.Add(FIReal);
        _config.Data.Datasets.Add(EMReal);
        _config.Data.Datasets.Add(GrBtReal);

        ChartDataLoaded = true;
    }    

    private async Task LoadRecording()
    {
        // DailyRecordings = await _recording.GetRecordingsByKandang(SelectedNoKandang, dtFromDate, dtToDate);
        // DailyRecordings = DailyRecordings.OrderBy(x => x.RecordDate).ToList();

        var cageNumber = Helper.ConvertCageNumber(SelectedNoKandang);
        var resultForTable = new List<DailyRecording>();

        var dataForTable = _db.DailyRecording
            .Where(r => r.CageNumber == cageNumber)
            .OrderByDescending(r => r.RecordDate)
            .ToList(); // Load into memory to simulate window functions

        int rowNumberForTable = 1;
        int runningSumForTable = 0;

        foreach (var row in dataForTable)
        {
            if (row.PopulationStart <= 0)
                runningSumForTable += 1;

            if (runningSumForTable == 0)
                resultForTable.Add(row);

            rowNumberForTable++;
        }

        DailyRecordings = resultForTable;

        var weeklyAverages = resultForTable
            .GroupBy(r => (int)Math.Floor(r.HenAgeWeeks)) // Group by full week
            .Select(g => new WeeklyProductionSummary
                {
                    WeekNumber = g.Key,
                    AverageHenDayActual = g.Average(r => r.ActualHenDay),
                    AverageFIActual = g.Average(r => r.FoodIntakePerHen),
                    AverageEggMass = g.Average(r => r.ActualEggMassKg),
                    AverageGrBt = g.Average(r => r.ActualEggWeightG)
                })
            .OrderByDescending(x => x.WeekNumber)
            .ToList();

        var fullData = Enumerable.Range(16, 85) // 100 - 16 + 1 = 85 weeks
            .Select(week =>
            {
                var existing = weeklyAverages.FirstOrDefault(d => d.WeekNumber == week);
                return new WeeklyProductionSummary
                    {
                        WeekNumber = week,
                        AverageHenDayActual = existing?.AverageHenDayActual ?? 0,
                        AverageFIActual = existing?.AverageFIActual ?? 0,
                        AverageEggMass = existing?.AverageEggMass ?? 0,
                        AverageGrBt = existing?.AverageGrBt ?? 0
                    };
            })
            .OrderBy(d => d.WeekNumber)
            .ToList();


        await InitChart(fullData);

        //await GetGraphData();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var now = DateTime.Now;
        dtFromDate = new DateTime(now.Year, now.Month, 1);
        int lastDay = DateTime.DaysInMonth(now.Year, now.Month);
        dtToDate = new DateTime(now.Year, now.Month, lastDay);

        // Simulate fetching data from a service
        CageList = await _kandang.GetAll();

        UpdatePagedData();
    }

    private async Task GetGraphData()
    {               
        Series = new List<ChartSeries>();
        ChartSeries series = new ChartSeries();
        series.Name = "+/- HD";
        series.Data = DailyRecordings.Select(record => Convert.ToDouble(record.ActualHenDay)).ToArray();
        Series.Add(series);

        series = new ChartSeries();
        series.Name = "EW(gr)";
        series.Data = DailyRecordings.Select(record => Convert.ToDouble(record.ActualEggWeightG)).ToArray();
        Series.Add(series);

        // Map strainData to chart data
        XAxisLabels = DailyRecordings
            // Select every 4th record
            .Select(record => record.HenAgeWeeks.ToString())
            .ToArray();
        yAxisValues = DailyRecordings.Select(record => record.ActualHenDay).ToList();

        Options.YAxisTicks = 20;       

        if(DailyRecordings.Count > 0)
        {
            ChartDataLoaded = true;
        }
    }

    private async Task OnCageChanged(ChangeEventArgs e)
    {        
        if (e.Value.ToString() != "TIDAK")
        {
            SelectedNoKandang = e.Value.ToString();
            StateHasChanged();
        }
    }

    private void HandlePageChange(int pageNumber)
    {
        CurrentPage = pageNumber;
        UpdatePagedData();
    }

    private void UpdatePagedData()
    {
        PagedData = DailyRecordings
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }
}
