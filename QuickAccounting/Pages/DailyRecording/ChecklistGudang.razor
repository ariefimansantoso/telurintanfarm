@page "/app/eggverification"
@using System.Security.Claims;
@using Microsoft.EntityFrameworkCore;
@using QuickAccounting.Data.Recording;
@using System.Transactions;
@using System.Globalization;
@using QuickAccounting.Components
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IUser _user
@inject IEmployee _employee
@inject IWebHostEnvironment _hostingEnvironment
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IDailyRecordingService _recording
@inject IKandangService _kandang
@inject IDailyEggPickupService _egg
@inject AuthenticationStateProvider authStateProvider
@inject ApplicationDbContext _db
@attribute [Authorize]

<PageTitle>Timbang Telur</PageTitle>
<Loader IsLoading="isProcessing"></Loader>

<style type="text/css">
    .table tbody tr td {
        padding-top: 2px !important;
        padding-bottom: 2px !important;
        font-weight: bold !important;
        font-size: 24px !important;
        /* color: #637381;
                    font-weight: 200 !important;
                    border-bottom: 1px solid #E9ECEF;
                    vertical-align: middle;
                    white-space: nowrap;
                    text-align: right !important; */
    }
</style>

<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Timbang Telur</h4>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: left !important;">
                        <h1>
                            Di Kandang: @TotalSisa
                        </h1>
                        <h1>
                            Total Diambil: @TotalDiambil
                        </h1>    
                        <h1>
                            Total Ditimbang: @TotalDitimbang
                        </h1>
                        <h1>
                            Sisa Belum Ditimbang: @TotalSisaBelumDitimbang
                        </h1>
                        
                    </div>
                </div>
            </div> 
            
            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <label>Pilih Jenis Telur</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-12 col-12">
                                <select class="form-control" @onchange="OnJenisTelurChanged">
                                    <option value="UTUH">UTUH</option>
                                    <option value="PUTIH">PUTIH</option>
                                    <option value="BENTES">BENTES</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <label>Jumlah Timbangan</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-12 col-12">
                                <input type="text" style="font-weight: bold !important; font-size: 24px !important;" class="form-control" @bind="@TimbanganString" @onkeydown="@Enter" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <button @onclick="() => Save()" class="btn btn-primary" style="color:#fff !important;">Timbang</button>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        @if (StockGudangs != null && StockGudangs.Count > 0)
                        {
                            <div class="table-responsive table-scrollable">                                
                                <table class="table table-striped">
                                    <thead>
                                        <tr>                                            
                                            
                                            <th style="text-align:center;">Jenis</th>
                                            <th style="text-align:center;">Berat</th>
                                            <th></th>
                                        </tr>                                        
                                    </thead>
                                    <tbody>
                                        @{
                                            decimal totalKG = 0;
                                            StockGudangs = StockGudangs.OrderByDescending(x => x.ID).ToList();
                                        }
                                        @foreach (var record in StockGudangs.ToList())
                                        {
                                            <tr>
                                                
                                                <td style="text-align:center;">@record.EggType</td>
                                                <td style="text-align:right;">@record.TotalDitimbang</td>
                                                @{
                                                    totalKG = totalKG + record.TotalDitimbang;
                                                }
                                                <td>
                                                    <a @onclick="( () => { OpenDeleteDialog(record.ID); } )" class="btn btn-danger" style="color:#fff !important; font-size:12px !important;">HAPUS</a>
                                                </td>
                                            </tr>
                                        }
                                        <tr>
                                            <td style="font-weight:bold;font-size:16px;">
                                                <b>TOTAL</b>
                                            </td>
                                            <td style="font-weight:bold;font-size:16px;">@totalKG</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <p>No data available.</p>
                        }
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <br /><br />
                        <h4>Hanya dipencet kalau sudah selesai timbang semua</h4>
                        <button @onclick="() => SiapSimpan()" class="btn btn-primary" disabled="@( TimbangDone )" style="color:#fff !important;">Siap Simpan?</button>

                        <button @onclick="() => Finalize()" class="btn btn-primary" disabled="@( !TimbangDone )" style="color:#fff !important;">Simpan</button>
                    </div>
                </div>
            </div>
        </div>
    </div>    
</div>
@if (DeleteDialogOpen)
{
    <ModalDialog Title="Hapus Timbangan"
                 Text="Apakah anda yakin anda ingin menghapus timbangan ini?"
                 OnClose="@OnDeleteDialogClose"
                 DialogType="ModalDialog.ModalDialogType.Delete">
    </ModalDialog>
}
@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    string strMenu = "Timbang Telur Gudang";

    decimal TotalDiambil = 0;
    decimal TotalDitimbang = 0;
    decimal TotalSisa = 0;
    string JenisTelurSelected = "UTUH";
    decimal Timbangan = 0;
    [Parameter]
    public string TimbanganString { get; set; }
    bool TimbangDone = false;
    decimal TotalDibawaKeGudang = 0;
    decimal TotalSisaBelumDitimbang = 0;

    private UserMaster modelUser;
    private Employee modelEmployee;
    string currentUserRole = "User";
    public bool DeleteDialogOpen { get; set; }
    int SelectedItemId = 0;

    private List<StockGudang> StockGudangs = new List<StockGudang>();

    bool isProcessing;
    bool IsValid = true;

    private void OpenDeleteDialog(int id)
    {
        SelectedItemId = id;

        DeleteDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            DeleteTimbangan();
        }

        DeleteDialogOpen = false;
        StateHasChanged();

        navigation.NavigateTo("/app/eggverification", true);
    }

    private async Task DeleteTimbangan()
    {        
        try
        {            
            var eggPickup = await _db.StockGudang.FirstOrDefaultAsync(x => x.ID == SelectedItemId);
            if (eggPickup != null)
            {
                _db.StockGudang.Remove(eggPickup);
                await _db.SaveChangesAsync();
            }
        }
        catch (DbUpdateException ex)
        {
            Console.WriteLine($"Database Update Exception: {ex.InnerException?.Message}");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Terjadi kesalahan pada system. Tolong di screenshot: " + ex.Message + Environment.NewLine + ex.StackTrace, Severity.Error);
        }
    }


    private async Task OnTimbanganChanged(ChangeEventArgs e)
    {
        // if (e.Value.ToString().Contains("."))
        // {
        //     Snackbar.Add("Input tidak benar. Mohon pakai KOMA.", Severity.Warning);
        //     IsValid = false;
        //     return;
        // }

        decimal v;
        if (decimal.TryParse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out v))
        {
            IsValid = true;
            Timbangan = v;
            if(Timbangan > 25)
            {
                IsValid = false;
                Snackbar.Add("Nimbangnya dikit aja, 10 tray maksimal", Severity.Warning);
            }
        }
        else
        {
            IsValid = false;
            Snackbar.Add("Input tidak benar.", Severity.Warning);
        }
    }

    private async Task SiapSimpan()
    {
        TimbangDone = true;

        StateHasChanged();
    }

    private async Task Finalize()   
    {
        try
        {
            var now = DateTime.Now;
            var timbangan = await _db.DailyEggPickup.Where(x => x.ReceivedBy > 0 && x.VerifiedBy < 0 && x.RecordDate.Date == now.Date).ToListAsync();
            timbangan.ForEach(x => x.VerifiedBy = modelEmployee.EmployeeId);
            timbangan.ForEach(x => x.VerifiedOn = now);
            _db.UpdateRange(timbangan);
            await _db.SaveChangesAsync();
            Snackbar.Add("Data produksi telur telah tersimpan.", Severity.Success);
        }
        catch (DbUpdateException dex)
        {
            Snackbar.Add("Error: " + dex.Message + Environment.NewLine + dex.InnerException?.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error e: " + ex.Message + Environment.NewLine + ex.StackTrace, Severity.Error);
        }
    }

    private async Task Save()   
    {
        try
        {
            decimal v;
            if (decimal.TryParse(TimbanganString, NumberStyles.Any, CultureInfo.InvariantCulture, out v))
            {
                IsValid = true;
                Timbangan = v;
                if(Timbangan > 25)
                {
                    IsValid = false;
                    Snackbar.Add("Nimbangnya dikit aja, 10 tray maksimal", Severity.Warning);
                    return;
                }
            }
            else
            {
                IsValid = false;
                Snackbar.Add("Input tidak benar.", Severity.Warning);
                return;
            }

            var timbangan = new StockGudang();
            timbangan.TotalDitimbang = Timbangan;
            timbangan.CreatedBy = modelEmployee.EmployeeId;
            timbangan.DateDitimbang = DateTime.Now;
            timbangan.EggType = JenisTelurSelected;
            _db.StockGudang.Add(timbangan);
            await _db.SaveChangesAsync();
            TotalSisaBelumDitimbang = TotalDibawaKeGudang - Timbangan;
            Snackbar.Add("Data produksi telur telah tersimpan.", Severity.Success);
            Timbangan = 0;
            TimbanganString = "";

            await LoadData();
            await LoadStockGudang();
        }
        catch (DbUpdateException dex)
        {
            Snackbar.Add("Error: " + dex.Message + Environment.NewLine + dex.InnerException?.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error e: " + ex.Message + Environment.NewLine + ex.StackTrace, Severity.Error);
        }
    }

    public async void Enter(KeyboardEventArgs e)
	{		
		if (e.Key == "Enter" || e.Key == "NumpadEnter")
		{		
            isProcessing = true;
		    if (string.IsNullOrEmpty(TimbanganString))
		    {
			    isProcessing = false;
			    Snackbar.Add("Angka timbangan kosong.", Severity.Error);
			    return;
		    }

            decimal v;
            if (decimal.TryParse(TimbanganString, NumberStyles.Any, CultureInfo.InvariantCulture, out v))
            {
                IsValid = true;
                Timbangan = v;
                if (Timbangan > 25)
                {
                    IsValid = false;
                    Snackbar.Add("Nimbangnya dikit aja, 10 tray maksimal", Severity.Warning);
                }
            }
            else
            {
                IsValid = false;
                Snackbar.Add("Input tidak benar.", Severity.Warning);
            }

            try
            {
                var timbangan = new StockGudang();
                timbangan.TotalDitimbang = Timbangan;
                timbangan.CreatedBy = modelEmployee.EmployeeId;
                timbangan.DateDitimbang = DateTime.Now;
                timbangan.EggType = JenisTelurSelected;
                _db.StockGudang.Add(timbangan);
                await _db.SaveChangesAsync();
                TotalSisaBelumDitimbang = TotalDibawaKeGudang - Timbangan;
                Snackbar.Add("Data produksi telur telah tersimpan.", Severity.Success);
                Timbangan = 0;
                TimbanganString = "";

                await LoadData();
                await LoadStockGudang();
            }
            catch (DbUpdateException dex)
            {
                Snackbar.Add("Error: " + dex.Message + Environment.NewLine + dex.InnerException?.Message, Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error e: " + ex.Message + Environment.NewLine + ex.StackTrace, Severity.Error);
            }
		}
		
		isProcessing = false;

		StateHasChanged();
	}


    private async Task LoadData()
    {
        if(JenisTelurSelected == "UTUH")
        {
            TotalDiambil = _db.DailyEggPickup.Where(x => x.ReceivedBy > 0 && x.VerifiedBy < 0 && x.RecordDate.Date == DateTime.Now.Date).Sum(x => x.TelurUtuhKG);
            TotalSisa = _db.DailyEggPickup.Where(x => x.ReceivedBy < 0 && x.VerifiedBy < 0 && x.RecordDate.Date == DateTime.Now.Date).Sum(x => x.TelurUtuhKG);
            TotalDitimbang = _db.StockGudang.Where(x => x.EggType == "UTUH" && x.DateDitimbang.Date == DateTime.Now.Date).Sum(x => x.TotalDitimbang);
        }
        else if (JenisTelurSelected == "PUTIH")
        {
            TotalDiambil = _db.DailyEggPickup.Where(x => x.ReceivedBy > 0 && x.VerifiedBy < 0 && x.RecordDate.Date == DateTime.Now.Date).Sum(x => x.TelurPutihKG);
            TotalSisa = _db.DailyEggPickup.Where(x => x.ReceivedBy < 0 && x.VerifiedBy < 0 && x.RecordDate.Date == DateTime.Now.Date).Sum(x => x.TelurPutihKG);
            TotalDitimbang = _db.StockGudang.Where(x => x.EggType == "PUTIH" && x.DateDitimbang.Date == DateTime.Now.Date).Sum(x => x.TotalDitimbang);
        }
        else
        {
            TotalDiambil = _db.DailyEggPickup.Where(x => x.ReceivedBy > 0 && x.VerifiedBy < 0 && x.RecordDate.Date == DateTime.Now.Date).Sum(x => x.TelurBentesKG);
            TotalSisa = _db.DailyEggPickup.Where(x => x.ReceivedBy < 0 && x.VerifiedBy < 0 && x.RecordDate.Date == DateTime.Now.Date).Sum(x => x.TelurBentesKG);
            TotalDitimbang = _db.StockGudang.Where(x => x.EggType == "BENTES" && x.DateDitimbang.Date == DateTime.Now.Date).Sum(x => x.TotalDitimbang);
        }

        TotalDibawaKeGudang = TotalDiambil;

        if (TotalDiambil == 0)
        {
            IsValid = false;
            TotalSisa = 0;
            Snackbar.Add("Data tidak ada/telur sudah habis ditimbang.", Severity.Warning);
        }

        StateHasChanged();
    }

    private async Task LoadStockGudang()
    {
        StockGudangs = await _db.StockGudang.Where(x => x.DateDitimbang.Date == DateTime.Now.Date).ToListAsync();
    }

    private async Task OnJenisTelurChanged(ChangeEventArgs e)
    {
        JenisTelurSelected = e.Value.ToString();

        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await authStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userName = user.Identity.Name;
        currentUserRole = await _user.GetUserRole(userName);
        modelUser = await _user.UserProfile(userName);
        modelEmployee = await _employee.GetbyUserId(modelUser.UserId);

        await LoadData();
    }
}    