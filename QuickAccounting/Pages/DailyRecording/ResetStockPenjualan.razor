@page "/app/resetsalesstock"
@using System.Security.Claims;
@using Microsoft.EntityFrameworkCore;
@using QuickAccounting.Constants;
@using QuickAccounting.Data.Recording;
@using System.Transactions;
@using System.Globalization;
@using QuickAccounting.Components
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IUser _user
@inject IEmployee _employee
@inject IWebHostEnvironment _hostingEnvironment
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IDailyRecordingService _recording
@inject IKandangService _kandang
@inject IDailyEggPickupService _egg
@inject AuthenticationStateProvider authStateProvider
@inject ApplicationDbContext _db
@inject IAuditLogService _audit
@inject IStartingStockDate _stockDate;
@attribute [Authorize]

<PageTitle>Reset Stok Penjualan</PageTitle>
<Loader IsLoading="isProcessing"></Loader>

<style type="text/css">
    .table tbody tr td {
        padding-top: 2px !important;
        padding-bottom: 2px !important;
        /* color: #637381;
                    font-weight: 200 !important;
                    border-bottom: 1px solid #E9ECEF;
                    vertical-align: middle;
                    white-space: nowrap;
                    text-align: right !important; */
    }
</style>

<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Reset Stok Penjualan</h4>
        </div>
    </div>

    <div class="card">
        <div class="card-body">            
            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <label>Pilih Jenis Telur</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-12 col-12">
                                <select class="form-control" @onchange="OnJenisTelurChanged">
                                    <option value="UTUH">UTUH</option>
                                    <option value="PUTIH">PUTIH</option>
                                    <option value="BENTES">BENTES</option>
                                    <option value="PARAH">PARAH</option>
                                    <option value="PS">PARAH SEKALI</option>
                                    <option value="RUSAK">RUSAK</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <label>Jumlah Kilogram</label>
                        <div class="row">
                            <div class="col-lg-12 col-sm-12 col-12">
                                <input type="text" class="form-control" value="@Kilogram" @onchange="OnKilogramChanged" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-sm-12 col-12">
                    <div class="form-group" style="text-align: center !important;">
                        <button @onclick="() => Save()" class="btn btn-primary" style="color:#fff !important;" disabled="@( !IsValid )">Simpan</button>
                    </div>
                </div>
            </div>

        </div>
    </div>    
</div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    string strMenu = "Reset Stok Penjualan";


    string JenisTelurSelected = "UTUH";
    decimal Kilogram = 0;    

    private UserMaster modelUser;
    private Employee modelEmployee;
    string currentUserRole = "Admin";

    private List<StockPenjualan> StockPenjualan = new List<StockPenjualan>();
    int SelectedItemId;
    public bool DeleteDialogOpen { get; set; }
    bool isProcessing;
    bool IsValid = true;

    private async Task OnKilogramChanged(ChangeEventArgs e)
    {
        if (e.Value.ToString().Contains(","))
        {
            Snackbar.Add("Input tidak benar. Mohon pakai TITIK.", Severity.Warning);
            IsValid = false;
            return;
        }

        decimal v;
        if (decimal.TryParse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out v))
        {
            IsValid = true;
            Kilogram = v;            
        }
        else
        {
            IsValid = false;
            Snackbar.Add("Input tidak benar.", Severity.Warning);
        }
    }

    private async Task Save()   
    {
        try
        {
            var dateNow = DateTime.Now;
            if(JenisTelurSelected == "UTUH")
            {
                var stockTelurUtuh = _db.StockTelurUtuh.FirstOrDefault();
                if (stockTelurUtuh != null)
                {                    
                    string auditMessage = "Reset stock telur UTUH: " + stockTelurUtuh.StockKG;
                    await _audit.LogAsync(LogTypes.LogInfo, "Reset Stock Penjualan", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

                    stockTelurUtuh.StockKG = Kilogram;
                    // stock reset mulai besoknya
                    stockTelurUtuh.StockDate = dateNow;                    

                    MutasiStockTelurHarian mutasi = new MutasiStockTelurHarian();
                    mutasi.JenisTelur = "UTUH";
                    mutasi.BeratTelurIn = Kilogram;
                    mutasi.BeratTelurOut = 0;
                    mutasi.DateCreated = dateNow;
                    mutasi.CreatedBy = modelEmployee.EmployeeId;
                    _db.MutasiStockTelurHarian.Add(mutasi);
                    await _db.SaveChangesAsync();
                }
            }
            else
            {
                int productId = 0;
                switch (JenisTelurSelected)
                {
                    case "BENTES":
                        productId = 16;
                        break;
                    case "PUTIH":
                        productId = 7;
                        break;
                    case "PARAH":
                        productId = 17;
                        break;
                    case "PS":
                        productId = 19;
                        break;
                    case "RUSAK":
                        productId = 106;
                        break;
                }
                var existingStock = await _db.StockPosting.Where(x => x.ProductId == productId && x.Date.Date == dateNow.AddDays(1).Date &&
                                                            x.StockCalculate == "Reset Stock").FirstOrDefaultAsync();

                if(existingStock != null)
                {
                    _db.Remove(existingStock);
                    await _db.SaveChangesAsync();
                }

                StockPosting stockposting = new StockPosting();
                stockposting.Date = dateNow.AddDays(1).Date;
                stockposting.ProductId = productId;
                stockposting.InwardQty = Kilogram;
                stockposting.OutwardQty = 0;
                stockposting.UnitId = 0;
                stockposting.BatchId = 0;
                stockposting.Rate = 0;
                stockposting.DetailsId = 0;
                stockposting.InvoiceNo = productId.ToString();
                stockposting.VoucherNo = productId.ToString();
                stockposting.VoucherTypeId = 0;
                stockposting.AgainstInvoiceNo = String.Empty;
                stockposting.AgainstVoucherNo = String.Empty;
                stockposting.AgainstVoucherTypeId = 0;
                stockposting.WarehouseId = 1;
                stockposting.StockCalculate = "Reset Stock";
                stockposting.CompanyId = 1;
                stockposting.FinancialYearId = 2;
                stockposting.AddedDate = DateTime.Now;
                _db.StockPosting.Add(stockposting);

                MutasiStockTelurHarian mutasi = new MutasiStockTelurHarian();
                mutasi.JenisTelur = JenisTelurSelected;
                mutasi.BeratTelurIn = Kilogram;
                mutasi.BeratTelurOut = 0;
                mutasi.DateCreated = dateNow;
                mutasi.CreatedBy = modelEmployee.EmployeeId;
                _db.MutasiStockTelurHarian.Add(mutasi);

                await _db.SaveChangesAsync();


                string auditMessage = "Reset stok telur " + JenisTelurSelected + " stok baru: " + Kilogram;
                await _audit.LogAsync(LogTypes.LogInfo, "Reset Stock Penjualan", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

            }

            Snackbar.Add("Reset stok berhasil.", Severity.Success);
            navigation.NavigateTo("/app/resetsalesstock", true);
        }
        catch (DbUpdateException dex)
        {
            Snackbar.Add("Error: " + dex.Message + Environment.NewLine + dex.InnerException?.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error e: " + ex.Message + Environment.NewLine + ex.StackTrace, Severity.Error);
        }
    }

    private async Task LoadStockGudang()
    {
        StockPenjualan = await _db.StockPenjualan.Where(x => x.DateCreated.Date == DateTime.Now.Date && x.IsVerified == false).ToListAsync();
    }

    private async Task OnJenisTelurChanged(ChangeEventArgs e)
    {
        JenisTelurSelected = e.Value.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await authStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userName = user.Identity.Name;
        currentUserRole = await _user.GetUserRole(userName);
        modelUser = await _user.UserProfile(userName);
        modelEmployee = await _employee.GetbyUserId(modelUser.UserId);

        string auditMessage = "User dengan nama " + modelEmployee.EmployeeName + " mengunjungi Form Tambah Stok Penjualan.";
        await _audit.LogAsync(LogTypes.LogInfo, "Form Tambah Stok Penjualan", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

        await LoadStockGudang();
    }
}    