@page "/app/pickingscan"
@inject ISalesInvoice _sales
@inject IPaymentIn _paymentin
@inject ICompany _company
@inject IProduct _product
@inject ITax _tax
@inject IEmailSetting _emailSetting;
@inject IInvoiceSetting _setting
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.FileProviders;
@using QuickAccounting.Components
@using QuickAccounting.Data.Recording;
@using QuickAccounting.Repository
@using QuickAccounting.Services
@using System.Security.Claims
@using System.Net.Mail;
@using OfficeOpenXml;
@using System.Globalization;
@inject IWebHostEnvironment _hostingEnvironment
@inject IPrintingService PrintingService
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IDialogService Dialog
@inject IJSRuntime js
@inject IExcelService _excelService
@inject IBarcodeService _barcodeService
@inject ApplicationDbContext _db
@inject IAuditLogService _audit
@inject IEmployee _employee
@inject IUser _user
@attribute [Authorize]
<PageTitle>Picking Scan</PageTitle>
<Loader IsLoading="isProcessing"></Loader>
<style type="text/css">
	.table tbody tr td {
		padding-top: 2px !important;
		padding-bottom: 2px !important;
		font-weight: bold !important;
		font-size:22px !important;
		/* color: #637381;
		font-weight: 200 !important;
		border-bottom: 1px solid #E9ECEF;
		vertical-align: middle;
		white-space: nowrap;
		text-align: right !important; */
	}

	.table thead tr th {
		padding-top: 2px !important;
		padding-bottom: 2px !important;
		font-weight: bold !important;
		font-size: 24px !important;
		/* color: #637381;
			font-weight: 200 !important;
			border-bottom: 1px solid #E9ECEF;
			vertical-align: middle;
			white-space: nowrap;
			text-align: right !important; */
	}
</style>
<div class="content">
	<div class="page-header">
		<div class="page-title">
			<h4>Scan Pengambilan Telur Retail/Ecer</h4>			
		</div>
	</div>
	<div class="row">
		<div class="col-lg-12 col-sm-12 col-12">
			<div class="form-group" style="text-align: center !important;">
				<label>Scan Nota Disini</label>
				<div class="row">
					<div class="col-lg-12 col-sm-12 col-12">
						<input type="text" autofocus id="txtInvoiceNo" placeholder="Nomor Nota" @bind="@id" @onkeydown="@Enter">
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-lg-12 col-sm-12 col-12">
			<div class="form-group" style="text-align: center !important;">
				<label>Status Pengambilan Barang</label>
				<div class="row">
					<div class="col-lg-12 col-sm-12 col-12" style="margin-top:20px; font-size:20px;">
						<b>@StatusDiambil</b>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="card">
		<div class="card-body">			
			<div class="table-responsive table-scrollable">
				<table class="table table-striped">
						<thead>
							<tr>
								<th style="text-align:left !important;">Nomor Nota</th>
								<th style="text-align:left !important;">Jenis Telur</th>
								<th style="text-align:left !important;">Jumlah</th>
								<th style="text-align:left !important;">Diinput Oleh</th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							@if (ListNota.Count > 0)
							{
								foreach (RecordNota rn in ListNota)
								{
									<tr style="border-bottom:1px solid #E9ECEF ;">								
										<td style="text-align:left !important;">@rn.NomorNota</td>
										<td style="text-align:left !important;">@rn.JenisTelur</td>
										<td style="text-align:left !important;">@rn.BeratTelur.ToString("F2", new CultureInfo("id-ID"))</td>
										<td>
											@{
												var employeeInput = _db.Employee.FirstOrDefault(x => x.EmployeeId == rn.CreatedBy);
											}
											@employeeInput.EmployeeName
										</td>
									</tr>
								}
							}
					</tbody>						
					</table>

				</div>												
		</div>
	</div>


</div>

<script type="text/javascript">
	$(document).ready(function () {
		// $("#txtInvoiceNo").on('change keydown paste input', function () {
		// 	doSomething();
		// });

		document.getElementById("txtInvoiceNo").focus();
	});
</script>

@code {
	[Parameter]
	public string id { get; set; }
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	Company company = new Company();
	SalesMasterView model = new SalesMasterView();
	SalesMaster master = new SalesMaster();
	List<ProductView> TodoList = new List<ProductView>();
	InvoiceSetting setting = new InvoiceSetting();
	EmailSetting emailSetting = new EmailSetting();

	int decSalesVoucherType = 9;
	public bool DeleteDialogOpen { get; set; }
	string strMenu = "Picking";
	public string StatusDiambil { get; set; }
	private UserMaster modelUser;
	private Employee modelEmployee;
	string currentUserRole = "User";

	List<RecordNota> ListNota = new List<RecordNota>();
	bool isProcessing = true;
	protected override async Task OnInitializedAsync()
	{
		//CheckPriviliagee
		var authState = await authenticationState;
		var strRole = authState.User;
		var userName = strRole.Identity.Name;
		string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		var strShow = await _privilege.PriviliageCheck(strMenu, strName);
		currentUserRole = await _user.GetUserRole(userName);
		modelUser = await _user.UserProfile(userName);
		modelEmployee = await _employee.GetbyUserId(modelUser.UserId);

		string auditMessage = "Masuk halaman Scan Picking";
		await _audit.LogAsync(LogTypes.LogInfo, "Scan Picking", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

		if (strShow != null && strShow.ShowAction == true)
		{
			await LoadData();
		}
		else
		{
			auditMessage = "Tidak memiliki akses halaman Scan Picking";
			await _audit.LogAsync(LogTypes.LogInfo, "Scan Picking", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("Anda tidak memiliki akses.", Severity.Error);
		}
	}
	private async Task LoadData()
	{
		company = await _company.GetbyId(1);

		ListNota = await _db.RecordNota.Where(x => x.DateCreated.Date == DateTime.Now.Date).ToListAsync();
		ListNota = ListNota.OrderByDescending(x => Convert.ToInt32(x.NomorNota)).ToList();

		isProcessing = false;

		StateHasChanged();
	}	
	public async void Enter(KeyboardEventArgs e)
	{
		isProcessing = true;
		if (string.IsNullOrEmpty(id))
		{
			isProcessing = false;
			Snackbar.Add("Nomor Nota kosong.", Severity.Error);
			return;
		}

		if (e.Key == "Enter" || e.Key == "NumpadEnter")
		{			
			var notaExists = _db.RecordNota.Any(x => x.NomorNota.Equals(id));
			if (notaExists)
			{
				// string auditMessage = "Nomor nota: " + id + " sudah di scan";
				// await _audit.LogAsync(LogTypes.LogInfo, "Scan Picking", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

				Snackbar.Add("Nota sudah di scan", Severity.Error);
				id = "";
				isProcessing = false;

				StateHasChanged();
				return;
			}
			else
			{

				model = await _sales.SalesInvoiceMasterView(Convert.ToInt32(id));
				master = await _sales.GetbyId(Convert.ToInt32(id));
				TodoList = await _sales.SalesInvoiceDetailsView(Convert.ToInt32(id));

				StatusDiambil = master.SudahDiambil ? "Sudah Diambil" : "Belum Diambil";

				master.SudahDiambil = true;
				var result = await _sales.UpdateSalesInvoice(master);

				await Save(Convert.ToInt32(id), TodoList);

				if (result == true)
				{
					Snackbar.Add("Scan Selesai.", Severity.Success);
				}
				else
				{
					Snackbar.Add("Scan Gagal: Data tidak ditemukan.", Severity.Error);
				}

				id = "";
			}
		}
		
		isProcessing = false;

		StateHasChanged();
	}

	private async Task Save(int nomorNota, List<ProductView> productDetails)
	{
		string auditMessage = "Mencoba menyimpan Scan Picking.";
		var JenisTelurSelected = "";

		try
		{
			auditMessage = "Nomor nota: " + nomorNota;
			await _audit.LogAsync(LogTypes.LogInfo, "Scan Picking", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);
			
			foreach(ProductView pv in productDetails)
			{
				if (pv.ProductCode.StartsWith("TA-"))
				{
					JenisTelurSelected = "UTUH";
				}
				else if (pv.ProductId == 7)
				{
					JenisTelurSelected = "PUTIH";
				}
				else if (pv.ProductId == 16)
				{
					JenisTelurSelected = "BENTES";
				}
				else if (pv.ProductId == 17)
				{
					JenisTelurSelected = "PARAH";
				}
				else if (pv.ProductId == 19)
				{
					JenisTelurSelected = "PS";
				}
				else if (pv.ProductId == 106)
				{
					JenisTelurSelected = "RUSAK";
				}
				else if (pv.ProductId == 124)
				{
					JenisTelurSelected = "SUSUT";
				}
				else if ((new List<int>() { 15, 24, 25, 79 }).Contains(pv.ProductId))
				{
					JenisTelurSelected = "AFKIR";
				}
				else if ((new List<int>() { 10, 11 }).Contains(pv.ProductId))
				{
					JenisTelurSelected = "PETI";
				}
				else
				{
					JenisTelurSelected = "LAINNYA";
				}
				RecordNota recordNota = new RecordNota();
				recordNota.BeratTelur = pv.Qty;
				recordNota.JenisTelur = JenisTelurSelected;
				recordNota.NomorNota = nomorNota.ToString();
				recordNota.DateCreated = DateTime.Now;
				recordNota.CreatedBy = modelEmployee.EmployeeId;

				_db.RecordNota.Add(recordNota);

				// Save changes to the database
				await _db.SaveChangesAsync();

				auditMessage = "Input Nota " + JenisTelurSelected + " dengan nomor nota: " + nomorNota.ToString() + " dan jumlah: " + pv.Qty + " BERHASIL";
				await _audit.LogAsync(LogTypes.LogInfo, "Scan Picking", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

			}

			ListNota = await _db.RecordNota.Where(x => x.DateCreated.Date == DateTime.Now.Date).ToListAsync();
			ListNota = ListNota.OrderByDescending(x => Convert.ToInt32(x.NomorNota)).ToList();

			Snackbar.Add("Berhasil menyimpan", Severity.Success);
			
			StateHasChanged();
		}
		catch (DbUpdateException dex)
		{
			auditMessage = "Error: " + dex.Message + Environment.NewLine + dex.InnerException?.Message;
			await _audit.LogAsync(LogTypes.LogError, "Scan Picking", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

			Snackbar.Add("Error: " + dex.Message + Environment.NewLine + dex.InnerException?.Message, Severity.Error);
		}
		catch (Exception ex)
		{
			auditMessage = "Error e: " + ex.Message + Environment.NewLine + ex.StackTrace;
			await _audit.LogAsync(LogTypes.LogError, "Scan Picking", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

			Snackbar.Add("Error e: " + ex.Message + Environment.NewLine + ex.StackTrace, Severity.Error);
		}
	}
}

