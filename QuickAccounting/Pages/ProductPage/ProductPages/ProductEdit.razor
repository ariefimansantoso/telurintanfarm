@page "/app/productedit/{id}"
@inject IProduct _product
@inject IBrand _brand
@inject ICategory _category
@inject IUnit _unit
@inject ITax _tax
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>Product</PageTitle>
<div class="content">
					<div class="page-header">
						<div class="page-title">
							<h4>Product Edit</h4>
							<h6>Edit product</h6>
						</div>
					</div>
					<!-- /add -->
					<div class="card">
						<div class="card-body">
							<EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
							<div class="row">
								<div class="col-lg-8 col-sm-6 col-12">
									<div class="form-group">
										<label>Product Name</label>
										<input type="text" @bind="model.ProductName" >
										<ValidationMessage For="@(() => model.ProductName)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Code</label>
										<input type="text" @bind="model.ProductCode" readonly >
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Category</label>
										<RadzenDropDown Style="width:100%;" @bind-Value="model.GroupId" Placeholder="Select category" AllowFiltering="true" Data="@(listCategory)" TextProperty="GroupName" ValueProperty="GroupId"/>
									<ValidationMessage For="@(() => model.GroupId)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Unit</label>
										<RadzenDropDown Style="width:100%;" @bind-Value="model.UnitId" Placeholder="Select unit" AllowFiltering="true" Data="@(listUnit)" TextProperty="UnitName" ValueProperty="UnitId"/>
									<ValidationMessage For="@(() => model.UnitId)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Brand</label>
							<RadzenDropDown Style="width:100%;" @bind-Value="model.BrandId" Placeholder="Select brand" AllowFiltering="true" Data="@(listBrand)" TextProperty="Name" ValueProperty="BrandId" />
									<ValidationMessage For="@(() => model.BrandId)" />
									</div>
								</div>
								
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Quantity Alert</label>
										<input type="text" @bind="model.QtyAlert" >
									</div>
								</div>
					<h4 style="">Price & Tax</h4>
								<hr/>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
							<label>Selling Price</label>
							<input type="number" class="form-control" @bind="model.SalesRate">
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Purchase Price</label>
										<input type="number" class="form-control" @bind="model.PurchaseRate">
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>	Tax</label>
							<RadzenDropDown Style="width:100%" @bind-Value="model.TaxId" Placeholder="Select tax" AllowFiltering="true" Data="@(listTax)" TextProperty="TaxName" ValueProperty="TaxId" />
							<ValidationMessage For="@(() => model.TaxId)" />
									</div>
								</div>
					<div class="col-lg-12">
						<div class="form-group">
							<label>Description</label>
							<textarea class="form-control" @bind="model.Narration"></textarea>
						</div>
					</div>
								<div class="col-lg-12">
									<div class="form-group">
										<label>	Product Image</label>
											<div class="image-uploads">
									@if (model.Image == string.Empty)
									{
										<img src="/img/noimage.png" alt="img">
									}
									else
									{
										<img src="@model.Image" width="80" height="80">
									}
									<InputFile OnChange="OnFileChange" />
											</div>
									</div>
								</div>
								<div class="col-lg-12">
									<button type="submit" class="btn btn-submit me-2">Submit</button>
									<a href="/app/product" class="btn btn-cancel">Cancel</a>
								</div>
								
							</div>
							</EditForm>
						</div>
					</div>
					<!-- /add -->
				</div>
@code {
	[Parameter]
	public string id { get; set; }
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	Product model = new Product();
	IList<BrandView> listBrand;
	IList<ProductGroupView> listCategory;
	IList<UnitView> listUnit;
	IList<TaxView> listTax;
	string strMenu = "Inventory";
	protected override async Task OnInitializedAsync()
	{
		//CheckPriviliagee
		var authState = await authenticationState;
		var strRole = authState.User;
		string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		var strShow = await _privilege.PriviliageCheck(strMenu, strName);
		if (strShow.ShowAction == true)
		{
			await LoadData();
		}
		else
		{
			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("You dont have to privilege..", Severity.Error);
		}
	}
	private async Task LoadData()
	{
		model = await _product.GetbyId(Convert.ToInt32(id));
		listBrand = await _brand.GetAll();
		listUnit = await _unit.GetAll();
		listCategory = await _category.GetAll();
		listTax = await _tax.GetAll();
		StateHasChanged();
	}
	private async Task Save()
	{
		model.CompanyId = 1;
		var isCheck = await _product.CheckNameId(model.ProductName);
		if (isCheck == model.ProductId || isCheck == 0)
		{
			model.Barcode = model.ProductCode;
			model.IsActive = true;
			model.ModifyDate = DateTime.Now;
			var result = await _product.Update(model);
		    Snackbar.Add("Update Successfully.", Severity.Success);
		    await LoadData();
			StateHasChanged();
			navigation.NavigateTo("/app/product");
		}
		else
		{
			Snackbar.Add("Product name already exists.", Severity.Info);
	    }
	}
	async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "image/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		if (imageData == null)
		{
			model.Image = string.Empty;
		}
		else
		{
			model.Image = imageData;
		}
	}
}
