@page "/app/pricing"
@inject IPricingService _pricing
@inject IProduct _product
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]

@using QuickAccounting.Components
<Loader IsLoading="isLoading"></Loader>
<PageTitle>Set Harga Barang</PageTitle>
<div class="content">
	<div class="page-header">
		<div class="page-title">
			<h4>Set Harga Barang</h4>
		</div>
		<div class="page-btn">
			<Loading IsLoading="isProcessing">
			<a href="javascript:void(0);" @onclick="()=>SavePrice()" class="btn btn-added">
				<img src="assets/img/icons/plus.svg" alt="img">Simpan
			</a>
			</Loading>
		</div>
	</div>
	@if (_render)
	{
	<!-- /product list -->
	<div class="card">
		<div class="card-body">			
			<div class="table-responsive">
				<table class="mud-table-root">
					<thead class="mud-table-head">
						<!--!-->
						<tr class="mud-table-row">
							<!--!-->
							<th scope="col" class="mud-table-cell">Nama Barang</th>	
								<th scope="col" class="mud-table-cell"></th>
								@for (int i = 0; i < prices5Days.Count; i++)
							{								
								var igrouping = prices5Days[i];								

								<th scope="col" class="mud-table-cell">
										@igrouping.FirstOrDefault().PriceDate.ToString("dd-MM-yyyy HH:mm")
								</th>							
							}			
							
						</tr>
					</thead>
					<tbody class="mud-table-body">
						
						@for(int p = 0; p < products.Count; p++)
						{
								<tr class="mud-table-row" style="">
									<!--!-->
									<td class="mud-table-cell">
										@products[p].ProductName
									</td>
									<td class="mud-table-cell">
										@if (p == 0)
										{
											<input type="number" value="@inputValues[p]" @onchange="@NumberChanged" class="input-price" data-order="@products[p].ProductCode" data-pid="@products[p].ProductId" />
										}
										else if(p == 5)
										{
											<input type="number" value="@inputValues[p]" @onchange="@PriceBentesChanged" class="input-price" data-order="@products[p].ProductCode" data-pid="@products[p].ProductId" />
										}
										else if(p == 6)
										{
											<input type="number" value="@inputValues[p]" @onchange="@PricePutihChanged" class="input-price" data-order="@products[p].ProductCode" data-pid="@products[p].ProductId" />
										}
										else if(p == 7)
										{
											<input type="number" value="@inputValues[p]" @onchange="@PriceParahChanged" class="input-price" data-order="@products[p].ProductCode" data-pid="@products[p].ProductId" />
										}
										else if (p == 8)
										{
											<input type="number" value="@inputValues[p]" @onchange="@PricePSChanged" class="input-price" data-order="@products[p].ProductCode" data-pid="@products[p].ProductId" />
										}
										else
										{
											<input type="number" value="@inputValues[p]" class="input-price" data-order="@products[p].ProductCode" data-pid="@products[p].ProductId" />
										}
									</td>
									@for (int i = 0; i < prices5Days.Count; i++)
									{
										var igrouping = prices5Days[i];

										
											
											@if(igrouping.FirstOrDefault(x => x.ProductID == products[p].ProductId) != null)
											{
											<td class="mud-table-cell">
												@string.Format("{0:n0}", igrouping.FirstOrDefault(x => x.ProductID == products[p].ProductId).Price)
											</td>
											}
											else
											{
											<td class="mud-table-cell">
												@string.Format("{0:n0}", 0)
												</td>
											}
										
										
									}									
								</tr>
						}
												
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<!-- /product list -->
	}
</div>

<style type="text/css">
	.input-price {
		border: 1px solid rgba(145, 158, 171, 0.32);
		height: 36px;
		width: 100%;
		font-size: 12px;
		font-weight: 500;
		color: #637381;
		padding: 10px 5px;
		border-radius: 5px;
	}

	.mud-table-cell {
		padding:15px 5px !important;
		text-align: right !important;
		font-size: 12px !important;
	}
</style>
@code {
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }

	public List<ProductView> products;
	public List<IGrouping<string, PriceMaster>> prices5Days;

	private bool isLoading = true;
	bool isProcessing;
	private bool _render;

	public int[] inputValues;

	private void SetHarga(MouseEventArgs args)
	{
		int value0 = Convert.ToInt32(inputValues[0]);
		//inputValues[0] = value0;
		inputValues[1] = value0 - 400;
		inputValues[2] = value0 - 400 - 100;
		inputValues[3] = value0 - 400 - 100 - 100;
		inputValues[4] = value0 - 400 - 100 - 100 - 100;
		//inputValues[5] = value0 - 400 - 100 - 100 - 100 - 100;
		//inputValues[6] = value0 - 400 - 100 - 100 - 100 - 100 - 100;
	}

	private void NumberChanged(ChangeEventArgs e)
	{
		int value0 = Convert.ToInt32(e.Value);
		inputValues[0] = value0;
		inputValues[1] = value0 - 400;
		inputValues[2] = value0 - 400 - 100;
		inputValues[3] = value0 - 400 - 100 - 100;
		inputValues[4] = value0 - 400 - 100 - 100 - 100;
		//inputValues[5] = value0 - 400 - 100 - 100 - 100 - 100;
		//inputValues[6] = value0 - 400 - 100 - 100 - 100 - 100 - 100;
	}

	private void PriceBentesChanged(ChangeEventArgs args)
	{
		int value0 = Convert.ToInt32(args.Value); 
		inputValues[5] = value0;
	}

	private void PricePutihChanged(ChangeEventArgs args)
	{
		int value0 = Convert.ToInt32(args.Value);
		inputValues[6] = value0;
	}

	private void PriceParahChanged(ChangeEventArgs args)
	{
		int value0 = Convert.ToInt32(args.Value); 
		inputValues[7] = value0;
	}

	private void PricePSChanged(ChangeEventArgs args)
	{
		int value0 = Convert.ToInt32(args.Value);
		inputValues[8] = value0;
	}

	private async Task SavePrice()
	{
		isProcessing = true;
		//0 - 8 - 1
		//1 - 1 2
		//2 - 2 3
		//3 - 6 4

		PriceMaster p1 = new PriceMaster();
		PriceMaster p2 = new PriceMaster();
		PriceMaster p3 = new PriceMaster();
		PriceMaster p4 = new PriceMaster();
		PriceMaster p5 = new PriceMaster();
		PriceMaster p6 = new PriceMaster();
		PriceMaster p7 = new PriceMaster();
		PriceMaster p8 = new PriceMaster();
		PriceMaster p9 = new PriceMaster();

		DateTime insertDate = DateTime.Now;
		string priceGroup = Guid.NewGuid().ToString();

		p1.ProductID = 8;
		p1.Price = inputValues[0];
		p1.PriceDate = insertDate;
		p1.ProductCode = 1;
		p1.PriceGroup = priceGroup;
		var product1 = await _product.GetbyId(p1.ProductID);
		product1.SalesRate = p1.Price;

		p2.ProductID = 1;
		p2.Price = inputValues[1];
		p2.PriceDate = insertDate;
		p2.ProductCode = 2;
		p2.PriceGroup = priceGroup;
		var product2 = await _product.GetbyId(p2.ProductID);
		product2.SalesRate = p2.Price;

		p3.ProductID = 2;
		p3.Price = inputValues[2];
		p3.PriceDate = insertDate;
		p3.ProductCode = 3;
		p3.PriceGroup = priceGroup;
		var product3 = await _product.GetbyId(p3.ProductID);
		product3.SalesRate = p3.Price;

		p4.ProductID = 6;
		p4.Price = inputValues[3];
		p4.PriceDate = DateTime.Now;
		p4.ProductCode = 4;
		p4.PriceGroup = priceGroup;
		var product4 = await _product.GetbyId(p4.ProductID);
		product4.SalesRate = p4.Price;

		p5.ProductID = 14;
		p5.Price = inputValues[4];
		p5.PriceDate = insertDate;
		p5.ProductCode = 5;
		p5.PriceGroup = priceGroup;
		var product5 = await _product.GetbyId(p5.ProductID);
		product5.SalesRate = p5.Price;

		p6.ProductID = 16;
		p6.Price = inputValues[5];
		p6.PriceDate = insertDate;
		p6.ProductCode = 13;
		p6.PriceGroup = priceGroup;
		var product6 = await _product.GetbyId(p6.ProductID);
		product6.SalesRate = p6.Price;

		p7.ProductID = 7;
		p7.Price = inputValues[6];
		p7.PriceDate = insertDate;
		p7.ProductCode = 6;
		p7.PriceGroup = priceGroup;
		var product7 = await _product.GetbyId(p7.ProductID);
		product7.SalesRate = p7.Price;

		p8.ProductID = 17;
		p8.Price = inputValues[7];
		p8.PriceDate = insertDate;
		p8.ProductCode = 14;
		p8.PriceGroup = priceGroup;
		var product8 = await _product.GetbyId(p8.ProductID);
		product8.SalesRate = p8.Price;

		p9.ProductID = 19;
		p9.Price = inputValues[8];
		p9.PriceDate = insertDate;
		p9.ProductCode = 16;
		p9.PriceGroup = priceGroup;
		var product9 = await _product.GetbyId(p9.ProductID);
		product9.SalesRate = p9.Price;

		List<PriceMaster> prices = new List<PriceMaster>();
		prices.Add(p1);
		prices.Add(p2);
		prices.Add(p3);
		prices.Add(p4);
		prices.Add(p5);
		prices.Add(p6);
		prices.Add(p7);
		prices.Add(p8);
		prices.Add(p9);

		_pricing.InsertPrice(prices);

		await _product.Update(product1);
		await _product.Update(product2);
		await _product.Update(product3);
		await _product.Update(product4);
		await _product.Update(product5);
		await _product.Update(product6);
		await _product.Update(product7);
		await _product.Update(product8);
		await _product.Update(product9);

		//navigation.NavigateTo("/app/pricing");
		products = _pricing.GetAllProducts();
		prices5Days = _pricing.GetPricesTake5Days();

		inputValues = new int[9];
		for(int i = 0; i < 9; i++)
		{
			inputValues[i] = 0;
		}

		isProcessing = false;
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationState;
		var strRole = authState.User;
		string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		var strShow = await _privilege.PriviliageCheck("Pricing", strName);
		if(strShow == null)
		{
			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("You dont have to privilege..", Severity.Error);
			return;
		}

		if (strShow.ShowAction != true)
		{
			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("You dont have to privilege..", Severity.Error);
			return;
		}

		inputValues = new int[9];
		for(int i = 0; i < 9; i++)
		{
			inputValues[i] = 0;
		}
		
		products = _pricing.GetAllProducts();
		prices5Days = _pricing.GetPricesTake5Days();

		//CheckPriviliagee
		// var authState = await authenticationState;
		// var strRole = authState.User;
		// string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		// var strShow = await _privilege.PriviliageCheck("Daftar Harga Barang", strName);
		await LoadData();
		StateHasChanged();
		_render = true;
	}

	private async Task LoadData()
	{				
		isLoading = false;
		StateHasChanged();
	}
}
