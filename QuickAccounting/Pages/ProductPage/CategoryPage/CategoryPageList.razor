@page "/app/category"
@inject ICategory _category
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>Category</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Category</h4>
            <h6>Manage Category</h6>
        </div>
        <div class="page-btn">
            <a class="btn btn-added" style="cursor:pointer;" @onclick="() =>Show()"><img src="assets/img/icons/plus.svg" alt="img" class="me-1">Add New Category</a>
        </div>
    </div>
    <!-- /product list -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive table-scrollable">
                <RadzenDataGrid AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@listModel" TItem="ProductGroupView" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="ProductGroupView" Title="Image" Sortable="false" Width="120px">
                            <Template Context="data">
                                @if (data.Image == string.Empty)
                                {
                                    <img src="/img/noimage.png" height="60" width="60">
                                }
                                else
                                {
                                    <img src="@data.Image" width="60" height="60">
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ProductGroupView" Property="GroupName" Title="Category Name" Frozen="true" />
                        <RadzenDataGridColumn TItem="ProductGroupView" Title="Action" Frozen="true" Sortable="false" Filterable="false" Width="100px">
                            <Template Context="data">
                                <a class="me-3" style="cursor:pointer;" @onclick="() =>Edit(data.GroupId)">
                                    <img src="assets/img/icons/edit.svg" alt="img">
                                </a>
                                <a class="me-3 confirm-text" style="cursor:pointer;" @onclick="() =>Delete(data.GroupId)">
                                    <img src="assets/img/icons/delete.svg" alt="img">
                                </a>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    </div>
    <!-- /product list -->
</div>



<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> @ShowDialogue
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-lg-12 col-sm-4 col-12">
                    <div class="form-group">
                        <label>Category Name</label>
                        <input type="text" @bind="model.GroupName">
                        <ValidationMessage For="@(() => model.GroupName)" />
                    </div>
                </div>
                <div class="col-lg-12 col-sm-4 col-12">
                    <div class="form-group">
                        <label>Image</label>
                        @if (model.Image == string.Empty)
                        {
                            <img src="/img/noimage.png" height="60" width="60">
                        }
                        else
                        {
                            <img src="@model.Image" width="60" height="60">
                        }
                        <InputFile OnChange="OnFileChange" />
                    </div>
                </div>
                <div class="col-lg-12">
                    <button type="submit" class="btn btn-submit me-2">Save</button>
                    <a @onclick="@HandleCancel" class="btn btn-cancel">Cancel</a>
                </div>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private bool visible;
    private MudBlazor.DialogOptions dialogOptions = new() { FullWidth = true };
    string ShowDialogue;
    ProductGroup model = new ProductGroup();
    IList<ProductGroupView> listModel;
    string strMenu = "Inventory";
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }
    private async Task LoadData()
    {
        listModel = await _category.GetAll();
        StateHasChanged();
    }
    private async Task Show()
    {
        visible = true;
        ShowDialogue = "Category / Add";
        model.GroupId = 0;
        model.GroupUnder = 0;
        model.GroupName = string.Empty;
        model.Image = string.Empty;
        model.Narration = string.Empty;
        StateHasChanged();
    }
    private async Task Edit(int id)
    {
        visible = true;
        ShowDialogue = "Category / Edit";
        model = await _category.GetbyId(Convert.ToInt32(id));
        StateHasChanged();
    }
    private async Task Save()
    {
        model.CompanyId = 1;
        model.GroupUnder = 0;
        if (model.GroupId == 0)
        {
            var isCheck = await _category.CheckName(model.GroupName);
            if (isCheck == true)
            {
                Snackbar.Add("Category name already exists.", Severity.Info);
            }
            else
            {
                model.AddedDate = DateTime.UtcNow;
                var result = await _category.Save(model);

                if (result > 0)
                {
                    Snackbar.Add("Save Successfully.", Severity.Success);
                    await LoadData();
                    visible = false;
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Invalid.", Severity.Error);
                    StateHasChanged();
                }
            }
        }
        else
        {
            var isCheck = await _category.CheckNameId(model.GroupName);
            if (isCheck == model.GroupId || isCheck == 0)
            {
                model.ModifyDate = DateTime.UtcNow;
                bool result = false;
                result = await _category.Update(model);

                if (result == true)
                {
                    Snackbar.Add("Update Successfully.", Severity.Success);
                   await LoadData();
                    StateHasChanged();
                    visible = false;
                }
                else
                {
                    Snackbar.Add("Invalid.", Severity.Error);
                    StateHasChanged();
                }
            }
            else
            {
                Snackbar.Add("Category name already exists.", Severity.Info);
            }
        }
    }
    private async Task Delete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var result = await _category.Delete(id);
            if (result == true)
            {
                await LoadData();
                StateHasChanged();
                Snackbar.Add("Delete Successfully.", Severity.Success);
			}
			else
			{
                Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
                StateHasChanged();
			}
        }
    }
    private void HandleCancel()
    {
        visible = false;
        StateHasChanged();
    }
async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        if (imageData == null)
        {
            model.Image = string.Empty;
        }
        else
        {
            model.Image = imageData;
        }
    }
}
