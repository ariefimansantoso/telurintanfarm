@page "/"
@using QuickAccounting.Components
@using QuickAccounting.ExceptionHandling;
@layout LoginLayout
@inject UserAccountService userAccountService
@inject ICurrency _currency
@inject ICompany _company
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IEmployee _employee
<PageTitle>Masuk</PageTitle>
<!-- Main Wrapper -->
<div class="account-page">
    <div class="main-wrapper">
        <div class="account-content">
            <div class="login-wrapper">
                <div class="login-img">
                    <img src="img/login-v2.svg" alt="img">
                </div>
                <div class="login-content">
                    <div class="login-userset">
                        <div class="login-logo">
                            <img src="img/logo.png" alt="img">
                        </div>
                        <div class="login-userheading">
                            <h3>Masuk</h3>
                            <h4>Masuk ke area aplikasi</h4>
                        </div>
                        <div class="form-login">
                            <label>Nama Akun</label>
                            <div class="form-addons">
                                <input type="text" placeholder="Masukkan nama akun anda" @bind="model.Email">
                                <img src="assets/img/icons/mail.svg" alt="img">
                            </div>
                        </div>
                        <div class="form-login">
                            <label>Kata Sandi</label>
                            <div class="pass-group">
                                <input type="password" class="pass-input" @bind="model.Password" placeholder="Masukkan kata sandi anda">                                
                            </div>
                        </div>
                        <div class="form-login">
                            <div class="alreadyuser">
                                @*<h4><a href="/" class="hover-a">Forgot Password?</a></h4>*@
                            </div>
                        </div>
                        <div class="form-login">
                            <Loading IsLoading="isProcessing">
                            <a class="btn btn-login" @onclick="Authenticate">Masuk</a>
                            </Loading>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<CustomErrorBoundary @ref="errorBoundary">
	<ChildContent>
		<div class="page-wrapper @(HideLabel ? "opened" : "")">
			
		</div>
	</ChildContent>
	<ErrorContent Context="Exception">
		<div class="modal fade @showModel" tabindex="-1" aria-labelledby="addAgentModalLabel" aria-hidden="true" style="display:@ModalDisplay; opacity:1;">
			<div class="modal-dialog" style="top:90px;">
				<div class="modal-content">
					<div class="modal-header bg-light p-3">
						<h5 class="modal-title" id="addAgentModalLabel">Error</h5>
						<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => errorBoundary.Recover()">
							<span aria-hidden="true">×</span>
						</button>
					</div>

					<div class="modal-body">
						<div class="mb-3">

							<div class="alert alert-danger">
								<h3>@Exception.GetType()</h3>
								<h3>@Exception.Message</h3>
							</div>
						</div>

					</div>
					<div class="modal-footer">
						<div class="hstack gap-2 justify-content-end">
							<button type="button" class="btn btn-block btn-outline-success active" @onclick="() => errorBoundary.Recover()" data-bs-dismiss="modal">Close</button>
							<a class="btn btn-primary" @onclick="()=>GoToDashboard()">Go to dashboard</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</ErrorContent>
</CustomErrorBoundary>

@code {
    UserMaster master = new UserMaster();
    private bool HideLabel { get; set; } = false;
    string showModel = "";
    string strMessage;
    public string ModalDisplay = "none;";

    private class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();
    Company company = new Company();
    bool isProcessing;
    
	private CustomErrorBoundary errorBoundary;

    protected override async Task OnInitializedAsync()
    {
        model.Email = "";
        model.Password = "";
    }

    private async void GoToDashboard()
	{
		navManager.NavigateTo("/app/dashboard" , true);
	}

    private async Task Authenticate()
    {
        isProcessing = true;
        try
        {
            var userAccount = userAccountService.GetByUserName(model.Email, model.Password);
            if (userAccount == null || userAccount.Password != model.Password)
            {
                Snackbar.Add("Nama atau Password salah.", Severity.Error);
                return;
            }
            else
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                var employee = await _employee.GetbyUserId(userAccount.UserId);
                if(!employee.isActive)
                {
                    Snackbar.Add("Akun tidak ditemukan.", Severity.Error);
                    return;
                }

                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        Email = userAccount.Email,
                        RoleName = userAccount.RoleName
                    });
                var varCurrency = await _currency.GetCurrencyView(1);
                PublicVariables._Symbol = varCurrency.CurrencySymbol;
                navManager.NavigateTo("/app/dashboard", true);
            }
        }
        finally
        {
            isProcessing = false;
        }
        
    }
}