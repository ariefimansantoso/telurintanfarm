@page "/app/useradd"
@using System.Security.Claims
@inject IUser _user
@inject IPrivilege _privilege
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>User Add</PageTitle>


<div class="content">
					<div class="page-header">
						<div class="page-title">
							<h4>Add User</h4>
						</div>
					</div>
					<!-- /add -->
					<div class="card">
						<div class="card-body">
			<EditForm Model="model" OnValidSubmit="Save">
    <DataAnnotationsValidator />
							<div class="row">
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>User Name</label>
										<input type="text" @bind="model.UserName" >
							<ValidationMessage For="@(() => model.UserName)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Email</label>
										<input type="text" @bind="model.Email" >
							<ValidationMessage For="@(() => model.Email)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Role</label>
										<select @bind="model.RoleId" class="form-control">
											<option value="0">Choose</option>
								@if (listRole != null)
								{
									@foreach (var item in listRole)
									{
										<option value="@item.RoleId">@item.RoleName</option>
									}
								}
							</select>
							<ValidationMessage For="@(() => model.RoleId)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Password</label>
										<input type="password" @bind="model.Password" >
							<ValidationMessage For="@(() => model.Password)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Confirm Password</label>
										<input type="password" @bind="model.ConfirmPassword" >
							<ValidationMessage For="@(() => model.ConfirmPassword)" />
									</div>
								</div>
								<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
										<label>Phone</label>
										<input type="text" @bind="model.Phone" >
							<ValidationMessage For="@(() => model.Phone)" />
									</div>
								</div>
								
								<div class="col-lg-12">
									<button type="submit" class="btn btn-submit me-2">Save</button>
									<a href="/app/user" class="btn btn-cancel">Cancel</a>
								</div>
							</div>
							</EditForm>
						</div>
					</div>
					<!-- /add -->
				</div>
@code {
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	UserMaster model = new UserMaster();
	List<Role> listRole;
	string strMenu = "Users";
	protected override async Task OnInitializedAsync()
	{
	//CheckPriviliagee
		var authState = await authenticationState;
		var strRole = authState.User;
		string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		var strShow = await _privilege.PriviliageCheck(strMenu, strName);
		if (strShow.ShowAction == true)
		{
			LoadData();
		}
		else
		{
			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("You dont have to privilege..", Severity.Error);
		}
	}
	private async Task LoadData()
	{
		model.Image = string.Empty;
		model.Active = true;
		listRole = await _user.GetAllRole();
		model.RoleId = 0;
		model.UserName = string.Empty;
		model.Email = string.Empty;
		model.Phone = string.Empty;
		model.Password = string.Empty;
		model.ConfirmPassword = string.Empty;
		model.Active = true;
		model.Image = string.Empty;
		StateHasChanged();
	}
	private async Task Save()
	{
		var isCheck = await _user.CheckName(model.Email);
		if (isCheck == true)
		{
			Snackbar.Add("Email name already exists.", Severity.Info);
		}
		else
		{
			model.Image = string.Empty;
			model.Active = true;
			var result = await _user.Save(model);

			if (result > 0)
			{
				Snackbar.Add("Saved Successfully.", Severity.Success);
				navigation.NavigateTo("/app/user");
			}
                    else
                    {
				Snackbar.Add("Transaction Failed.", Severity.Error);
                    }
                }
            }
	}
