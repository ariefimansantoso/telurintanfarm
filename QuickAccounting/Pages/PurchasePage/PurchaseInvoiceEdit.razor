@page "/app/purchaseinvoiceedit/{id}"
@inject IPurchaseInvoice _purchase
@inject ICustomerSupplier _ledger
@inject IProduct _product
@inject ITax _tax
@inject ISnackbar Snackbar
@using System.Security.Claims
@using QuickAccounting.Components
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<Loader IsLoading="isLoading"></Loader>
<PageTitle>Purchase Edit</PageTitle>
<div class="content">
	<div class="page-header">
		<div class="page-title">
            <h4>
                Update Purchase Bill
                </h4>
		</div>
	</div>
	<div class="card">
		<div class="card-body">
			<div class="row">
                <div class="col-lg-4 col-sm-6 col-12">
					<div class="form-group">
						<label>Bill No</label>
						<div class="row">
							<div class="col-lg-10 col-sm-10 col-10">
								<input type="text" @bind="master.VoucherNo" readonly />
							</div>
						</div>
					</div>
				</div>
				<div class="col-lg-4 col-sm-6 col-12">
					<div class="form-group">
						<label>Supplier Name</label>
						<div class="row">
							<div class="col-lg-10 col-sm-10 col-10">
								<RadzenDropDown Style="width:100%;" @bind-Value="@master.LedgerId" Placeholder="Choose Supplier" AllowFiltering="true" Data="@(listLedger)" TextProperty="LedgerName" ValueProperty="LedgerId" />
							</div>
							<div class="col-lg-2 col-sm-2 col-2 ps-0">
								<div class="add-icon">
									<a href="javascript:void(0);"><img src="assets/img/icons/plus1.svg" alt="img"></a>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="col-lg-4 col-sm-6 col-12">
					<div class="form-group">
						<label>Invoice Date </label>
						<div class="input-groupicon">
                            <RadzenDatePicker @bind-Value=@master.Date DateFormat="d" Class="w-100" />
						</div>
					</div>
				</div>
				<div class="col-lg-4 col-sm-6 col-12">
					<div class="form-group">
						<label>Due Date </label>
						<div class="input-groupicon">
                            <RadzenDatePicker @bind-Value=@master.DueDate DateFormat="d" Class="w-100" />
						</div>
					</div>
				</div>
				<div class="col-lg-4 col-sm-6 col-12">
					<div class="form-group">
						<label>Reference No.</label>
						<input type="text" @bind="master.Reference" placeholder="Purchase order reference">
					</div>
				</div>
				<div class="col-lg-12 col-sm-6 col-12">
					<div class="form-group">
						<label>Product Name</label>
						<div class="input-groupicon">
							<RadzenDropDownDataGrid @bind-Value="@searchValue" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowVirtualization="true"
                                            AllowFiltering="true" AllowClear="true" Data=@listProduct TextProperty="ProductName" ValueProperty="ProductName"
                                            Change=@(args => OnChange(args, "DropDownDataGrid with virtualization using IQueryable")) Class="w-100">
                        <Columns>
                            <RadzenDropDownDataGridColumn Property="ProductCode" Width="160px" Title="Code"/>
                            <RadzenDropDownDataGridColumn Property="ProductName" Title="Product Name"/>
									<RadzenDropDownDataGridColumn Property="CurrentStock" Width="100px" Title="Stock" />
                        </Columns>
                    </RadzenDropDownDataGrid>
						</div>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="table-responsive">
					<table class="table">
						<thead>
							<tr>
								<th>Product / service</th>
								<th>Qty</th>
                                <th>Unit</th>
								<th>Rate</th>
								<th>Discount	</th>
								<th>Tax Amount</th>
								<th class="text-end">Amount</th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							@foreach (var td in TodoList)
							{
							<tr>

                                    <td style="width:300px;">@td.ProductName</td>
								<td><input type="number" class="form-control" @bind-value="td.Qty" style="width: 100px" @onkeyup="@(e => editItem(td.ProductId))" @onclick="@(e => editItem(td.ProductId))" @bind-value:event="oninput" /></td>
                                    <td>@td.UnitName</td>
								<td><input type="number" @bind-value="td.PurchaseRate" style="width: 120px" class="form-control" @onkeyup="@(e => editItem(td.ProductId))" @onclick="@(e => editItem(td.ProductId))" @bind-value:event="oninput"></td>
								<td><input type="number" @bind-value="@td.DiscountAmount" style="width: 100px" class="form-control" @onkeyup="@(e => editItem(td.ProductId))" @onclick="@(e => editItem(td.ProductId))" @bind-value:event="oninput"></td>
                                    <td class="text-end">@PublicVariables._Symbol@td.TaxAmount</td>
                                    <td class="text-end">@PublicVariables._Symbol@td.TotalAmount</td>
								<td>
                                        <a @onclick="@(e => Edit(td.ProductId))"><img src="assets/img/icons/edit.svg" alt="svg"></a>
                                        <a @onclick="@(e => deleteItem(td.Id , td.PurchaseDetailsId))"><img src="assets/img/icons/delete.svg" alt="svg"></a>
								</td>
							</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
			<div class="row">
                <div class="col-lg-6">
                    <div class="col-lg-12" style="margin-top:28px;">
					<div class="form-group">
						<label>Description</label>
						<textarea class="form-control" @bind="master.Narration"></textarea>
					</div>
				</div>
                </div>
				<div class="col-lg-6">
					<div class="total-order">
						<ul>
							<li>
								<h4>Sub Total</h4>
                                <h5><input type="number" class="form-control" readonly @bind="master.NetAmounts" @onkeyup="CalculateTotal" @bind:event="oninput" /></h5>
							</li>
							<li>
								<h4>Discount	</h4>
                                <h5><input type="number" class="form-control" @bind="master.BillDiscount" @onkeyup="CalculateTotal" @bind:event="oninput" /></h5>
							</li>
							<li>
                                <h4>Taxable Total</h4>
                                <h5><input type="number" class="form-control" readonly @bind="master.TotalAmount" @onkeyup="CalculateTotal" @bind:event="oninput" /></h5>
                            </li>
                            <li>
                                <h4>Vat</h4>
                                <h5><input type="number" class="form-control" readonly @bind="master.TotalTax" @onkeyup="CalculateTotal" @bind:event="oninput" /></h5>
                            </li>
                            <li>
                                <h4>Grand Total</h4>
                                <h5><input type="number" class="form-control" readonly @bind="master.GrandTotal" @onkeyup="CalculateTotal" /></h5>
                            </li>
						</ul>
					</div>
				</div>
			</div>
			<div class="row">
                <div class="col-lg-12">
                    <div class="payment-options">

                        <div class="column-5">
                            <Loading IsLoading="isProcessing">
                                <button @onclick="@Save" class="btn btn-submit me-2">Save</button>
                            </Loading>
                        </div>

                        <div class="column-5">
                            <a href="/app/purchase" class="btn btn-cancel">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
		</div>
	</div>
</div>


<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> @ShowDialogue
        </MudText>
    </TitleContent>
    <DialogContent>
            <div class="row">
                <div class="col-lg-4 col-sm-12 col-12">
                    <div class="form-group">
                        <label>Rate</label>
                        <input type="text" @bind="viewProduct.PurchaseRate">
                    </div>
                </div>
                <div class="col-lg-4 col-sm-12 col-12">
                    <div class="form-group">
                        <label>Discount Amount</label>
                        <input type="text" @bind="viewProduct.DiscountAmount">
                    </div>
                </div>
                <div class="col-lg-4 col-sm-12 col-12">
                    <div class="form-group">
                        <label>Tax</label>
                        <select class="form-control" @bind="viewProduct.TaxId">
                            @foreach(var item in listTax)
                            {
                                <option value="@item.TaxId">@item.TaxName</option>
                            }
                        </select>
                    </div>
                </div>
             
                <div class="col-lg-12">
                    <button type="button" @onclick="@HandleOk" class="btn btn-submit me-2">Save</button>
                    <a @onclick="@HandleCancel" class="btn btn-cancel">Cancel</a>
                </div>
            </div>
    </DialogContent>
</MudDialog>
@code {
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private bool visible;
    private MudBlazor.DialogOptions dialogOptions = new() { FullWidth = true };
    string ShowDialogue;
    PurchaseMaster master = new PurchaseMaster();
    IList<AccountLedgerView> listLedger;
    string searchValue = string.Empty;
    IList<ProductView> listProduct;
    IList<TaxView> listTax;
    ProductView product = new ProductView();
    ProductView viewProduct = new ProductView();
    int editedID = 0;
    List<ProductView> TodoList = new List<ProductView>();
    int decPurchaseVoucherType = 6;
    //HoldDeleteItem
    List<DeleteItem> deleteNo = new List<DeleteItem>();
    string strMenu = "Purchase";
    bool isProcessing;
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }
    private async Task LoadData()
    {
        listLedger = await _ledger.GetAll(22);
        listProduct = await _product.ProductWithStock();
        master = await _purchase.GetbyId(Convert.ToInt32(id));
        TodoList = await _purchase.PurchaseInvoiceDetailsView(Convert.ToInt32(id));
        listTax = await _tax.GetAll();
        viewProduct.TaxId = 1;
        isLoading = false;
        StateHasChanged();
    }
    private async void Save()
    {
        isProcessing = true;
        try
        {
        if (TodoList == null)
        {
            Snackbar.Add("Invalid Entry.", Severity.Info);
        }
        else if (master.LedgerId == 0)
        {
            Snackbar.Add("Choose Supplier.", Severity.Info);
        }
        else if (master.VoucherNo == string.Empty)
        {
            Snackbar.Add("Type Voucher No.", Severity.Info);
        }
        else if (master.GrandTotal == 0)
        {
            Snackbar.Add("Invalid Entry.", Severity.Info);
        }
        else
        {
            var authState = await authenticationState;
            var user = authState.User;
            string userName = user.FindFirst(ClaimTypes.Name).Value;
            master.UserId = userName;
            master.TotalAmount = master.TotalAmount;
            master.NetAmounts = master.NetAmounts;
            master.TaxRate = 0;
            master.PayAmount = 0;
            master.DisPer = 0;
            master.PreviousDue = master.GrandTotal;
            master.BalanceDue = master.GrandTotal;
            master.CompanyId = 1;
            master.FinancialYearId = 1;
            master.VoucherTypeId = decPurchaseVoucherType;
            master.SerialNo = "0";
            master.Status = "Unpaid";
            master.PurchaseOrderMasterId = 0;
            master.WarehouseId = 1;
            master.ModifyDate = DateTime.UtcNow;
            foreach (var item in TodoList)
            {
                PurchaseDetails details = new PurchaseDetails();
                if (item != null)
                {
                    details.PurchaseMasterId = master.PurchaseMasterId;
                    details.PurchaseDetailsId = item.PurchaseDetailsId;
                    details.ProductId = item.ProductId;
                    details.Qty = item.Qty;
                    details.UnitId = item.UnitId;
                    details.Rate = item.PurchaseRate;
                    details.Amount = item.Amount;
                    details.Discount = item.Discount;
                    details.DiscountAmount = item.DiscountAmount;
                    if (item.TaxId == 0)
                    {
                        details.TaxId = 1;
                    }
                    else
                    {
                        details.TaxId = item.TaxId;
                    }
                    details.TaxRate = item.TaxRate;
                    details.TaxAmount = item.TaxAmount;
                    details.BatchId = item.BatchId;
                    details.NetAmount = item.NetAmount;
                    details.GrossAmount = 0;
                    details.OrderDetailsId = 0;
                    master.listOrder.Add(details);
                }
            }
            foreach (var items in deleteNo)
            {
                DeleteItem details = new DeleteItem();
                if (items != null)
                {
                    details.PurchaseDetailsId = items.PurchaseDetailsId;
                    master.listDelete.Add(details);
                }

            }
            if (master.PaymentStatus == "Draft")
            {
                master.PaymentStatus = "Draft";
                var result = await _purchase.Update(master);

                if (result == true)
                {
                    Snackbar.Add("Purchase Bill Update Successfully.", Severity.Success);
                    navigation.NavigateTo($"/app/purchaseinvoiceview/{master.PurchaseMasterId}");
                }
                else
                {
                    Snackbar.Add("Transaction Failed.", Severity.Error);
                }
            }
            else if(master.PaymentStatus == "Approved")
            {
                master.PaymentStatus = "Approved";
                var result = await _purchase.UpdatePurchaseInvoice(master);

                if (result == true)
                {
                    Snackbar.Add("Transaction Complete.", Severity.Success);
                    navigation.NavigateTo($"/app/purchaseinvoiceview/{master.PurchaseMasterId}");
                }
                else
                {
                    Snackbar.Add("Transaction Failed.", Severity.Error);
                }
            }
            else
            {

            }
        }
    }
    finally
    {
        isProcessing = false;
    }
}
    private async void OnChange(object value, string name)
    {
        var myTodo = listProduct.FirstOrDefault(x => x.ProductName == value);
        if (myTodo != null)
        {
            foreach(var item in TodoList)
            {
                if(myTodo.ProductId == item.ProductId)
                {
                    Snackbar.Add("This product is already added.", Severity.Info);
                    return;
                }
            }
            product.ProductId = myTodo.ProductId;
            product.Barcode = myTodo.Barcode;
            product.ProductName = myTodo.ProductName;
            product.UnitId = myTodo.UnitId;
            product.UnitName = myTodo.UnitName;
            product.BatchId = 1;
            product.BatchNo = "NA";
            product.TaxId = myTodo.TaxId;
            product.TaxName = myTodo.TaxName;
            product.Qty = 1;
            product.PurchaseRate = myTodo.PurchaseRate;
            product.Discount = 0;
            product.DiscountAmount = 0;
            product.NetAmount = Math.Round(1 * myTodo.PurchaseRate, 2);
            product.TaxRate = 0;
            product.TaxAmount = 0;
            product.Amount = Math.Round(1 * myTodo.PurchaseRate, 2);
            product.TotalAmount = Math.Round(1 * myTodo.PurchaseRate, 2);

            //Addtolist
            AddToList();
            //listProduct = await _product.ProductWithStock();
            StateHasChanged();
        }
        else
        {

        }
    }
    private async void AddToList()
    {
        if (product.ProductId == 0)
        {
            Snackbar.Add("Invalid Product.", Severity.Info);
            return;
        }
        else if (product.UnitId == 0)
        {
            Snackbar.Add("Invalid Unit.", Severity.Info);
            return;
        }
        else if (product.Qty == 0)
        {
            Snackbar.Add("Invalid Qty.", Severity.Info);
            return;
        }
        if (editedID == 0)
        {
            var myTodoItem = new ProductView()
            {
                Id = TodoList.Count() + 1,
                PurchaseDetailsId = 0,
                ProductId = product.ProductId,
                Barcode = product.Barcode,
                UnitId = product.UnitId,
                Qty = product.Qty,
                PurchaseRate = product.PurchaseRate,
                BatchId = product.BatchId,
                Discount = product.Discount,
                DiscountAmount = product.DiscountAmount,
                TaxId = product.TaxId,
                TaxRate = product.TaxRate,
                TaxAmount = product.TaxAmount,
                Amount = product.Amount,
                NetAmount = product.NetAmount,
                TotalAmount = product.TotalAmount,
                ProductName = product.ProductName,
                UnitName = product.UnitName,
                TaxName = product.TaxName,
                BatchNo = "NA",
                ReceiptDetailsId = 0,
                OrderDetailsId = 0

            };
            TodoList.Add(myTodoItem);
            product.ProductId = 0;
            product.Barcode = string.Empty;
            product.UnitId = 0;
            product.BatchId = 0;
            product.TaxId = 1;
            product.Qty = 0;
            product.PurchaseRate = 0;
            product.Discount = 0;
            product.DiscountAmount = 0;
            product.TaxRate = 0;
            product.TaxAmount = 0;
            product.Amount = 0;
            product.NetAmount = 0;
            product.TotalAmount = 0;
            searchValue = string.Empty;
        }
        else
        {
            var myTodos = TodoList.FirstOrDefault(x => x.ProductId == editedID);
            myTodos.ProductId = product.ProductId;
            myTodos.UnitId = product.UnitId;
            myTodos.BatchId = product.BatchId;
            myTodos.Qty = product.Qty;
            //Calculate
            decimal decGrossValue = 0;
            decimal decPercentgeDiscount = 0;
            decimal decTtlDiscount = 0;
            decimal decNetValue = 0;
            decimal decTaxAmount = 0;
            decimal decTotalTax = 0;
            decimal decGrndTotl = 0;
            if (Convert.ToDecimal(product.Qty) > 0 && Convert.ToDecimal(product.PurchaseRate) > 0)
            {
                decGrossValue = Convert.ToDecimal(product.PurchaseRate) * Convert.ToDecimal(product.Qty);

                decPercentgeDiscount = Convert.ToDecimal(product.DiscountAmount) * 100 / decGrossValue;
                decTtlDiscount = decPercentgeDiscount;
                myTodos.Discount = decPercentgeDiscount;

                decNetValue = decGrossValue - Convert.ToDecimal(product.DiscountAmount);
                myTodos.DiscountAmount = product.DiscountAmount;
                //ClculteT
                myTodos.PurchaseRate = product.PurchaseRate;
                myTodos.TaxId = product.TaxId;
                myTodos.TaxRate = product.TaxRate;
                decTaxAmount = decNetValue * product.TaxRate / 100;
                myTodos.TaxAmount = Math.Round(decTaxAmount, 2);
                decGrndTotl = decNetValue;

                myTodos.Amount = Math.Round(decGrossValue, 2);
                myTodos.NetAmount = Math.Round(decGrossValue, 2);
                myTodos.VatAmount = Math.Round(decTaxAmount, 2);
                myTodos.TotalAmount = Math.Round(decGrndTotl + decTaxAmount, 2);
            }
            else
            {
                myTodos.Discount = 0;
            }

            product.ProductId = 0;
            product.Barcode = string.Empty;
            product.UnitId = 0;
            product.BatchId = 0;
            product.TaxId = 1;
            product.Qty = 0;
            product.PurchaseRate = 0;
            product.Discount = 0;
            product.DiscountAmount = 0;
            product.TaxRate = 0;
            product.TaxAmount = 0;
            product.Amount = 0;
            product.NetAmount = 0;
            product.TotalAmount = 0;
            searchValue = string.Empty;
            editedID = 0;
        }
        CalculateTotal();
        StateHasChanged();
    }
    void editItem(int id)
    {
        var myTodo = TodoList.FirstOrDefault(x => x.ProductId == id);
        product.ProductId = myTodo.ProductId;
        product.Barcode = myTodo.Barcode;
        product.ProductName = myTodo.ProductName;
        product.UnitId = myTodo.UnitId;
        product.UnitName = myTodo.UnitName;
        product.BatchId = myTodo.BatchId;
        product.BatchNo = myTodo.BatchNo;
        product.TaxId = product.TaxId;
        product.TaxName = myTodo.TaxName;
        product.Qty = myTodo.Qty;
        product.PurchaseRate = myTodo.PurchaseRate;
        product.Discount = myTodo.Discount;
        product.DiscountAmount = myTodo.DiscountAmount;
        product.NetAmount = myTodo.NetAmount;
        product.Amount = myTodo.Amount;
        product.TaxRate = myTodo.TaxRate;
        product.TaxAmount = myTodo.TaxAmount;
        product.TotalAmount = myTodo.TotalAmount;
        editedID = id;
        AddToList();
    }
    void deleteItem(int id, int PurchaseDetailsId)
    {
        if (id == 0)
        {
            var myTodo = TodoList.FirstOrDefault(x => x.PurchaseDetailsId == PurchaseDetailsId);
            TodoList.Remove(myTodo);

            //HoldId
            var myHoldId = new DeleteItem()
                {
                    PurchaseDetailsId = myTodo.PurchaseDetailsId,
                };
            deleteNo.Add(myHoldId);
        }
        else
        {
            var myTodo = TodoList.FirstOrDefault(x => x.Id == id);
            TodoList.Remove(myTodo);
        }
        product.ProductId = 0;
        product.Barcode = string.Empty;
        product.UnitId = 0;
        product.BatchId = 0;
        product.TaxId = 1;
        product.Qty = 0;
        product.PurchaseRate = 0;
        product.Discount = 0;
        product.DiscountAmount = 0;
        product.TaxRate = 0;
        product.TaxAmount = 0;
        product.TotalAmount = 0;
        product.NetAmount = 0;
        product.TotalAmount = 0;
        editedID = 0;
        CalculateTotal();
    }
    void CalculateTotal()
    {
        decimal decTotalAmount = 0;
        decimal decAdditionalCost = 0;
        decimal decTaxAmount = 0;
        decimal decTotalDisTax = 0;
        decimal decGrandTotalCshbnk = 0;
        decimal decNetAmount = 0;
        decimal decCheckTax = 0;
        decimal decGrandTotal = 0;
        decimal decVat = 0;
        foreach (var todo in TodoList)
        {
            decTotalAmount = decTotalAmount + todo.TotalAmount;
            decNetAmount = decNetAmount + todo.NetAmount;
            decCheckTax = decCheckTax + todo.TaxAmount;
            decVat = decVat + todo.VatAmount;
        }
        //if (_selectedItem != null)
        //{
        //    master.TaxRate = _selectedItem.Rate;
        //}
        //else
        //{
        //    master.TaxRate = 0;
        //}
        master.NetAmounts = Math.Round(decNetAmount, 2);

        decimal decTotalAmountTax = 0;
        decTotalAmountTax = decTotalAmount;
        decTotalDisTax = decTotalAmount;
        if (master.BillDiscount > 0)
        {
            master.DisPer = (master.BillDiscount * 100) / (decTotalAmountTax);
        }
        else
        {
            master.DisPer = 0;
        }
        //if (decCheckTax > 0)
        //{
        //    decTaxAmount = Math.Round(decCheckTax, 2);
        //    master.TotalTax = Math.Round(decCheckTax, 2);
        //}
        //else
        //{
        //if (master.TaxRate > 0)
        //{
        //decTaxAmount = decTotalDisTax * master.TaxRate / 100;
        master.TotalAmount = Math.Round(master.NetAmounts - master.BillDiscount, 2);
        master.TotalTax = Math.Round(decVat, 2);
        //}
        //else
        //{
        //    master.TaxRate = 0;
        //    master.TotalTax = 0;
        //}
        //}
        decimal decDiscountAmount = 0;
        decDiscountAmount = master.BillDiscount;
        decGrandTotal = Math.Round((decTotalDisTax + decAdditionalCost + decTaxAmount) - (decDiscountAmount), 2);

        if (decGrandTotal >= 0)
        {
            master.GrandTotal = decGrandTotal + master.ShippingAmount;
        }
        else
        {
            master.BillDiscount = 0;
            master.GrandTotal = decGrandTotal + master.ShippingAmount;
        }
        decGrandTotalCshbnk = master.PayAmount;
        if (master.GrandTotal >= decGrandTotalCshbnk)
        {
            var decTotl = master.GrandTotal - decGrandTotalCshbnk;
            master.PreviousDue = Math.Round(decTotl, 2);
        }
        else
        {
            master.PayAmount = 0;
            master.PreviousDue = 0;
        }
    }
    private async void Edit(int productId)
    {
        visible = true;
        var myTodo = listProduct.FirstOrDefault(x => x.ProductId == productId);
        if (myTodo != null)
        {
            ShowDialogue = myTodo.ProductName;
            viewProduct.ProductName = myTodo.ProductName;
            viewProduct.ProductId = myTodo.ProductId;
            viewProduct.PurchaseRate = myTodo.PurchaseRate;
            viewProduct.DiscountAmount = myTodo.DiscountAmount;
        }
        StateHasChanged();

    }
    private void HandleOk()
    {
        visible = false;
        var myTodo = TodoList.FirstOrDefault(x => x.ProductId == viewProduct.ProductId);
        product.ProductId = myTodo.ProductId;
        product.Barcode = myTodo.Barcode;
        product.ProductName = myTodo.ProductName;
        product.UnitId = myTodo.UnitId;
        product.UnitName = myTodo.UnitName;
        product.BatchId = myTodo.BatchId;
        product.BatchNo = myTodo.BatchNo;
        product.TaxId = viewProduct.TaxId;
        product.TaxName = myTodo.TaxName;
        product.Qty = myTodo.Qty;
        product.PurchaseRate = viewProduct.PurchaseRate;
        product.Discount = myTodo.Discount;
        product.DiscountAmount = viewProduct.DiscountAmount;
        product.NetAmount = myTodo.NetAmount;
        product.Amount = myTodo.Amount;
        var mytax = listTax.FirstOrDefault(x => x.TaxId == viewProduct.TaxId);
        if (mytax != null)
        {
            product.TaxRate = mytax.Rate;
        }
        else
        {
            product.TaxRate = myTodo.TaxRate;
        }
        product.TaxAmount = myTodo.TaxAmount;
        product.TotalAmount = myTodo.TotalAmount;
        editedID = myTodo.ProductId;
        AddToList();
    }
    private void HandleCancel(MouseEventArgs e)
    {
        visible = false;
    }
}
