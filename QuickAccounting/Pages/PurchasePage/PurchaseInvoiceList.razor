@page "/app/purchase"
@inject IPurchaseInvoice _purchase
@inject ICustomerSupplier _customersupplier
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<Loader IsLoading="isLoading"></Loader>
<PageTitle>Purchase</PageTitle>
<div class="content">
						<div class="page-header">
							<div class="page-title">
								<h4>Purchase Bill</h4>
							</div>
							<div class="page-btn">
								<a href="/app/purchaseinvoiceadd" class="btn btn-added">
									<img src="assets/img/icons/plus.svg" alt="img">Add New</a>
							</div>
						</div>

						<!-- /product list -->
						<div class="card">
							<div class="card-body">
			<!-- /Filter -->
				<div class="">
					<div class="card-body pb-0">
					<div class="row">
						<div class="col-lg col-sm-6 col-12">
							<div class="form-group">
								From Date
								<input type="date" @bind="@dtFromDate" class="form-control">
							</div>
						</div>
						<div class="col-lg col-sm-6 col-12">
							<div class="form-group">
								To Date
								<input type="date" @bind="@dtToDate" class="form-control">
							</div>
						</div>
							<div class="col-lg col-sm-6 col-12">
								<div class="form-group">
									Bill No
									<input type="text" @bind="@strVoucherNo" placeholder="Bill No">
								</div>
							</div>
						<div class="col-lg col-sm-6 col-12">
							<div class="form-group">
								Supplier
								<RadzenDropDown Style="width:100%;" @bind-Value="@LedgerId" Placeholder="Choose Supplier" AllowFiltering="true" Data="@(listLedger)" TextProperty="LedgerName" ValueProperty="LedgerId" />
							</div>
						</div>
						<div class="col-lg-1 col-sm-6 col-12">
							<div class="form-group" style="margin-top:20px;">
								<a class="btn btn-filters ms-auto" @onclick="()=>LoadData()"><img src="assets/img/icons/search-whites.svg" alt="img"></a>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- /Filter -->
			
								<div class="table-responsive">
						<MudTable Items="@listModel" Dense="@dense" Hover="@hover" Filter="new Func<PurchaseMasterView,bool>(FilterFunc1)">
					<ToolBarContent>
						<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
					</ToolBarContent>
                    <HeaderContent>
                        <MudTh>Nama Supplier</MudTh>
                        <MudTh>Bill No</MudTh>
                        <MudTh>Reference</MudTh>
                        <MudTh>Date</MudTh>
                        <MudTh>Total</MudTh>
						<MudTh>Status</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
							<RowTemplate>
								<MudTd DataLabel="LedgerName">@context.LedgerName</MudTd>
								<MudTd DataLabel="Email">@context.VoucherNo</MudTd>
								<MudTd DataLabel="Reference">@context.Reference</MudTd>
								<MudTd DataLabel="Date">@context.Date</MudTd>
								<MudTd DataLabel="GrandTotal">@PublicVariables._Symbol @string.Format("{0:n0}", context.GrandTotal)</MudTd>
						@if (context.PaymentStatus == "Draft")
								{
							<MudTd DataLabel="PaymentStatus" Class="badges bg-lightred">@context.PaymentStatus</MudTd> <br/>
							<MudTd DataLabel="PaymentStatus" Class="badges bg-lightred">APPROVAL PENDING</MudTd>
								}
								else
								{
							<MudTd DataLabel="PaymentStatus" Class="badges bg-lightgreen">@context.PaymentStatus</MudTd>
								}
								<MudTd DataLabel="">
									@if (context.PaymentStatus == "Draft")
							{
								<a class="action-set" href="javascript:void(0);" data-bs-toggle="dropdown" aria-expanded="true">
									<i class="fa fa-ellipsis-v" aria-hidden="true"></i>
								</a>
								<ul class="dropdown-menu"  >
									<li>
										<a href="/app/purchaseinvoiceview/@context.PurchaseMasterId" class="dropdown-item"><img src="assets/img/icons/eye1.svg" class="me-2" alt="img">View</a>
									</li>
									<li>
										<a href="/app/purchaseinvoiceedit/@context.PurchaseMasterId" class="dropdown-item"><img src="assets/img/icons/plus-circle.svg" class="me-2" alt="img">Update</a>
									</li>
									<li>
										<a @onclick="()=> Delete(context)" class="dropdown-item confirm-text"><img src="assets/img/icons/delete1.svg" class="me-2" alt="img">Delete Bill</a>
									</li>
								</ul>
							}
							else
							{
								<a class="action-set" href="javascript:void(0);" data-bs-toggle="dropdown" aria-expanded="true">
									<i class="fa fa-ellipsis-v" aria-hidden="true"></i>
								</a>
								<ul class="dropdown-menu">
									<li>
										<a href="/app/purchaseinvoiceview/@context.PurchaseMasterId" class="dropdown-item"><img src="assets/img/icons/eye1.svg" class="me-2" alt="img">View</a>
									</li>
									<li>
										<a href="/app/paymentsmade/@context.PurchaseMasterId" class="dropdown-item"><img src="assets/img/icons/plus-circle.svg" class="me-2" alt="img">Generate Payment</a>
									</li>
									<li>
										<a href="/app/purchasereturn/@context.PurchaseMasterId" class="dropdown-item"><img src="assets/img/icons/dollar-square.svg" class="me-2" alt="img">Generate Debit Note</a>
									</li>
									<li>
										<a @onclick="()=> Delete(context)" class="dropdown-item confirm-text"><img src="assets/img/icons/delete1.svg" class="me-2" alt="img">Delete Bill</a>
									</li>
								</ul>
							}
								</MudTd>
							</RowTemplate>
							<PagerContent>
								<MudTablePager />
							</PagerContent>
						</MudTable>
								</div>
							</div>
						</div>
						<!-- /product list -->
					</div>

@code {
	[CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
	private bool dense = true;
	private bool hover = true;
	IList<AccountLedgerView> listLedger;
	IList<PurchaseMasterView> listModel;
	DateTime dtFromDate = DateTime.UtcNow.AddDays(-7);
	DateTime dtToDate = DateTime.UtcNow;
	string strVoucherNo = string.Empty;
	int LedgerId = 0;
	string strMenu = "Purchase";
	private string searchString1 = "";
	private bool isLoading = true;
	protected override async Task OnInitializedAsync()
	{
		//CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
		listLedger = await _customersupplier.GetAll(22); //PayableGroupId
           await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
		StateHasChanged();
	}
	private async Task LoadData()
	{
		
		listModel = await _purchase.PurchaseInvoiceSearch(dtFromDate, dtToDate, strVoucherNo, LedgerId);
		isLoading = false;
		StateHasChanged();
	}
	private bool FilterFunc1(PurchaseMasterView element) => FilterFunc(element, searchString1);

	private bool FilterFunc(PurchaseMasterView element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.LedgerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.VoucherNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
	private async Task Delete(PurchaseMasterView view)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
		if (confirmed)
		{
			PurchaseMaster deletePurchase = new PurchaseMaster();
			deletePurchase = await _purchase.GetbyId(view.PurchaseMasterId);
			var result = await _purchase.Delete(deletePurchase);
			if (result == true)
			{
				await LoadData();
				StateHasChanged();
				Snackbar.Add("Delete Successfully.", Severity.Success);
			}
			else
			{
				Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
				StateHasChanged();
			}
		}
	}
}
