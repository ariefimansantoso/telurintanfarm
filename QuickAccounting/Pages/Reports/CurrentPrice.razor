@page "/app/currentprices"
@inject IPricingService _pricing
@inject IProduct _product
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@attribute [Authorize]

@using QuickAccounting.Components
<Loader IsLoading="isLoading"></Loader>
<PageTitle>Harga Telur Saat Ini</PageTitle>
<div class="content">

	@if (_render)
	{
		var productGroup = products.GroupBy(x => x.GroupName).ToList();

		for(int q = 0; q < productGroup.Count; q++)
		{
			<div class="row">
				<div class="container-fluid">
					<div class="col-md-12">
						<div class="brand-text float-left mt-4">
							<h3>Harga @productGroup[q].Key Saat Ini</h3>
						</div>
					</div>
				</div>
			</div>

			@for (int i = 0; i < productGroup[q].Count(); i += 4)
			{
				<div class="row">

					@{
						var items = productGroup[q].Skip(i).Take(4).ToList();
					}

					@for (int z = 0; z < items.Count; z++)
					{
						<div class="col-lg-3 col-sm-6 col-12">
							<div class="dash-widget">
								<div class="dash-widgetimg">
									<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
								</div>
								<div class="dash-widgetcontent">
									<h5><span class="counters">@PublicVariables._Symbol @string.Format("{0:n0}", items[z].SalesRate)</span></h5>
									<h6>@items[z].ProductName</h6>
								</div>
							</div>
						</div>
					}

				</div>
			}
		}
	}
</div>

@code {
	public List<ProductView> products;

	private bool isLoading = true;
	private bool _render;

	protected override async Task OnInitializedAsync()
	{						
		await LoadData();
		StateHasChanged();
		_render = true;
	}

	private async Task LoadData()
	{
		products = await _product.GetAll();
		products = products.OrderBy(z => z.QueueNumber).ToList();		
		isLoading = false;
		StateHasChanged();
	}
}
