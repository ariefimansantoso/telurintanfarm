@page "/app/balancesheet"
@inject IAccountReport report
@inject ICompany _company;
@using System.Data;
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject IPrintingService PrintingService
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>BalanceSheet</PageTitle>
<div class="content">
						<div class="page-header">
							<div class="page-title">
								<h4>BalanceSheet</h4>
							</div>
						</div>

						<!-- /product list -->
						<div class="card">
							<div class="card-body">
			<!-- /Filter -->
				<div class="">
					<div class="card-body pb-0">
					<div class="row">
						<div class="col-lg-3 col-sm-6 col-12">
							<div class="form-group">
								From Date
								<RadzenDatePicker @bind-Value=@dtFromDate DateFormat="d" Class="w-100" />
							</div>
						</div>
						<div class="col-lg-3 col-sm-6 col-12">
							<div class="form-group">
								To Date
								<RadzenDatePicker @bind-Value=@dtToDate DateFormat="d" Class="w-100" />
							</div>
						</div>
                        <div class="col-lg-3 col-sm-6 col-12">
                            <div class="form-group">
                              <span style="margin-left:-58px;"> Show Details</span>
                                <RadzenSwitch Style="margin-top:24px; float:left;" @bind-Value=@value Change=@(args => OnChange(args, "Switch")) />
                            </div>
                        </div>
						<div class="col-lg-3 col-sm-6 col-12">
							<div class="form-group" style="margin-top:20px;">
                                <a style="float:left; margin-right:4px;" class="btn btn-filters ms-auto" @onclick="()=>LoadData()"><img src="assets/img/icons/search-whites.svg" alt="img"></a>
                                <a style="float:left;" class="btn btn-filters ms-auto" @onclick="@(_ => PrintingService.Print("printable-form", PrintType.Html))"><img src="assets/img/icons/printer.svg" alt="img"></a>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- /Filter -->
			
            <form id="printable-form">
								<div class="table-responsive">
									<br/>
									<hr/>
				<table style="width: 100%;line-height: inherit;text-align: left;">
					<tbody>
						<tr>
							<td style="padding:5px;vertical-align:top;text-align:center;padding-bottom:20px">
								<font style="vertical-align: inherit;"><font style="vertical-align: inherit;font-size: 22px;color:#000;font-weight: 600;"> @company.CompanyName </font></font><br>
								<font style="vertical-align: inherit;"><font style="vertical-align: inherit;font-size: 17px;color:#000;font-weight: 600;">@company.Address</font></font><br>
								<font style="vertical-align: inherit;"><font style="vertical-align: inherit;font-size: 15px;color:#000;font-weight: 600;">@company.PhoneNo</font></font><br>
								<font style="vertical-align: inherit;"><font style="vertical-align: inherit;font-size: 16px;color:#000;font-weight: 600;"> BalanceSheet</font></font><br>
							</td>
						</tr>
					</tbody>
				</table>
<br/>
				@((MarkupString)myMarkup)
								</div>
                                </form>
							</div>
						</div>
						<!-- /product list -->
					</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    DateTime dtFromDate = DateTime.UtcNow.AddDays(-1);
    DateTime dtToDate = DateTime.UtcNow;
    Company company = new Company();
    string myMarkup;
    bool value;
    int inCurrenRowIndex = 0;
    int inCurentcolIndex = 0;
    decimal decPrintOrNot = 0;
    decimal decPrintOrNot1 = 0;
    string calculationMethod = string.Empty;
    string strMenu = "Reports";
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            company = await _company.GetbyId(1);
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
        StateHasChanged();
    }
    private async Task LoadData()
    {

        string calculationMethod = "FIFO";
        DataSet DsetBalanceSheet = new DataSet();
        DataTable dtbl = new DataTable();
        DsetBalanceSheet = report.BalanceSheet(dtToDate, 1);


        //------------------- Asset -------------------------------//
        dtbl = DsetBalanceSheet.Tables[0];
        string values = @"<table class='table' id='tbldemo'>

                  <tr style='background: #F3F2F7;'>
                  <th></th>
                  <th></th>
                  <th></th>
                  <th></th>
                  </tr>";
        values += @"<tr style='background: #F3F2F7;'>
<th>" +"Assets"+ @"</td>
<th>" + "Amount" + @"</td>
<th>" + "Liabilities" + @"</td>
<th>" + "Amount" + @"</td>
            </tr>";
        foreach (DataRow rw in dtbl.Rows)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + rw["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            if (value == true)
            {
                DataSet DsetBalanceSheet1 = new DataSet();
                DataTable dtbl1 = new DataTable();
                DsetBalanceSheet1 = report.BalanceSheetDetailed(dtToDate, 1, Convert.ToInt32(rw["ID"].ToString()), true);
                dtbl1 = DsetBalanceSheet1.Tables[0];
                foreach (DataRow rw1 in dtbl1.Rows)
                {
                    values += @"<tr>
<td style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + rw1["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                }
            }
        }
        decimal dcTotalAsset = 0;
        if (dtbl.Rows.Count > 0)
        {
            dcTotalAsset = decimal.Parse(dtbl.Compute("Sum(Balance)", string.Empty).ToString());
        }
        //------------------------ Liability ---------------------//
        dtbl = new DataTable();
        dtbl = DsetBalanceSheet.Tables[1];
        int index = 0;
        foreach (DataRow rw in dtbl.Rows)
        {
            if (index < dtbl.Rows.Count)
            {
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol+ rw["Balance"].ToString() + @"</td>
            </tr>";
                if (value == true)
                {
                    DataSet DsetBalanceSheet1 = new DataSet();
                    DataTable dtbl1 = new DataTable();
                    DsetBalanceSheet1 = report.BalanceSheetDetailed(dtToDate, 1, Convert.ToInt32(rw["ID"].ToString()), false);
                    dtbl1 = DsetBalanceSheet1.Tables[0];
                    foreach (DataRow rw1 in dtbl1.Rows)
                    {
                        values += @"<tr>
<td style='font-size:10px;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + rw1["Balance"].ToString() + @"</td>
            </tr>";
                    }
                }
            }
            else
            {
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + rw["Balance"].ToString() + @"</td>
            </tr>";
                if (value == true)
                {
                    DataSet DsetBalanceSheet1 = new DataSet();
                    DataTable dtbl1 = new DataTable();
                    DsetBalanceSheet1 = report.BalanceSheetDetailed(dtToDate, 1, Convert.ToInt32(rw["AccountGroupId"].ToString()), false);
                    dtbl1 = DsetBalanceSheet1.Tables[0];
                    foreach (DataRow rw1 in dtbl1.Rows)
                    {
                        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + rw1["Balance"].ToString() + @"</td>
            </tr>";
                    }
                }
            }
            index++;
        }
        decimal dcTotalLiability = 0;
        if (dtbl.Rows.Count > 0)
        {
            dcTotalLiability = decimal.Parse(dtbl.Compute("Sum(Balance)", string.Empty).ToString());
        }
        decimal dcClosingStock = 0;
        dcClosingStock = report.StockValueGetOnDate(dtToDate, calculationMethod, false, false);
        dcClosingStock = Math.Round(dcClosingStock, 2);
        //---------------------Opening Stock---------------------------------------------------------------------------------------------------------------
        decimal dcOpeninggStock = 0;
        dcOpeninggStock = report.StockValueGetOnDate(dtFromDate, calculationMethod, true, true);
        decimal dcProfit = 0;
        DataSet dsetProfitAndLoss = new DataSet();
        dsetProfitAndLoss = report.ProfitAndLossAnalysisUpToaDateForBalansheet(dtFromDate, dtToDate, 1);
        DataTable dtblProfit = new DataTable();
        dtblProfit = dsetProfitAndLoss.Tables[0];
        for (int i = 0; i < dsetProfitAndLoss.Tables.Count; ++i)
        {
            dtbl = dsetProfitAndLoss.Tables[i];
            decimal dcSum = 0;
            if (i == 0 || (i % 2) == 0)
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Debit)", string.Empty).ToString());
                    dcProfit = dcProfit - dcSum;
                }
            }
            else
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Credit)", string.Empty).ToString());
                    dcProfit = dcProfit + dcSum;
                }
            }
        }
        decimal decCurrentProfitLoss = 0;
        decCurrentProfitLoss = dcProfit + (dcClosingStock - dcOpeninggStock);
        decimal dcProfitOpening = 0;
        DataSet dsetProfitAndLossOpening = new DataSet();
        dsetProfitAndLossOpening = report.ProfitAndLossAnalysisUpToaDateForPreviousYears(dtFromDate, 1);
        DataTable dtblProfitOpening = new DataTable();
        dtblProfitOpening = dsetProfitAndLossOpening.Tables[0];
        for (int i = 0; i < dsetProfitAndLossOpening.Tables.Count; ++i)
        {
            dtbl = dsetProfitAndLossOpening.Tables[i];
            decimal dcSum = 0;
            if (i == 0 || (i % 2) == 0)
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Debit)", string.Empty).ToString());
                    dcProfitOpening = dcProfitOpening - dcSum;
                }
            }
            else
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Credit)", string.Empty).ToString());
                    dcProfitOpening = dcProfitOpening + dcSum;
                }
            }
        }
        DataTable dtblProfitLedgerOpening = new DataTable();
        dtblProfitLedgerOpening = DsetBalanceSheet.Tables[3];
        decimal decProfitLedgerOpening = 0;
        foreach (DataRow dRow in dtblProfitLedgerOpening.Rows)
        {
            decProfitLedgerOpening += decimal.Parse(dRow["Balance"].ToString());
        }
        DataTable dtblProf = new DataTable();
        dtblProf = DsetBalanceSheet.Tables[2];
        decimal decProfitLedger = 0;
        if (dtblProf.Rows.Count > 0)
        {
            decProfitLedger = decimal.Parse(dtblProf.Compute("Sum(Balance)", string.Empty).ToString());
        }
        decimal decTotalProfitAndLoss = 0;
        if (dcProfitOpening >= 0)
        {
            decTotalProfitAndLoss = decProfitLedger;
        }
        else if (dcProfitOpening < 0)
        {
            decTotalProfitAndLoss = decProfitLedger;
        }
        index = 0;
        if (dcClosingStock >= 0)
        {
            //---------- Asset ----------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Closing Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + Math.Round(dcClosingStock, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            dcTotalAsset += dcClosingStock;
        }
        else
        {
            //--------- Liability ---------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Closing Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + Math.Round(dcClosingStock, 2) + @"</td>
            </tr>";
            dcTotalLiability += -dcClosingStock;
        }

        decimal decOpeningOfProfitAndLoss = decProfitLedgerOpening + dcProfitOpening;
        decimal decTotalProfitAndLossOverAll = decTotalProfitAndLoss + decOpeningOfProfitAndLoss + decCurrentProfitLoss;
        if (decTotalProfitAndLossOverAll <= 0)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            foreach (DataRow dRow in dtblProf.Rows)
            {
                if (dRow["Name"].ToString() == "Profit And Loss Account")
                {
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:red;text-align: left;'>" + dRow["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                    if (decCurrentProfitLoss < 0)
                    {
                        decCurrentProfitLoss = decCurrentProfitLoss * -1;
                    }
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + Math.Round(decTotalProfitAndLoss + decCurrentProfitLoss, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                }
            }
            //-------------- Asset ---------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;text-align: left;'>" + "Profit And Loss (Opening)" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + PublicVariables._Symbol + Math.Round(decTotalProfitAndLoss, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            //-------------- Asset ---------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;text-align: left;'>" + "Current Period" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + PublicVariables._Symbol + Math.Round(decCurrentProfitLoss, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            dcTotalAsset = dcTotalAsset + (decCurrentProfitLoss + decTotalProfitAndLoss);
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
        }
        else if (decTotalProfitAndLossOverAll > 0)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            foreach (DataRow dRow in dtblProf.Rows)
            {
                if (dRow["Name"].ToString() == "Profit And Loss Account")
                {
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + dRow[1].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + PublicVariables._Symbol + Math.Round(decTotalProfitAndLoss + decCurrentProfitLoss, 2) + @"</td>
            </tr>";
                }
            }
            //------------ Liability ------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "Profit And Loss (Opening)" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + PublicVariables._Symbol + Math.Round(decTotalProfitAndLoss, 2) + @"</td>
            </tr>";
            dcTotalLiability += decOpeningOfProfitAndLoss;
            //------------ Liability ------------//

            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "Current Period" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + PublicVariables._Symbol + Math.Round(decCurrentProfitLoss, 2) + @"</td>
            </tr>";
            dcTotalLiability = dcTotalLiability + (decCurrentProfitLoss + decTotalProfitAndLoss); //dcProfit;
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + "" + @"</td>
            </tr>";
        }
        decimal dcDiffAsset = 0;
        decimal dcDiffLiability = 0;
        decimal dcTotalValue = dcTotalAsset;
        if (dcTotalAsset != dcTotalLiability)
        {
            if (dcTotalAsset > dcTotalLiability)
            {
                //--------------- Liability exceeds so in asset side ----------------//

                values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Difference" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + PublicVariables._Symbol + Math.Round((dcTotalAsset - dcTotalLiability), 2) + @"</td>
            </tr>";
                dcDiffLiability = dcTotalAsset - dcTotalLiability;
            }
            else
            {
                //--------------- Asset exceeds so in liability side ----------------//
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Difference" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + PublicVariables._Symbol + Math.Round((dcTotalLiability - dcTotalAsset), 2) + @"</td>
            </tr>";
                dcDiffAsset = dcTotalLiability - dcTotalAsset;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
            </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "__________________________" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "__________________________" + @"</td>
            </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; text-align:right; color:Black;'>" + PublicVariables._Symbol + Math.Round((dcTotalAsset + dcDiffAsset), 2) + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; text-align:right; color:Black;'>" + PublicVariables._Symbol + Math.Round((dcTotalLiability + dcDiffLiability), 2) + @"</td>
            </tr>";
        decPrintOrNot = dcTotalAsset + dcDiffAsset;
        decPrintOrNot1 = dcTotalLiability + dcDiffLiability;
        if (inCurrenRowIndex >= 0 && dtbl.Rows.Count > 0 && inCurrenRowIndex < dtbl.Rows.Count)
        {
            //if (dtbl.Rows[inCurrenRowIndex].Cells[inCurentcolIndex].Visible)
            //{
            //    dtbl.CurrentCell = dtbl.Rows[inCurrenRowIndex].Cells[inCurentcolIndex];
            //}
            //if (dtbl.CurrentCell != null && dtbl.CurrentCell.Visible)
            //    dtbl.CurrentCell.Selected = true;
        }
        inCurrenRowIndex = 0;
        values += " </table>";
        myMarkup = values;
    }
    void OnChange(bool? value, string name)
    {
        //value = true;
    }
}
