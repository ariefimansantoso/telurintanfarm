@page "/app/dashboard"
@using System.Globalization
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Axes;
@using ChartJs.Blazor.Common.Axes.Ticks;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.Common.Handlers;
@using ChartJs.Blazor.Common.Time;
@using ChartJs.Blazor.Util;
@using ChartJs.Blazor.Interop;
@using ChartJs.Blazor;
@using ChartJs.Blazor.LineChart;
@using System.Drawing;
@inject IJournalVoucher _voucher
@inject IPaymentIn _paymentin
@inject IInventoryReport report
@inject IPurchaseInvoice _purchase
@inject IPurchaseReturn _purchasereturn
@inject IPaymentOut _paymentout
@inject ISalesInvoice _sales
@inject ISalesReturn _salesreturn
@inject IPaymentIn _paymentin
@inject AuthenticationStateProvider authStateProvider
@inject IUser _userManage
@inject IHRServices _hr
@inject IEmployee _employee
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject IAttendance _attendance
@inject IDailyRecordingService _recording
@inject ApplicationDbContext _db
@inject IAuditLogService _audit
@inject IStartingStockDate _stockDate;
@inject IKandangService _kandang

@using QuickAccounting.Components
@using QuickAccounting.Constants;
@using QuickAccounting.Data.Recording
@using QuickAccounting.Helpers;
@attribute [Authorize]
<PageTitle>Dashboard</PageTitle>
<style type="text/css">
@@media (min-width: 992px) {
    .cust-col-20 {
        flex: 0 0 auto;
        width: 20% !important;
    }

	.cust-col-14 {
        flex: 0 0 auto;
			width: 14.28571428571429% !important;
    }
}
</style>
<div class="content">
	<div class="row">
			<div class="col-12">
				@if (_pengumuman != null && _pengumuman.PengumumanContent != "<p><br></p>")
				{
					<div class="dash-widget" style="background-color:#ff0000;">					
						<div class="dash-widgetcontent">

							<h2 style="color:#fff !important;">PENGUMUMAN</h2>
							<p class="counters" style="color:#fff !important; font-weight:bold;">
								@((MarkupString)_pengumuman.PengumumanContent)
							</p>						
						</div>
					</div>
				}
		</div>
	</div>
	@if (modelEmployee.EmployeeId == 5 || modelEmployee.EmployeeId == 6)
	{
		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Laporan Recording<span></span> </h3>
					</div>
				</div>
			</div>
		</div>

		<div class="row">	
			<div class="col-sm-12 col-12">
				<div class="form-group">
					<label>Pilih Kandang</label>
					<div class="row">
						<div class="col-lg col-sm-12 col-12">
							<select class="form-control" @onchange="SelectedKandangChange">
								@foreach (var karyawan in CageList)
								{
									<option value="@karyawan.NoKandang">@karyawan.NoKandang</option>
								}
							</select>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TanggalCheckin.ToString("dd-MM-yyyy")</span></h5>
						<h6>Check-in</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash1">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash2.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@Math.Floor(UmurMinggu)</span></h5>
						<h6>Umur (Minggu)</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash2">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash3.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@GraphStrainName</span></h5>
						<h6>Strain</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@GraphHD.ToString("F2", new CultureInfo("id-ID"))</span></h5>
						<h6>HD</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@GraphFCR.ToString("F2", new CultureInfo("id-ID"))</span></h5>
						<h6>FCR</h6>
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-12 col-12">
				<div class="card flex-fill">
					<div class="card-header pb-0 d-flex justify-content-between align-items-center">
						<h5 class="card-title mb-0">Grafik Performa</h5>
					</div>
					<div class="card-body">
						@if (ChartDataLoaded)
						{
							<Chart Config="_config" @ref="_chart" @key="_chartKey"></Chart>
						}
					</div>
				</div>
			</div>
		</div>
	}

	@if (modelEmployee.EmployeeId != 5)
	{
		<div class="row">
			<div class="col-12">
				<div class="profile-container">
					<img src="@CurrentPhotoUrl" alt="Profile Image" class="profile-img">
					<div class="profile-name">
						@modelEmployee.EmployeeName
						<h2>@currentUserRole</h2>
					</div>
				</div>
			</div>
		</div>
	}
	@if (currentUserRole == "Sales" || currentUserRole == "Purchase" || currentUserRole == "Admin")
	{
		
		<!-- /Filter -->
		<div class="row">
			<div class="col-lg col-sm-6 col-12">
				<div class="form-group">
					Dari Tanggal
					<input type="date" @bind="@dtFromDate" class="form-control" />
				</div>
			</div>
			<div class="col-lg col-sm-6 col-12">
				<div class="form-group">
					Ke Tanggal
					<input type="date" @bind="@dtToDate" class="form-control" />
				</div>
			</div>				
			<div class="col-lg-1 col-sm-6 col-12">
				<div class="form-group" style="margin-top:20px;">
					<Loading IsLoading="isProcessing">
						<a class="btn btn-filters ms-auto" @onclick="()=>LoadDataSales()"><img src="assets/img/icons/search-whites.svg" alt="img" /></a>
					</Loading>
				</div>
			</div>
		</div>
		<!-- /Filter -->

		<!-- STOCK -->
		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Stock Telur Hari Ini</h3>
					</div>
				</div>
			</div>
		</div>

		<div class="row">

			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@StockTelurUtuh.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Utuh</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash1">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash2.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@StockTelurPutih.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Putih</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash2">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash3.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@StockTelurBentes.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Bentes</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@StockTelurParah.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@StockTelurParahSekali.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah Sekali</h6>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Retur Telur Hari Ini</h3>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			
			<div class="cust-col-14 col-sm-6 col-12">
				<div class="dash-widget dash1">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash2.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@ReturPutih.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Putih</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-14 col-sm-6 col-12">
				<div class="dash-widget dash2">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash3.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@ReturBentes.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Bentes</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-14 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@ReturRusak.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Rusak</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-14 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@ReturParah.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-14 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@ReturParahSekali.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah Sekali</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-14 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@Susut.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Susut</h6>
					</div>
				</div>
			</div>
			<div class="cust-col-14 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalReturan.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Total Retur dan Susut</h6>
					</div>
				</div>
			</div>
		</div>
		<!-- STOCK-->

		<!-- Sales RP -->
		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Laporan Penjualan Telur Hari Ini (Dalam Rupiah)<span></span> </h3>
					</div>				
				</div>
			</div>
		</div>

		<div class="row">

			<div class="col-lg-3 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@PublicVariables._Symbol @string.Format("{0:n0}", EcerTunai)</span></h5>
						<h6>Ecer Tunai</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-3 col-sm-6 col-12">
				<div class="dash-widget dash1">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash2.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@PublicVariables._Symbol @string.Format("{0:n0}", EcerBank)</span></h5>
						<h6>Ecer EDC/Bank</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-3 col-sm-6 col-12">
				<div class="dash-widget dash2">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash3.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@PublicVariables._Symbol @string.Format("{0:n0}", PartaiTunai)</span></h5>
						<h6>Partai Tunai</h6>
						@if (PartaiCashList != null && PartaiCashList.Count > 0)
						{
							<table style="margin-top:10px;">
								<tr>
									<td style="padding:3px 3px; font-weight:bold;"><b>Pelanggan</b></td>
									<td style="padding:3px 3px; font-weight:bold;"><b>Jumlah</b></td>
								</tr>
								@foreach(var partaiCashTrx in PartaiCashList)
								{
									<tr>
										<td style="padding:3px 3px;">@partaiCashTrx.LedgerName</td>
										<td style="padding:3px 3px; text-align:right;">@string.Format("{0:n0}", partaiCashTrx.Amount)</td>
									</tr>
								}
							</table>
						}
					</div>
				</div>
			</div>
			<div class="col-lg-3 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@PublicVariables._Symbol @string.Format("{0:n0}", PartaiBank)</span></h5>
						<h6>Partai Transfer</h6>
						@if (PartaiTransferList != null && PartaiTransferList.Count > 0)
						{
							<table style="margin-top:10px;">
								<tr>
									<td style="padding:3px 3px; font-weight:bold;"><b>Pelanggan</b></td>
									<td style="padding:3px 3px; font-weight:bold;"><b>Jumlah</b></td>
								</tr>
								@foreach (var partaiTransferTrx in PartaiTransferList)
								{
									<tr>
										<td style="padding:3px 3px;">@partaiTransferTrx.LedgerName</td>
										<td style="padding:3px 3px; text-align:right;">@string.Format("{0:n0}", partaiTransferTrx.Amount)</td>
									</tr>
								}
							</table>
						}
					</div>
				</div>
			</div>
		</div>
		<!-- Sales RP -->
		
		<!-- RP TOtal -->
		<div class="row">

			<div class="col-lg-3 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@PublicVariables._Symbol @string.Format("{0:n0}", (EcerTunai + PartaiTunai))</span></h5>
						<h6>Total Penjualan Tunai</h6>
					</div>
				</div>
			</div>
			
		</div>
		<!-- RP Total -->

		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Laporan Penjualan Non Telur Hari Ini<span></span> </h3>
					</div>				
				</div>
			</div>
		</div>

		<div class="row">

			<div class="cust-col-20 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@PublicVariables._Symbol @string.Format("{0:n0}", TotalNonTelurRupiah)</span></h5>
						<h6>Non Telur</h6>
					</div>
				</div>
			</div>

		</div>

		<!-- Sales Butir -->
		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Laporan Penjualan Telur Hari Ini<span></span> </h3>
					</div>				
				</div>
			</div>
		</div>

		<div class="row">

			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TelurUtuh.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Utuh</h6>
						<table style="margin-top:10px;">
							<tr>
								<td style="padding:3px 3px; font-weight:bold;"><b>Ecer</b></td>
								<td style="padding:3px 3px; font-weight:bold;"><b>Partai</b></td>
							</tr>
							<tr>
								<td style="padding:3px 3px; font-weight:bold;"><b>@TelurUtuhEcer.ToString("F2", new CultureInfo("id-ID")) KG</b></td>
								<td style="padding:3px 3px; font-weight:bold;"><b>@TelurUtuhPartai.ToString("F2", new CultureInfo("id-ID")) KG</b></td>
							</tr>							
						</table>
						@if (PartaiKGList != null && PartaiKGList.Count > 0)
						{
							<table style="margin-top:10px;">
								<tr>
									<td style="padding:3px 3px; font-weight:bold;"><b>Pelanggan</b></td>
									<td style="padding:3px 3px; font-weight:bold;"><b>Jumlah</b></td>
								</tr>
								@foreach (var partaiTransferTrx in PartaiKGList)
								{
									<tr>
										<td style="padding:3px 3px;">@partaiTransferTrx.LedgerName</td>
										<td style="padding:3px 3px; text-align:right;">@partaiTransferTrx.TotalKG.ToString("F2", new CultureInfo("id-ID"))</td>
									</tr>
								}
							</table>
						}
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash1">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash2.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TelurPutih.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Putih</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash2">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash3.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TelurBentes.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Bentes</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TelurParah.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TelurParahSekali.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah Sekali</h6>
					</div>
				</div>
			</div>
		</div>				
		<!-- Sales Butir -->

		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Laporan Penjualan Telur Total<span></span> </h3>
					</div>				
				</div>
			</div>
		</div>

		<div class="row">

			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalTelurUtuh.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Utuh</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash1">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash2.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalTelurPutih.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Putih</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash2">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash3.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalTelurBentes.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Bentes</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalTelurParah.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalTelurParahSekali.ToString("F2", new CultureInfo("id-ID")) KG</span></h5>
						<h6>Parah Sekali</h6>
					</div>
				</div>
			</div>
		</div>				

		<div class="row">
			<div class="container-fluid">
				<div class="col-md-12">
					<div class="brand-text float-left mt-4">
						<h3>Laporan Singkat Recording Seluruh Kandang<span></span> </h3>
					</div>
				</div>
			</div>
		</div>

		<div class="row">

			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash1.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalPopulasi</span></h5>
						<h6>Total Populasi</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash1">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash2.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@RataRataHD.ToString("F2", new CultureInfo("id-ID"))</span></h5>
						<h6>HD</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash2">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash3.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@RataRataFI.ToString("F2", new CultureInfo("id-ID"))</span></h5>
						<h6>FI</h6>
					</div>
				</div>
			</div>
			@* <div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalPakan.ToString("F2", new CultureInfo("id-ID"))</span></h5>
						<h6>Pakan Rumus</h6>
					</div>
				</div>
			</div> *@
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@TotalPakanSum.ToString("F2", new CultureInfo("id-ID"))</span></h5>
						<h6>Pakan</h6>
					</div>
				</div>
			</div>
			<div class="col-lg-2 col-sm-6 col-12">
				<div class="dash-widget dash3">
					<div class="dash-widgetimg">
						<span><img src="assets/img/icons/dash4.svg" alt="img"></span>
					</div>
					<div class="dash-widgetcontent">
						<h5><span class="counters">@RataRataFCR.ToString("F2", new CultureInfo("id-ID"))</span></h5>
						<h6>FCR</h6>
					</div>
				</div>
			</div>			
		</div>

		<div class="row">
			<div class="col-lg-12 col-sm-12 col-12 d-flex">
				<div class="card flex-fill">
					<div class="card-header pb-0 d-flex justify-content-between align-items-center">
						<h4 class="card-title mb-0">Saldo Kas dan Bank</h4>
					</div>
					<div class="card-body">
						<div class="table-responsive table-scrollable">
							<table class="table">
								<thead>
									<tr>
										<th>Kas / Bank</th>
										<th>Jumlah</th>
									</tr>
								</thead>
								<tbody>
									@if (listCashBank == null)
									{

									}
									else
									{
										@foreach (var item in listCashBank)
										{
											<tr>

												<td class="productimgname">
													@item.LedgerName
												</td>
												<td>@PublicVariables._Symbol @string.Format("{0:n0}", Convert.ToDecimal(item.Balance))</td>
											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>		
	}
	
	
	@if(currentUserRole == "Admin")
	{
		<div class="row">
			<div class="col-lg-12 col-sm-12 col-12 d-flex">
				<div class="card flex-fill">
					<div class="card-header pb-0 d-flex justify-content-between align-items-center">
						<h5 class="card-title mb-0">Daftar Pengajuan Ijin</h5>
					</div>
					<div class="card-body">
						@if (unapprovedPerijinan != null && unapprovedPerijinan.Count > 0)
						{
							<table cellpadding="0" cellspacing="0" style="width: 100%;line-height: inherit;text-align: left;">
								<tbody>
									<tr class="heading" style="background: #F3F2F7;">
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Karyawan
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Tanggal
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Jenis
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										</td>
									</tr>
									@foreach (dynamic p in unapprovedPerijinan)
									{
										bool? isApproved = p.IsApproved != null ? (bool?)p.IsApproved : null;

										<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
											<td style="padding: 10px 2px;vertical-align: middle;">
												@p.EmployeeName
											</td>
											<td style="padding: 10px 2px;vertical-align: middle; ">
												@p.ForDate.ToString("dd/MM/yyyy")
											</td>
											<td style="padding: 10px 2px;vertical-align: middle; ">
												@p.SubmittedFor
											</td>
											@if (!isApproved.HasValue)
											{
												<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
													<a @onclick="( () => { OpenApproveDialog(p.ID); } )"><img src="assets/img/icons/check.png" alt="img" style="width:50px;"></a>
												</td>
												<td style="padding: 10px 2px;vertical-align: middle; text-align:center; ">
													<a @onclick="( () => { OpenRejectDialog(p.ID); } )"><img src="assets/img/icons/remove.png" alt="img" style="width:50px;"></a>
												</td>
											}
											else
											{
												if (isApproved.Value)
												{
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
														<span class="badge badge-success">Disetujui</span>
													</td>
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center; ">
													</td>
												}
												else
												{
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
														<span class="badge badge-danger">Ditolak</span>
													</td>
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center; ">
													</td>
												}
											}
										</tr>
										if (isApproved == null && !string.IsNullOrEmpty(p.SubmittedDesc))
										{
											<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
												<td style="padding: 10px;vertical-align: top; " colspan="5">
													@p.SubmittedDesc
												</td>
											</tr>
										}

										if (isApproved.HasValue && isApproved.Value == false)
										{
											<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
												<td style="padding: 10px;vertical-align: top; " colspan="5">
													<b>Alasan ditolak:</b><br />
													@p.ApprovalDescription
												</td>
											</tr>
										}
									}


								</tbody>
							</table>
						}
					</div>
				</div>
			</div>
		</div>
	}
	else if (currentUserRole == "Supervisor") {
		<div class="row">
			<div class="col-lg-12 col-sm-12 col-12 d-flex">
				<div class="card flex-fill">
					<div class="card-header pb-0 d-flex justify-content-between align-items-center">
						<h5 class="card-title mb-0">Daftar Pengajuan Ijin Anda</h5>
					</div>
					<div class="card-body">
						@if (unapprovedPerijinanCurrentUser != null && unapprovedPerijinanCurrentUser.Count > 0)
						{
							<table cellpadding="0" cellspacing="0" style="width: 100%;line-height: inherit;text-align: left;">
								<tbody>
									<tr class="heading" style="background: #F3F2F7;">
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Karyawan
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Tanggal
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Jenis
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										</td>										
									</tr>
									@foreach (dynamic p in unapprovedPerijinanCurrentUser)
									{
										bool? isApproved = p.IsApproved != null ? (bool?)p.IsApproved : null;

										<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
											<td style="padding: 10px 2px;vertical-align: middle;">
												@p.EmployeeName
											</td>
											<td style="padding: 10px 2px;vertical-align: middle; ">
												@p.ForDate.ToString("dd/MM/yyyy")
											</td>
											<td style="padding: 10px 2px;vertical-align: middle; ">
												@p.SubmittedFor
											</td>
											@if (!isApproved.HasValue)
											{
												<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
												<span class="badge badge-warning">Belum Disetujui</span>
												</td>
												
											}
											else
											{
												if (isApproved.Value)
												{
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
														<span class="badge badge-success">Disetujui</span>
													</td>
													
												}
												else
												{
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
														<span class="badge badge-danger">Ditolak</span>
													</td>
													
												}
											}
										</tr>
										if (isApproved == null && !string.IsNullOrEmpty(p.SubmittedDesc))
										{
											<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
												<td style="padding: 10px;vertical-align: top; " colspan="5">
													@p.SubmittedDesc
												</td>
											</tr>
										}

										if (isApproved.HasValue && isApproved.Value == false)
										{
											<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
												<td style="padding: 10px;vertical-align: top; " colspan="5">
													<b>Alasan ditolak:</b><br />
													@p.ApprovalDescription
												</td>
											</tr>
										}
									}
								</tbody>
							</table>
						}
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-lg-12 col-sm-12 col-12 d-flex">
				<div class="card flex-fill">
					<div class="card-header pb-0 d-flex justify-content-between align-items-center">
						<h5 class="card-title mb-0">Daftar Pengajuan Ijin Tim Anda</h5>
					</div>
					<div class="card-body">
					@if (unapprovedPerijinanBySupervisor != null && unapprovedPerijinanBySupervisor.Count > 0)
						{
							<table cellpadding="0" cellspacing="0" style="width: 100%;line-height: inherit;text-align: left;">
								<tbody>
									<tr class="heading" style="background: #F3F2F7;">
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Karyawan
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Tanggal
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
											Jenis
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										</td>
										<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										</td>
									</tr>
								@foreach (dynamic p in unapprovedPerijinanBySupervisor)
									{
										bool? isApproved = p.IsApproved != null ? (bool?)p.IsApproved : null;

										<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
											<td style="padding: 10px 2px;vertical-align: middle;">
												@p.EmployeeName
											</td>
											<td style="padding: 10px 2px;vertical-align: middle; ">
												@p.ForDate.ToString("dd/MM/yyyy")
											</td>
											<td style="padding: 10px 2px;vertical-align: middle; ">
												@p.SubmittedFor
											</td>
											@if (!isApproved.HasValue)
											{
												<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
													<a @onclick="( () => { OpenApproveDialog(p.ID); } )"><img src="assets/img/icons/check.png" alt="img" style="width:50px;"></a>
												</td>
												<td style="padding: 10px 2px;vertical-align: middle; text-align:center; ">
													<a @onclick="( () => { OpenRejectDialog(p.ID); } )"><img src="assets/img/icons/remove.png" alt="img" style="width:50px;"></a>
												</td>
											}
											else
											{
												if (isApproved.Value)
												{
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
														<span class="badge badge-success">Disetujui</span>
													</td>
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center; ">
													</td>
												}
												else
												{
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
														<span class="badge badge-danger">Ditolak</span>
													</td>
													<td style="padding: 10px 2px;vertical-align: middle; text-align:center; ">
													</td>
												}
											}
										</tr>
										if (isApproved == null && !string.IsNullOrEmpty(p.SubmittedDesc))
										{
											<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
												<td style="padding: 10px;vertical-align: top; " colspan="5">
													@p.SubmittedDesc
												</td>
											</tr>
										}

										if (isApproved.HasValue && isApproved.Value == false)
										{
											<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
												<td style="padding: 10px;vertical-align: top; " colspan="5">
													<b>Alasan ditolak:</b><br />
													@p.ApprovalDescription
												</td>
											</tr>
										}
									}
								</tbody>
							</table>
						}
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-lg-12 col-sm-12 col-12 d-flex">
				<div class="card flex-fill">
					<div class="card-header pb-0 d-flex justify-content-between align-items-center">
						<h5 class="card-title mb-0">Menu Anda</h5>
					</div>
					<div class="card-body">
						<a href="/app/recordattendance" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Form Absensi Harian</a>
						<a href="/app/recordvacation" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Form Ijin / Libur</a>
						<a href="/app/attendancelist" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Laporan Abensi Harian dan Gaji</a>
						<a href="/app/salaryslip" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Slip Gaji</a>
						<a href="/app/checklistegg" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Ambil Telur</a>
						<a href="/app/eggverification" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Timbang Telur</a>

						<a class="btn btn-primary" style="width:100%; margin-bottom: 20px;" href="/app/henpopulation">Populasi</a>
						<a class="btn btn-primary" style="width:100%; margin-bottom: 20px;" href="/app/foodintake">Food Intake/Konsumsi Pakan</a>
						<a class="btn btn-primary" style="width:100%; margin-bottom: 20px;" href="/app/eggproduction">Produksi Telur</a>
						<a class="btn btn-primary" style="width:100%; margin-bottom: 20px;" href="javascript:void(0);">Informasi Hen Day</a>
						<a class="btn btn-primary" style="width:100%; margin-bottom: 20px;" href="/app/recordingreportscage">Laporan Recording</a>
					</div>
				</div>
			</div>
		</div>
	}
	else
	{
	<div class="row">
		<div class="col-lg-12 col-sm-12 col-12 d-flex">
			<div class="card flex-fill">
				<div class="card-header pb-0 d-flex justify-content-between align-items-center">
					<h5 class="card-title mb-0">Daftar Pengajuan Ijin Anda</h5>
				</div>
				<div class="card-body">
					@if (unapprovedPerijinanCurrentUser != null && unapprovedPerijinanCurrentUser.Count > 0)
					{
						<table cellpadding="0" cellspacing="0" style="width: 100%;line-height: inherit;text-align: left;">
							<tbody>
								<tr class="heading" style="background: #F3F2F7;">
									<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										Karyawan
									</td>
									<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										Tanggal
									</td>
									<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
										Jenis
									</td>
									<td style="padding: 5px;vertical-align: middle;font-weight: 600;color: #5E5873;font-size: 14px;padding: 10px; ">
									</td>
								</tr>
								@foreach (dynamic p in unapprovedPerijinanCurrentUser)
								{
									bool? isApproved = p.IsApproved != null ? (bool?)p.IsApproved : null;

									<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
										<td style="padding: 10px 2px;vertical-align: middle;">
											@p.EmployeeName
										</td>
										<td style="padding: 10px 2px;vertical-align: middle; ">
											@p.ForDate.ToString("dd/MM/yyyy")
										</td>
										<td style="padding: 10px 2px;vertical-align: middle; ">
											@p.SubmittedFor
										</td>
										@if (!isApproved.HasValue)
										{
											<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
												<span class="badge badge-warning">Belum Disetujui</span>
											</td>

										}
										else
										{
											if (isApproved.Value)
											{
												<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
													<span class="badge badge-success">Disetujui</span>
												</td>

											}
											else
											{
												<td style="padding: 10px 2px;vertical-align: middle; text-align:center;">
													<span class="badge badge-danger">Ditolak</span>
												</td>

											}
										}
									</tr>
									if (isApproved == null && !string.IsNullOrEmpty(p.SubmittedDesc))
									{
										<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
											<td style="padding: 10px;vertical-align: top; " colspan="5">
												@p.SubmittedDesc
											</td>
										</tr>
									}

									if (isApproved.HasValue && isApproved.Value == false)
									{
										<tr class="details" style="border-bottom:1px solid #E9ECEF ;">
											<td style="padding: 10px;vertical-align: top; " colspan="5">
												<b>Alasan ditolak:</b><br />
												@p.ApprovalDescription
											</td>
										</tr>
									}
								}
							</tbody>
						</table>
					}
				</div>
			</div>
		</div>
	</div>
		<div class="row">
			<div class="col-lg-12 col-sm-12 col-12 d-flex">
				<div class="card flex-fill">
					<div class="card-header pb-0 d-flex justify-content-between align-items-center">
						<h5 class="card-title mb-0">Menu Anda</h5>
					</div>
					<div class="card-body">
						<a href="/app/recordattendance" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Form Absensi Harian</a>
						<a href="/app/recordvacation" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Form Ijin / Libur</a>
						<a href="/app/attendancelist" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Laporan Abensi Harian dan Gaji</a>
						<a href="/app/salaryslip" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Slip Gaji</a>
						<a href="/app/penalties" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Daftar Sanksi dan Pengurangan Gaji</a>

						@if (currentUserRole == "Packaging")
						{
							<a href="/app/checklistegg" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Ambil Telur</a>
							<a href="/app/eggverification" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Timbang Telur</a>
						}

						@if (currentUserRole == "Kandang")
						{
							<a href="/app/henpopulation" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Input Populasi</a>
							<a href="/app/foodintake" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Input Konsumsi Pakan</a>
							<a href="/app/eggproduction" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Input Produksi Telur</a>
							<a href="/app/recordingreportscage" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Laporan Recording</a>
						}

						@if (JobDescAvailable)
						{
							<a href="/app/jobdesc" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">Deskripsi Pekerjaan</a>
						}

						@if (SOPAvailable)
						{
							<a href="/app/sop" class="btn btn-primary" style="width:100%; margin-bottom: 20px;">SOP</a>
						}
					</div>
			</div>
		</div>
	</div>
	}
</div>
@if (ApproveDialogOpen)
{
	<ModalDialog Title="Setujui Pengajuan Ijin/Libur Karyawan"
				 Text="Apakah anda yakin anda ingin menyetujui pengajuan ini?"
				 OnClose="@OnApproveDialogClose"
				 DialogType="ModalDialog.ModalDialogType.Ok">
	</ModalDialog>
}
@if (RejectDialogOpen)
{
	<ModalDialog Title="Tolak Pengajuan Ijin/Libur Karyawan"
				 Text="Apakah anda yakin anda ingin menolak pengajuan ini? Mohon berikan alasannya pada kolom dibawah ini."
				 OnClose="@OnRejectDialogClose"
				 RejectReason="@RejectionReason"
				 DialogType="ModalDialog.ModalDialogType.Reject">
	</ModalDialog>
}
@code{
	/* Kode baru */
	private bool AdaPerijinan;
	string currentUserRole = "User";
	List<dynamic> unapprovedPerijinan;
	public string CurrentUserName { get; set; }
	public int SelectedPerijinanID { get; set; }
	public bool ApproveDialogOpen { get; set; }
	public bool RejectDialogOpen { get; set; }
	UserMaster modelUser = new UserMaster();
	Employee modelEmployee = new Employee();
	public string RejectionReason { get; set; }
	List<dynamic> unapprovedPerijinanBySupervisor;
	List<dynamic> unapprovedPerijinanCurrentUser;
	bool JobDescAvailable;
	bool SOPAvailable;
	List<dynamic> PartaiCashList;
	List<dynamic> PartaiTransferList;
	List<dynamic> PartaiKGList;
	private List<QuickAccounting.Data.Recording.DailyRecording> StrainData;
	List<string> DaftarKandang;
	string SelectedKandang;
	private string[] XAxisLabels; // Stores RecordDate as strings for X-axis labels
	private List<decimal> yAxisValues = new(); // Stores ActualHenDay values for Y-axis data
	public ChartOptions Options = new ChartOptions();
	public List<ChartSeries> Series = new List<ChartSeries>();	
	private int SeriesIndex = -1;
	bool ChartDataLoaded = false;
	/* Kode baru */

	QuickAccounting.Data.Pengumuman _pengumuman;
	int TotalPopulasi = 0;
	decimal RataRataHD, RataRataFI, RataRataFCR = 0;

	private bool dense = true;
	private bool hover = true;
	bool value = true;
	decimal TotalSale;
	decimal TotalPurchase;
	decimal CashAmount;
	decimal PaymentCashAmount;

	decimal EcerTunai;
	decimal EcerBank;
	decimal PartaiTunai;
	decimal PartaiBank;

	decimal TelurUtuh;
	decimal TelurUtuhEcer;
	decimal TelurUtuhPartai;
	decimal TelurPutih;
	decimal TelurBentes;
	decimal TelurParah;
	decimal TelurParahSekali;

	decimal RpTelurUtuh;
	decimal RpTelurPutih;
	decimal RpTelurBentes;
	decimal RpTelurParah;
	decimal RpTelurParahSekali;

	decimal TotalTelurUtuh;
	decimal TotalTelurPutih;
	decimal TotalTelurBentes;
	decimal TotalTelurParah;
	decimal TotalTelurParahSekali;

	decimal StockTelurUtuh;
	decimal StockTelurBentes;
	decimal StockTelurPutih;
	decimal StockTelurParah;
	decimal StockTelurParahSekali;

	decimal ReturPutih = 0;
	decimal ReturBentes = 0;
	decimal ReturRusak = 0;
	decimal ReturParah = 0;
	decimal ReturParahSekali = 0;
	decimal Susut = 0;
	decimal TotalReturan = 0;

	decimal TotalPakan = 0;
	decimal TotalPakanSum = 0;

	decimal TotalNonTelurRupiah = 0;

	DateTime dtFromDate;
	DateTime dtToDate;

	bool isProcessing;

	IList<JournalMasterView> listVoucher;
	IList<PaymentReceiveView> listPaymentIn;
	IList<PaymentReceiveView> listPaymentOut;
	IList<PurchaseMasterView> listPurchase;
	IList<SalesMasterView> listSales;
	IList<PurchaseReturnMasterView> listPurchaseReturn;
	IList<SalesReturnMasterView> listSalesReturn;
	IList<FinancialReport> listCashBank;
	IList<FinancialReport> listIncomeExpenses;
	IList<ProductView> listProduct;
	IList<SalesMaster> listLedgerPostingTunai;
	IList<SalesMaster> listLedgerPostingBank;
	bool showDataLabels = false;
	string strDay1 = "DeActive";
	string strDay7 = "active";
	string strDay30 = "DeActive";
	string strDay365 = "DeActive";
	TabPosition tabPosition = TabPosition.Top;

	int ledgerIdCash = 1;
	int ledgerIdBank = 10;

	List<DailyAttendanceMaster> todayAttendances;

	public string CurrentPhotoUrl { get; set; }

	private List<Kandang> CageList = new List<Kandang>();
	private LineConfig _config;
	private Chart _chart;
	private string _chartKey = Guid.NewGuid().ToString();
	private DateTime TanggalCheckin;
	private string GraphStrainName;
	private decimal UmurMinggu;
	private decimal GraphHD;
	private decimal GraphFCR;

	private async Task InitChart()
    {
		var cageNumber = Helper.ConvertCageNumber(SelectedKandang);
		var resultForTable = new List<QuickAccounting.Data.Recording.DailyRecording>();

		var dataForTable = _db.DailyRecording
			.Where(r => r.CageNumber == cageNumber)
			.OrderByDescending(r => r.RecordDate)
			.ToList(); // Load into memory to simulate window functions

		int rowNumberForTable = 1;
		int runningSumForTable = 0;

		foreach (var row in dataForTable)
		{
			if (row.PopulationStart <= 0)
				runningSumForTable += 1;

			if (runningSumForTable == 0)
				resultForTable.Add(row);

			rowNumberForTable++;
		}

		if(resultForTable.Count > 5) 
		{
			TanggalCheckin = resultForTable[resultForTable.Count - 1].RecordDate;
			GraphStrainName = resultForTable.Where(x => !string.IsNullOrEmpty(x.StrainName)).Select(x => x.StrainName).First();
			UmurMinggu = resultForTable[2].HenAgeWeeks;
			GraphHD = resultForTable[2].ActualHenDay;
			GraphFCR = resultForTable[2].FeedConversionRatio;
		}

		var weeklyAverages = resultForTable
            .GroupBy(r => (int)Math.Floor(r.HenAgeWeeks)) // Group by full week
            .Select(g => new WeeklyProductionSummary
                {
                    WeekNumber = g.Key,
                    AverageHenDayActual = g.Average(r => r.ActualHenDay),
                    AverageFIActual = g.Average(r => r.FoodIntakePerHen),
                    AverageEggMass = g.Average(r => r.ActualEggMassKg),
                    AverageGrBt = g.Average(r => r.ActualEggWeightG)
                })
            .OrderByDescending(x => x.WeekNumber)
            .ToList();

        var fullData = Enumerable.Range(16, 85) // 100 - 16 + 1 = 85 weeks
            .Select(week =>
            {
                var existing = weeklyAverages.FirstOrDefault(d => d.WeekNumber == week);
                return new WeeklyProductionSummary
                    {
                        WeekNumber = week,
                        AverageHenDayActual = existing?.AverageHenDayActual ?? 0,
                        AverageFIActual = existing?.AverageFIActual ?? 0,
                        AverageEggMass = existing?.AverageEggMass ?? 0,
                        AverageGrBt = existing?.AverageGrBt ?? 0
                    };
            })
            .OrderBy(d => d.WeekNumber)
            .ToList();

        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,                    
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Laporan Recording"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                        {
                            new CategoryAxis
                            {
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Month"
                                }
                            }
                        },
                        YAxes = new List<CartesianAxis>
                        {
                            new LinearCartesianAxis
                            {
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Value"
                                }
                            }
                        }
                    }
                }
            };
        _chartKey = Guid.NewGuid().ToString();

        var standardData = _db.StandardData.ToList();
        var weeks = standardData.Select(x => x.Weeks).ToList();

        foreach (var week in weeks)
        {
            _config.Data.Labels.Add(week.ToString());
        }

        var fiStandard = standardData.Select(x => x.FI_Standard).ToList();
        var hdStd = standardData.Select(x => x.HD_Standard).ToList();
        var emassStandard = standardData.Select(x => x.EMass_Standard).ToList();
        var grbtStd = standardData.Select(x => x.GrBt_Standard).ToList();

        LineDataset<decimal> dataset1 = new LineDataset<decimal>(fiStandard)
            {
                Label = "FI",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightBlue),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightBlue),
                Fill = FillingMode.Disabled               
            };
        dataset1.PointRadius = 0;

        LineDataset<decimal> HD = new LineDataset<decimal>(hdStd)
            {
                Label = "HD",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightPink),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightPink),
                Fill = FillingMode.Disabled
            };
        HD.PointRadius = 0;

        LineDataset<decimal> Emass = new LineDataset<decimal>(emassStandard)
            {
                Label = "E Mass",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Yellow),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Yellow),
                Fill = FillingMode.Disabled
            };
        Emass.PointRadius = 0;

        LineDataset<decimal> grbt = new LineDataset<decimal>(grbtStd)
            {
                Label = "GrBt",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightGreen),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.LightGreen),
                Fill = FillingMode.Disabled
            };
        grbt.PointRadius = 0;

        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(HD);
        _config.Data.Datasets.Add(Emass);
        _config.Data.Datasets.Add(grbt);

        // WeekNumber = week,
        // AverageHenDayActual = existing?.AverageHenDayActual ?? 0,
        // AverageFIActual = existing?.AverageFIActual ?? 0,
        // AverageEggMass = existing?.AverageEggMass ?? 0,
        // AverageGrBt

		var hdReal = fullData.Select(x => (decimal)x.AverageHenDayActual).ToList();

        // load chart recording
        LineDataset<decimal> HDReal = new LineDataset<decimal>(hdReal)
            {
                Label = "HD Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
                Fill = FillingMode.Disabled               
            };
        HDReal.PointRadius = 0;

        var fiReal = fullData.Select(x => (decimal)x.AverageFIActual).ToList();

        // load chart recording
        LineDataset<decimal> FIReal = new LineDataset<decimal>(fiReal)
            {
                Label = "FI Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
                Fill = FillingMode.Disabled               
            };
        FIReal.PointRadius = 0;

        var emReal = fullData.Select(x => (decimal)x.AverageEggMass).ToList();

        // load chart recording
        LineDataset<decimal> EMReal = new LineDataset<decimal>(emReal)
            {
                Label = "EM Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Orange),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Orange),
                Fill = FillingMode.Disabled               
            };
        EMReal.PointRadius = 0;

		var grBt = fullData.Select(x => (decimal)x.AverageGrBt).ToList();

        // load chart recording
        LineDataset<decimal> GrBtReal = new LineDataset<decimal>(grBt)
            {
                Label = "GrBt Real",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Green),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Green),
                Fill = FillingMode.Disabled
            };
        GrBtReal.PointRadius = 0;

        _config.Data.Datasets.Add(HDReal);
        _config.Data.Datasets.Add(FIReal);
        _config.Data.Datasets.Add(EMReal);
        _config.Data.Datasets.Add(GrBtReal);


		

        ChartDataLoaded = true;
    }

	private void OpenApproveDialog(int id)
	{
		SelectedPerijinanID = id;
		ApproveDialogOpen = true;
		StateHasChanged();
	}

	private void CalculateTotalNonTelurRupiah()
	{
		TotalNonTelurRupiah = (from sd in _db.SalesDetails
										join rm in _db.SalesMaster on sd.SalesMasterId equals rm.SalesMasterId
										join rd in _db.ReceiptDetails on rm.SalesMasterId equals rd.SalesMasterId
										join al in _db.AccountLedger on rm.LedgerId equals al.LedgerId
										join p in _db.Product on sd.ProductId equals p.ProductId
										where rm.LedgerId >= 19 &&
										rm.Date >= new DateTime(dtFromDate.Year, dtFromDate.Month, dtFromDate.Day, 0, 0, 0) &&
										rm.Date <= new DateTime(dtToDate.Year, dtToDate.Month, dtToDate.Day, 23, 59, 59) &&
										(rd.LedgerId == 1 || rd.LedgerId == 10) &&
										!p.ProductCode.StartsWith("TA-")
										select sd.NetAmount).Sum();
	}

	private void LoadReportRecordingSummary()
	{		
		var todayDataForFCR = _db.DailyRecording.Where(x => x.RecordDate.Date == DateTime.Now.AddDays(-1).Date && x.ActualHenDay >= 20).ToList();
		var todayData = _db.DailyRecording.Where(x => x.RecordDate.Date == DateTime.Now.AddDays(-1).Date).ToList();
		int totalRecord = todayData.Count;
		TotalPopulasi = todayData.Sum(x => x.PopulationEnd);
		RataRataHD = todayData.Average(x => x.ActualHenDay);
		RataRataFI = todayData.Average(x => x.FoodIntakePerHen);
		RataRataFCR = todayDataForFCR.Count > 0 ? todayDataForFCR.Average(x => x.FeedConversionRatio) : 0;
		TotalPakan = RataRataFI * TotalPopulasi;
		TotalPakanSum = todayData.Sum(x => x.ActualFoodNeededKG);
	}

	private void OpenRejectDialog(int id)
	{
		SelectedPerijinanID = id;
		RejectDialogOpen = true;
		StateHasChanged();
	}

	private async Task OnApproveDialogClose(bool accepted)
	{
		if (accepted)
		{
			ApprovePerijinan();
		}

		ApproveDialogOpen = false;
		StateHasChanged();

		navigation.NavigateTo("/app/dashboard", true);
	}

	private async Task OnRejectDialogClose(bool accepted)
	{
		if (accepted)
		{
			string reason = await JSRuntime.InvokeAsync<string>("checkReason");
			if (string.IsNullOrEmpty(reason))
			{
				await JSRuntime.InvokeVoidAsync("showAlert", "Alasan penolakan mohon diisi.");
			}
			else
			{
				RejectionReason = reason;
				RejectPerijinan();
			}
		}

		RejectDialogOpen = false;
		StateHasChanged();

		navigation.NavigateTo("/app/dashboard", true);
	}

	private async Task RejectPerijinan()
	{
		var perijinan = _hr.PerijinanQuery().FirstOrDefault(x => x.ID == SelectedPerijinanID);
		if(perijinan != null)
		{
			perijinan.IsApproved = false;
			perijinan.ApprovalDescription = RejectionReason;
			perijinan.ActionDate = DateTime.Now;
			perijinan.ActionByEmployeeID = modelEmployee.EmployeeId;
			await _hr.UpdatePerijinan(perijinan);
		}
	}

	private async Task ApprovePerijinan()
	{
		var perijinan = _hr.PerijinanQuery().FirstOrDefault(x => x.ID == SelectedPerijinanID);
		if(perijinan != null)
		{
			perijinan.IsApproved = true;
			perijinan.ApprovalDescription = "Disetujui oleh: " + modelEmployee.EmployeeName + "\r\nPada tanggal: " + DateTime.Now.ToString("dd/MM/yyyy hh:mm");
			perijinan.ActionDate = DateTime.Now;
			perijinan.ActionByEmployeeID = modelEmployee.EmployeeId;
			await _hr.UpdatePerijinan(perijinan);
		}
	}

	// private async Task GetStrainGraphData()
	// {
	// 	var now = DateTime.Now;
	// 	var currentMonth = now.Month;
	// 	DateTime from = new DateTime(2024, 1, 1, 0, 0, 0);
	// 	DateTime to = new DateTime(2024, 7, 31, 23,59,59);
	// 	StrainData = await _recording.GetDailyRecordingStrain(SelectedStrain, from, to);

	// 	Series = new List<ChartSeries>();
	// 	ChartSeries series = new ChartSeries();
	// 	series.Name = "+/- HD";
	// 	series.Data = StrainData.Select(record => Convert.ToDouble(record.ActualHenDay)).ToArray();
	// 	Series.Add(series);

	// 	series = new ChartSeries();
	// 	series.Name = "EW(gr)";
	// 	series.Data = StrainData.Select(record => Convert.ToDouble(record.ActualEggWeightG)).ToArray();
	// 	Series.Add(series);

	// 	// Map strainData to chart data
	// 	XAxisLabels = StrainData.Select(record => record.HenAgeWeeks.ToString()).ToArray();
	// 	yAxisValues = StrainData.Select(record => record.ActualHenDay).ToList();

	// 	Options.YAxisTicks = 20;
	// }

	private async Task SelectedKandangChange(ChangeEventArgs e)
	{        
		SelectedKandang = e.Value.ToString();
		var cageNumber = Helper.ConvertCageNumber(SelectedKandang);

		await InitChart();
	}

	private void LoadDataStock()
	{
		var stockTelurUtuh = _db.StockTelurUtuh.FirstOrDefault();
		if(stockTelurUtuh != null)
		{
			StockTelurUtuh = stockTelurUtuh.StockKG;
		}

		var startingStockDate = stockTelurUtuh.StockDate;

		// bentes
		var stockBentes = _db.StockPosting.Where(x => x.ProductId == 16 && x.Date.Date >= startingStockDate)
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty) - g.Sum(x => x.OutwardQty))
												.FirstOrDefault();

		// putih
		var stockPutih = _db.StockPosting.Where(x => x.ProductId == 7 && x.Date.Date >= startingStockDate)
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty) - g.Sum(x => x.OutwardQty))
												.FirstOrDefault();

		// pecah
		var stockPecah = _db.StockPosting.Where(x => x.ProductId == 17 && x.Date.Date >= startingStockDate)
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty) - g.Sum(x => x.OutwardQty))
												.FirstOrDefault();

		// pecah sekali
		var stockPecahSekali = _db.StockPosting.Where(x => x.ProductId == 19 && x.Date.Date >= startingStockDate)
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty) - g.Sum(x => x.OutwardQty))
												.FirstOrDefault();

		StockTelurBentes = stockBentes;
		StockTelurPutih = stockPutih;
		StockTelurParah = stockPecah;
		StockTelurParahSekali = stockPecahSekali;

		ReturBentes = _db.StockPosting.Where(x => x.ProductId == 16 && x.Date.Date >= DateTime.Now.Date && x.StockCalculate == "Retur")
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty))
												.FirstOrDefault();

		ReturPutih = _db.StockPosting.Where(x => x.ProductId == 7 && x.Date.Date >= DateTime.Now.Date && x.StockCalculate == "Retur")
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty))
												.FirstOrDefault();

		// pecah
		ReturParah = _db.StockPosting.Where(x => x.ProductId == 17 && x.Date.Date >= DateTime.Now.Date && x.StockCalculate == "Retur")
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty))
												.FirstOrDefault();

		// pecah sekali
		ReturParahSekali = _db.StockPosting.Where(x => x.ProductId == 19 && x.Date.Date >= DateTime.Now.Date && x.StockCalculate == "Retur")
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty))
												.FirstOrDefault();

		ReturRusak = _db.StockPosting.Where(x => x.ProductId == 106 && x.Date.Date >= DateTime.Now.Date && x.StockCalculate == "Retur")
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty))
												.FirstOrDefault();	

		Susut = _db.StockPosting.Where(x => x.ProductId == 124 && x.Date.Date >= DateTime.Now.Date && x.StockCalculate == "Retur")
												.GroupBy(x => 1)
												.Select(g => g.Sum(x => x.InwardQty))
												.FirstOrDefault();

		TotalReturan = ReturBentes + ReturPutih + ReturParah + ReturParahSekali + ReturRusak + Susut;
	}

	protected async override void OnInitialized()
	{
		AdaPerijinan = true;
		unapprovedPerijinan = new List<dynamic>();
		var authstate = await authStateProvider.GetAuthenticationStateAsync();
		var user = authstate.User;
		var userName = user.Identity.Name;		
		currentUserRole = await _userManage.GetUserRole(userName);
		modelUser = await _userManage.UserProfile(userName);
		modelEmployee = await _employee.GetbyUserId(modelUser.UserId);

		JobDescAvailable = !string.IsNullOrEmpty(modelEmployee.JobDesc);
		SOPAvailable = !string.IsNullOrEmpty(modelEmployee.SOP);
		
        CageList = await _kandang.GetAll();
		SelectedKandang = CageList.FirstOrDefault().NoKandang;

		//await GetStrainGraphData();
		await InitChart();

		listProduct = await report.GetTopProduct();
		DateTime today = DateTime.Now;
		dtFromDate = new DateTime(today.Year, today.Month, today.Day,0,0,0);
		dtToDate = new DateTime(today.Year, today.Month, today.Day);
		TimeSpan toDtTime = TimeSpan.Parse("23:59:59");
		dtToDate = dtToDate.Add(toDtTime);

		listLedgerPostingTunai = await _paymentin.GetLedgerPostingsRetail(dtFromDate, dtToDate, "tunai");
		listLedgerPostingBank = await _paymentin.GetLedgerPostingsRetail(dtFromDate, dtToDate, "bank");

		EcerTunai = listLedgerPostingTunai.Sum(x => x.NetAmounts);
		EcerBank = listLedgerPostingBank.Sum(x => x.NetAmounts);

		PartaiCashList = await _paymentin.GetSalesPartai(dtFromDate, dtToDate, 1);
		PartaiTransferList = await _paymentin.GetSalesPartai(dtFromDate, dtToDate, 10);
		PartaiKGList = await _paymentin.GetSalesPartaiKG(dtFromDate, dtToDate, 10);
		var partaiKGCash = await _paymentin.GetSalesPartaiKG(dtFromDate, dtToDate, 1);
		PartaiKGList.AddRange(partaiKGCash);
		PartaiKGList = PartaiKGList.Distinct().ToList();

		PartaiTunai = Convert.ToDecimal(PartaiCashList.Sum(x => (decimal)x.Amount));
		PartaiBank = Convert.ToDecimal(PartaiTransferList.Sum(x => (decimal)x.Amount));

		LoadReportRecordingSummary();
		CalculateTotalNonTelurRupiah();

		if(currentUserRole == "Supervisor")
		{
			unapprovedPerijinanBySupervisor = _hr.GetPerijinanBySupervisorID(modelEmployee.EmployeeId);
			unapprovedPerijinanCurrentUser = _hr.GetListPerijinanByEmployeeID(modelEmployee.EmployeeId);
		}
		else if(currentUserRole == "Admin") 
		{
			if(modelUser.UserName == "Arief") {
				unapprovedPerijinan = _hr.GetPerijinanUnApproved();
			}
			else
			{
				unapprovedPerijinan = _hr.GetPerijinanBySupervisorID(modelEmployee.EmployeeId);
			}
		}
		else
		{
			unapprovedPerijinanCurrentUser = _hr.GetListPerijinanByEmployeeID(modelEmployee.EmployeeId);
		}

		TelurUtuh = _sales.GetPenjualanTelurUtuh(dtFromDate, dtToDate);
		TelurUtuhEcer = _sales.GetPenjualanTelurUtuhEcer(dtFromDate, dtToDate);
		TelurUtuhPartai = _sales.GetPenjualanTelurUtuhPartai(dtFromDate, dtToDate);
		TelurPutih = _sales.GetPenjualanTelurPutih(dtFromDate, dtToDate);
		TelurBentes = _sales.GetPenjualanTelurBentes(dtFromDate, dtToDate);
		TelurParah = _sales.GetPenjualanTelurParah(dtFromDate, dtToDate);
		TelurParahSekali = _sales.GetPenjualanTelurParahSekali(dtFromDate, dtToDate);

		RpTelurUtuh = _sales.GetPenjualanTelurUtuh(dtFromDate, dtToDate);
		RpTelurPutih = _sales.GetPenjualanTelurPutih(dtFromDate, dtToDate);
		RpTelurBentes = _sales.GetPenjualanTelurBentes(dtFromDate, dtToDate);
		RpTelurParah = _sales.GetPenjualanTelurParah(dtFromDate, dtToDate);
		RpTelurParahSekali = _sales.GetPenjualanTelurParahSekali(dtFromDate, dtToDate);

		DateTime fromBeginning = new DateTime(2018, 1, 1, 0, 0, 0);

		TotalTelurUtuh = _sales.GetPenjualanTelurUtuh(fromBeginning, dtToDate);
		TotalTelurPutih = _sales.GetPenjualanTelurPutih(fromBeginning, dtToDate);
		TotalTelurBentes = _sales.GetPenjualanTelurBentes(fromBeginning, dtToDate);
		TotalTelurParah = _sales.GetPenjualanTelurParah(fromBeginning, dtToDate);
		TotalTelurParahSekali = _sales.GetPenjualanTelurParahSekali(fromBeginning, dtToDate);

		LoadDataStock();

		DaySeven();

		CurrentPhotoUrl = "img/user.png";
		await LoadProfilePhoto();
		ChartDataLoaded = true;

		_pengumuman = _db.Pengumuman.FirstOrDefault(x => x.ID == 1);

		string auditMessage = "User dengan nama " + modelEmployee.EmployeeName + " mengunjungi Dashboard.";
        await _audit.LogAsync(LogTypes.LogInfo, "Dashboard", auditMessage, modelEmployee.EmployeeId, modelEmployee.EmployeeName);

		StateHasChanged();
	}

	private async Task LoadProfilePhoto()
	{
		todayAttendances = await _attendance.GetTodaysAttendanceList(modelEmployee.EmployeeId);
		if(todayAttendances.Count > 0)
		{
			string userFolder = modelEmployee.EmployeeId + "_" + modelEmployee.EmployeeName.Replace(" ", "_");
			CurrentPhotoUrl = "https://telurintanfarm.com/uploads/absensi/" + userFolder + "/" + todayAttendances[0].PhotoSelfie;
		}
	}

	private async Task LoadDataSales() 
	{		
		isProcessing = true;
		dtFromDate = new DateTime(dtFromDate.Year, dtFromDate.Month, dtFromDate.Day, 0, 0, 0);
		dtToDate = new DateTime(dtToDate.Year, dtToDate.Month, dtToDate.Day);
		TimeSpan toDtTime = TimeSpan.Parse("23:59:59");	
		dtToDate = dtToDate.Add(toDtTime);

		listLedgerPostingTunai = await _paymentin.GetLedgerPostingsRetail(dtFromDate, dtToDate, "tunai");
		listLedgerPostingBank = await _paymentin.GetLedgerPostingsRetail(dtFromDate, dtToDate, "bank");

		EcerTunai = listLedgerPostingTunai.Sum(x => x.NetAmounts);
		EcerBank = listLedgerPostingBank.Sum(x => x.NetAmounts);

		PartaiCashList = await _paymentin.GetSalesPartai(dtFromDate, dtToDate, 1);
		PartaiTransferList = await _paymentin.GetSalesPartai(dtFromDate, dtToDate, 10);
		PartaiKGList = await _paymentin.GetSalesPartaiKG(dtFromDate, dtToDate, 10);
		var partaiKGCash = await _paymentin.GetSalesPartaiKG(dtFromDate, dtToDate, 1);
		PartaiKGList.AddRange(partaiKGCash);
		PartaiKGList = PartaiKGList.Distinct().ToList();

		PartaiTunai = Convert.ToDecimal(PartaiCashList.Sum(x => (decimal)x.Amount));
		PartaiBank = Convert.ToDecimal(PartaiTransferList.Sum(x => (decimal)x.Amount));
		
		TelurUtuh = _sales.GetPenjualanTelurUtuh(dtFromDate, dtToDate);
		TelurPutih =			_sales.GetPenjualanTelurPutih(dtFromDate, dtToDate);
		TelurBentes =			_sales.GetPenjualanTelurBentes(dtFromDate, dtToDate);
		TelurParah =			_sales.GetPenjualanTelurParah(dtFromDate, dtToDate);
		TelurParahSekali =		_sales.GetPenjualanTelurParahSekali(dtFromDate, dtToDate);
		
		//=====		
		TelurUtuhEcer = _sales.GetPenjualanTelurUtuhEcer(dtFromDate, dtToDate);
		TelurUtuhPartai = _sales.GetPenjualanTelurUtuhPartai(dtFromDate, dtToDate);		
		//=====
		LoadReportRecordingSummary();
		CalculateTotalNonTelurRupiah();

		isProcessing = false;

		StateHasChanged();
	}

	private async void DayOne()
	{
		string strDay1 = "active";
		string strDay7 = "DeActive";
		string strDay30 = "DeActive";
		string strDay365 = "DeActive";
		DateTime dtFromDate = DateTime.Now.AddDays(-1);
		DateTime dtToDate = DateTime.Now;
		var result = report.SalesPurchaseTotal( dtFromDate , dtToDate, 1); //GetTotalSales&Purchase
		TotalSale = result.totalSale;
		TotalPurchase = result.totalPurchase;

		var resultSales = report.Receive(dtFromDate , dtToDate, 1); //GetYouWillReceive
		CashAmount = resultSales.Purchase;

		var resultPyment = report.Pay(dtFromDate, dtToDate,  1); //GetYouWillPay
		PaymentCashAmount = resultPyment.Payment;

		listIncomeExpenses = await report.GetIncomeExpenses(dtFromDate, dtToDate);

		listVoucher = await _voucher.GetAll(dtFromDate, dtToDate, string.Empty);
		listPaymentIn = await _paymentin.GetAll(dtFromDate, dtToDate, string.Empty, "ReceiptVoucher");
		listPaymentOut = await _paymentout.GetAll(dtFromDate, dtToDate, string.Empty, "PaymentVoucher");
		listPurchase = await _purchase.PurchaseInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSales = await _sales.SalesInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSalesReturn = await _salesreturn.SalesReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listPurchaseReturn = await _purchasereturn.PurchaseReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);

		//Cash/Bank
		listCashBank = await report.CashBankBalance(dtFromDate, dtToDate);
	}

	private async void DaySeven()
	{
		string strDay1 = "DeActive";
		string strDay7 = "active";
		string strDay30 = "DeActive";
		string strDay365 = "DeActive";
		DateTime today = DateTime.Now;
		dtFromDate = new DateTime(today.Year, today.Month, today.Day, 0, 0, 0);
		dtToDate = new DateTime(today.Year, today.Month, today.Day);
		TimeSpan toDtTime = TimeSpan.Parse("23:59:59");
		dtToDate = dtToDate.Add(toDtTime);
		var result = report.SalesPurchaseTotal(dtFromDate, dtToDate, 1); //GetTotalSales&Purchase
		TotalSale = result.totalSale;
		TotalPurchase = result.totalPurchase;

		var resultSales = report.Receive(dtFromDate, dtToDate, 1); //GetYouWillReceive
		CashAmount = resultSales.Purchase;

		var resultPyment = report.Pay(dtFromDate, dtToDate, 1); //GetYouWillPay
		PaymentCashAmount = resultPyment.Payment;

		listIncomeExpenses = await report.GetIncomeExpenses(dtFromDate, dtToDate);

		listVoucher = await _voucher.GetAll(dtFromDate, dtToDate, string.Empty);
		listPaymentIn = await _paymentin.GetAll(dtFromDate, dtToDate, string.Empty, "ReceiptVoucher");
		listPaymentOut = await _paymentout.GetAll(dtFromDate, dtToDate, string.Empty, "PaymentVoucher");
		listPurchase = await _purchase.PurchaseInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSales = await _sales.SalesInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSales = listSales.OrderByDescending(x => x.Date).ToList();
		listSalesReturn = await _salesreturn.SalesReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listPurchaseReturn = await _purchasereturn.PurchaseReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);

		//Cash/Bank
		listCashBank = await report.CashBankBalance(dtFromDate, dtToDate);
	}

	private async void DayMonth()
	{
		string strDay1 = "DeActive";
		string strDay7 = "DeActive";
		string strDay30 = "active";
		string strDay365 = "DeActive";
		DateTime dtFromDate = DateTime.Now.AddDays(-30);
		DateTime dtToDate = DateTime.Now;
		var result = report.SalesPurchaseTotal(dtFromDate, dtToDate, 1); //GetTotalSales&Purchase
		TotalSale = result.totalSale;
		TotalPurchase = result.totalPurchase;

		var resultSales = report.Receive(dtFromDate, dtToDate, 1); //GetYouWillReceive
		CashAmount = resultSales.Purchase;

		var resultPyment = report.Pay(dtFromDate, dtToDate, 1); //GetYouWillPay
		PaymentCashAmount = resultPyment.Payment;

		listIncomeExpenses = await report.GetIncomeExpenses(dtFromDate, dtToDate);

		listVoucher = await _voucher.GetAll(dtFromDate, dtToDate, string.Empty);
		listPaymentIn = await _paymentin.GetAll(dtFromDate, dtToDate, string.Empty, "ReceiptVoucher");
		listPaymentOut = await _paymentout.GetAll(dtFromDate, dtToDate, string.Empty, "PaymentVoucher");
		listPurchase = await _purchase.PurchaseInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSales = await _sales.SalesInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSalesReturn = await _salesreturn.SalesReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listPurchaseReturn = await _purchasereturn.PurchaseReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);

		//Cash/Bank
		listCashBank = await report.CashBankBalance(dtFromDate, dtToDate);
	}

	private async void DayYear()
	{
		string strDay1 = "DeActive";
		string strDay7 = "DeActive";
		string strDay30 = "DeActive";
		string strDay365 = "active";
		DateTime dtFromDate = DateTime.Now.AddDays(-365);
		DateTime dtToDate = DateTime.Now;
		var result = report.SalesPurchaseTotal(dtFromDate, dtToDate, 1); //GetTotalSales&Purchase
		TotalSale = result.totalSale;
		TotalPurchase = result.totalPurchase;

		var resultSales = report.Receive(dtFromDate, dtToDate, 1); //GetYouWillReceive
		CashAmount = resultSales.Purchase;

		var resultPyment = report.Pay(dtFromDate, dtToDate, 1); //GetYouWillPay
		PaymentCashAmount = resultPyment.Payment;

		listIncomeExpenses = await report.GetIncomeExpenses(dtFromDate, dtToDate);

		listVoucher = await _voucher.GetAll(dtFromDate, dtToDate, string.Empty);
		listPaymentIn = await _paymentin.GetAll(dtFromDate, dtToDate, string.Empty, "ReceiptVoucher");
		listPaymentOut = await _paymentout.GetAll(dtFromDate, dtToDate, string.Empty, "PaymentVoucher");
		listPurchase = await _purchase.PurchaseInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSales = await _sales.SalesInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listSalesReturn = await _salesreturn.SalesReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);
		listPurchaseReturn = await _purchasereturn.PurchaseReturnInvoiceSearch(dtFromDate, dtToDate, string.Empty, 0);

		//Cash/Bank
		listCashBank = await report.CashBankBalance(dtFromDate, dtToDate);
	}

	void OnChange(int index)
	{

	}

	void OnChange(bool? value, string name)
	{
		value = true;
	}
}