@page "/app/attendancelist"
@inject IAttendance _attendance
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IUser _user
@inject IEmployee _employee
@inject IHRServices _hr;
@attribute [Authorize]
<PageTitle>Laporan Absensi</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Laporan Absensi Karyawan</h4>
        </div>
        @* <div class="page-btn">
            <a class="btn btn-added" style="float:left;" href="/app/attendance"><img src="assets/img/icons/plus.svg" alt="img" class="me-1">Add New</a>
        </div> *@
    </div>
    <!-- /product list -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive table-scrollable">
                <div class="row">
			        <div class="col-lg col-sm-12 col-12">
				        <div class="form-group">
                            <label>Periode</label>
                            <div class="row">
                                <div class="col-lg-10 col-sm-10 col-10">
                                    <select class="form-control" @onchange="SelectedCutoff">
                                        @foreach (var cutoff in PayrollCutoffs)
                                        {
                                            <option value="@cutoff.PayrollDate.ToString("dd/MM/yyyy")">@cutoff.PayrollPeriode</option>
                                        }
                                        <option value="@DateTime.Today.ToString("dd/MM/yyyy")">Bulan Ini</option>
                                    </select>
                                </div>
                            </div>
				        </div>
			        </div>			        						        
		        </div>
            </div>
        </div>
    </div>
    <!-- /product list -->

    <div class="card">
        <div class="card-body">
            @{
                if (SelectedEmployee != null)
                {
                    var countMasuk = 0;
                    var alpha = 0;
                    foreach (var item in detailAttendances)
                    {
                        var groupByDate = item.GroupBy(x => x.Date.Date).ToList();
                        foreach (var gbd in groupByDate)
                        {
                            if (gbd.Count() >= 2)
                            {
                                countMasuk++;
                            }

                            var masukPerHari = _attendance.GetAttendanceListByDateAndEmployeeId(SelectedEmployee.EmployeeId, gbd.Key).Count;
                            if (masukPerHari < 2)
                            {
                                //check table libur
                                var adaIjin = _hr.GetPerijinanByEmployeeIDAndDate(SelectedEmployee.EmployeeId, gbd.Key);
                                if (adaIjin.Count == 0)
                                {
                                    alpha++;
                                }
                            }
                        }
                    }
                    decimal totalGaji = SelectedEmployee.DailyWage * (decimal)countMasuk;
                    decimal cicilan = 0;
                    decimal potonganNonCicilan = 0;
                    decimal tambahanGaji = 0;
                    decimal tunjanganTetap = SelectedEmployee.Tunjangan;
                    int hariTerlambat = 0;
                    DateTime tanggalMulaiKerja = SelectedEmployee.JoiningDate;

                    //calculate tunjangan hari kerja
                    decimal dailyTunjangan = SelectedEmployee.Tunjangan / 365; //rata2 hari dalam sebulan 30                                
                    DateTime endDate = DateTime.Now;
                    // Calculate the difference
                    TimeSpan difference = endDate - tanggalMulaiKerja;
                    // Get the total number of days
                    int daysBetween = difference.Days;
                    tunjanganTetap = (decimal)daysBetween * dailyTunjangan;

                    // hitung hari terlambat
                    var listAttendances = _attendance.GetAttendanceCurrentPeriodeByEmployeeIdSync(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                    TimeSpan timeToCompare = new TimeSpan(6, 30, 59);
                    var jumlahTerlambat = listAttendances.OrderBy(x => x.Date)
                        .GroupBy(dt => dt.Date.Date)
                        .Select(g => g.Min(dt => dt.Date))
                        .ToList();
                    var jumlahTerlambatCount = 0;
                    foreach (DateTime kedatangan in jumlahTerlambat)
                    {
                        if (kedatangan.Hour == 6)
                        {
                            if (kedatangan.Minute > 30)
                            {
                                jumlahTerlambatCount++;
                            }
                        }
                        else if (kedatangan.Hour > 6)
                        {
                            jumlahTerlambatCount++;
                        }
                    }

                    var perijinanKaryawan = _hr.GetPerijinanByEmployeeIDInPeriodePayroll(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                    var libur = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("LIBUR")).Count();
                    var ijin = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("IJIN")).Count();
                    var sakit = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("SAKIT")).Count();
                    var setengahHari = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("SETENGAH HARI")).Count();
                    var ijinLembur = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("LEMBUR")).Count();
                    decimal premi = 0;
                    decimal gajiBersih = 0;
                    var listPotongan = _hr.GetByCurrentMonthYearAndEmployeeId(SelectedEmployee.EmployeeId, SelectedCutoffTo.Month, 2024);
                    var listPenalty = _hr.GetPenaltyByCurrentMonthYearAndEmployeeId(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                    var listBonus = listPenalty.Where(x => x.IsPenalty == false).ToList();
                    listPenalty = listPenalty.Where(x => x.IsPenalty == true).ToList();

                    if (PeriodDaysCount > (countMasuk + alpha + libur + ijin + sakit))
                    {
                        alpha = PeriodDaysCount - (countMasuk + alpha + libur + ijin + sakit);
                    }

                    decimal potonganSetengahHari = 0;
                    if (setengahHari > 0)
                    {
                        potonganSetengahHari = potonganSetengahHari + (SelectedEmployee.DailyWage / 2);
                    }

                    if (listPotongan.Count > 0)
                    {
                        foreach (var pt in listPotongan)
                        {
                            cicilan = cicilan + pt.RP_POTONGAN;
                        }
                    }

                    if (listPenalty.Count > 0)
                    {
                        foreach (var penalty in listPenalty)
                        {
                            potonganNonCicilan = potonganNonCicilan + penalty.PenaltyAmount;
                        }
                    }

                    if (listBonus.Count > 0)
                    {
                        foreach (var bonus in listBonus)
                        {
                            tambahanGaji = tambahanGaji + bonus.PenaltyAmount;
                        }
                    }

                    if (libur <= 3 && ijin == 0 && alpha == 0)
                    {
                        premi = totalGaji * (decimal)0.15;
                        gajiBersih = totalGaji + premi;
                    }
                    else
                    {
                        gajiBersih = totalGaji;
                    }

                    gajiBersih = gajiBersih - SelectedEmployee.BPJS_KES - SelectedEmployee.BPJS_TK - cicilan - potonganNonCicilan - potonganSetengahHari + tambahanGaji + tunjanganTetap;
                    gajiKaryawanTotal = gajiKaryawanTotal + gajiBersih;



                    <div class="table-responsive table-scrollable">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Karyawan</th>
                                    <th>Harian</th>
                                    <th>BPJS Kes</th>
                                    <th>BPJS TK</th>
                                    <th>Premi</th>
                                    <th>Tambahan</th>
                                    <th>Tunjangan</th>
                                    <th>M</th>
                                    <th>A</th>
                                    <th>I</th>
                                    <th>S</th>
                                    <th>1/2</th>
                                    <th>Lembur</th>
                                    <th>L</th>
                                    <th>Telat</th>
                                    <th>Cicilan</th>
                                    <th>Potongan</th>
                                    <th>No. Rek</th>
                                    <th>Total Gaji</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>@(SelectedEmployee != null ? SelectedEmployee.EmployeeName : "")</td>
                                    <td>@string.Format("{0:n0}", SelectedEmployee.DailyWage)</td>
                                    <td>@string.Format("{0:n0}", SelectedEmployee.BPJS_KES)</td>
                                    <td>@string.Format("{0:n0}", SelectedEmployee.BPJS_TK)</td>
                                    <td>@string.Format("{0:n0}", premi)</td>
                                    <td>@string.Format("{0:n0}", tambahanGaji)</td>
                                    <td>@string.Format("{0:n0}", tunjanganTetap)</td>

                                    <td>@countMasuk</td>
                                    <td>@alpha</td>
                                    <td>@ijin</td>
                                    <td>@sakit</td>
                                    <td>@setengahHari</td>
                                    <td>@ijinLembur</td>
                                    <td>@libur</td>
                                    <td>@jumlahTerlambatCount</td>
                                    <td>@string.Format("{0:n0}", cicilan)</td>
                                    <td>@string.Format("{0:n0}", potonganNonCicilan + potonganSetengahHari)</td>
                                    <td>@SelectedEmployee.BankAccount</td>
                                    <td>@string.Format("{0:n0}", gajiBersih)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
            }
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive table-scrollable">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Tanggal</th>
                            <th>Pagi</th>
                            <th>Sore</th>
                            <th>Gaji Harian</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (groupedResults != null)
                        {
                            @foreach (var item in PeriodeDates)
                            {
                                var attendanceItem = groupedResults.Where(x => x.Date.Date == item.Date).FirstOrDefault();
                                var adaIjin = _hr.GetPerijinanByEmployeeIDAndDate(modelEmployee.EmployeeId, item.Date);
                                var keterangan = "";
                                var trStyle = "";
                                var startHour = "";
                                var endHour = "";

                                if (attendanceItem != null)
                                {
                                    keterangan = "Absen Sudah Lengkap";//string.Format("{0:n0}", modelEmployee.DailyWage);

                                    if(attendanceItem.StartTime.Hour < 9)
                                    {
                                        startHour = attendanceItem.StartTime.ToString("HH:mm");
                                                                                    
                                        if(attendanceItem.StartTime.Hour == 6)
                                        {
                                            if(attendanceItem.StartTime.Minute > 30)
                                            {
                                                keterangan = "TERLAMBAT";
                                                trStyle = "background-color:#ffd6d6; color:#000 !important; font-weight:bold !important;";
                                            }                                                
                                        }
                                        else if(attendanceItem.StartTime.Hour > 6)
                                        {
                                            keterangan = "TERLAMBAT";
                                            trStyle = "background-color:#ffd6d6; color:#000 !important; font-weight:bold !important;";
                                        }
                                    }

                                    if (attendanceItem.StartTime == attendanceItem.EndTime)
                                    {
                                        if(attendanceItem.EndTime.Hour > 15)
                                        {
                                            endHour = attendanceItem.EndTime.ToString("HH:mm");
                                        }

                                        trStyle = "background-color:#e86b6b; color:#fff !important; font-weight:bold !important;";
                                        if (attendanceItem.StartTime.Date == DateTime.Now.Date)
                                        {
                                            keterangan = "JANGAN LUPA ABSEN";
                                        }
                                        else if (attendanceItem.StartTime.Date < DateTime.Now.Date)
                                        {
                                            keterangan = "ALPHA";                                                
                                        }                                                                           
                                    }
                                    else
                                    {                                        
                                        endHour = attendanceItem.EndTime.ToString("HH:mm");
                                    }
                                }
                                else
                                {
                                    if (adaIjin.Count == 0)
                                    {
                                        keterangan = "ALPHA";
                                        trStyle = "background-color:#e86b6b; color:#fff !important; font-weight:bold !important;";
                                    }
                                    else
                                    {
                                        keterangan = adaIjin[0].SubmittedFor;
                                        switch (keterangan)
                                        {
                                            case "LIBUR":
                                                trStyle = "background-color:#4e56c7; color:#fff !important; font-weight:bold !important;";
                                                break;
                                            case "IJIN":
                                                trStyle = "background-color:#4e56c7; color:#fff !important; font-weight:bold !important;";
                                                break;
                                            case "SAKIT":
                                                trStyle = "background-color:#fce808; color:#000 !important; font-weight:bold !important;";
                                                break;
                                        }
                                    }
                                }

                                <tr style="@trStyle">

                                    <td style ="@trStyle">@item.Date.ToString("dd/MM/yyyy")</td>
                                    
                                    @if (attendanceItem != null) 
                                    {
                                        <td style="@trStyle">
                                            @startHour
                                        </td style="@trStyle">
                                        <td style="@trStyle">@endHour</td>
                                        <td style="@trStyle">@keterangan</td>
                                    }
                                    else
                                    {
                                        <td colspan="3" style="@trStyle">@keterangan</td>
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    IList<DailyAttendanceMaster> listModel;
    DateTime SelectedCutoffFrom;
    DateTime SelectedCutoffTo;
    Employee SelectedEmployee = null;
    UserMaster modelUser = new UserMaster();
    Employee modelEmployee = new Employee();
    DateTime LastPayrollCutoffDate;
    List<DateTime> PeriodeDates = new List<DateTime>();

    List<PayrollCutoff> PayrollCutoffs = new List<PayrollCutoff>();
    decimal DailyWage;
    List<AbsensiData> groupedResults = new List<AbsensiData>();
    
    decimal gajiKaryawanTotal = 0;
    int PeriodDaysCount = 0;
    
    List<DailyAttendanceMaster> absensiAllEmployeePerPeriode = new List<DailyAttendanceMaster>();
    List<IGrouping<int, DailyAttendanceMaster>> detailAttendances = new List<IGrouping<int, DailyAttendanceMaster>>();
    private bool dense = true;
    private bool hover = true;
    private string searchString1 = "";
    string strMenu = "Laporan Absensi Karyawan";
    private bool visible;
    private MudBlazor.DialogOptions dialogOptions = new() { FullWidth = true };
    string ShowDialogue;
    DateTime dtFromDate;
    DateTime dtToDate;
    private bool isProcessing;
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        string userName = strRole.FindFirst(ClaimTypes.Name).Value;
        modelUser = await _user.UserProfile(userName);
        modelEmployee = await _employee.GetbyUserId(modelUser.UserId);
        DailyWage = modelEmployee.DailyWage;
        if (SelectedEmployee == null)
        {
            SelectedEmployee = modelEmployee;
        }
        await LoadData();
        // if (strShow.ShowAction == true)
        // {
        //     await LoadData();
        // }
        // else
        // {
        //     navigation.NavigateTo("/app/dashboard");
        //     Snackbar.Add("You dont have to privilege..", Severity.Error);
        // }
    }
    private async Task LoadData()
    {
        PeriodeDates = new List<DateTime>();
       // PayrollCutoffs = await _attendance.GetPayrollCutoffs();
        //SelectedCutoffFrom = (await _attendance.GetLastPayrollCutoff()).PayrollDate;
        var lastPayrollCutoff = await _attendance.GetLastPayrollCutoff();
       
        PayrollCutoffs = await _attendance.GetPayrollCutoffs();
        //var lastPayroll = await _attendance.GetLastPayrollCutoff();

        PayrollCutoffs = await _attendance.GetPayrollCutoffs();        
        SelectedCutoffFrom = lastPayrollCutoff.PayrollDate.AddDays(1);
        SelectedCutoffTo = DateTime.Now;

        if (DateTime.Today > lastPayrollCutoff.PayrollDate)
        {
            LastPayrollCutoffDate = DateTime.Today;
            //SelectedCutoffFrom = new DateTime(LastPayrollCutoffDate.Year, LastPayrollCutoffDate.Month, 1);
        }
        else
        {
            //SelectedCutoffFrom = lastPayrollCutoff.PayrollDateStart;
            LastPayrollCutoffDate = lastPayrollCutoff.PayrollDate;
        }

        await ReloadData();

        StateHasChanged();
    }  

    private async Task ReloadData()
    {
        PeriodeDates = new List<DateTime>();
        DateTime endDate = LastPayrollCutoffDate; // Today's date
                                                  // Iterate from the start date to the end date
        DateTime currentDate = SelectedCutoffFrom;
        while (currentDate <= endDate)
        {
            PeriodeDates.Add(currentDate);
            currentDate = currentDate.AddDays(1); // Move to the next day
        }

        listModel = await _attendance.GetAttendanceCurrentPeriodeByEmployeeId(modelEmployee.EmployeeId, SelectedCutoffFrom.Date, LastPayrollCutoffDate.Date);
        detailAttendances = listModel.GroupBy(x => x.EmployeeID).OrderBy(x => x.Key).ToList();
        groupedResults = listModel.OrderBy(x => x.Date)
            .GroupBy(dt => dt.Date.Date)
            .Select(g => new AbsensiData
                {
                    Date = g.Key,
                    StartTime = g.Min(dt => dt.Date),
                    EndTime = g.Max(dt => dt.Date),
                    DailyWage = DailyWage
                })
            .ToList();
    }

    public class AbsensiData
    {
        public DateTime Date { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public decimal DailyWage { get; set; }
    }

    private async Task SelectedCutoff(ChangeEventArgs e)
    {
        return;
        var selectedDate = DateTime.ParseExact(e.Value.ToString(), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
        if (selectedDate != DateTime.Today)
        {
            DateTime firstDayOfMonth = new DateTime(selectedDate.Year, selectedDate.Month, 1);
            DateTime lastDayOfMonth = firstDayOfMonth.AddMonths(1);
            SelectedCutoffFrom = firstDayOfMonth;
            LastPayrollCutoffDate = lastDayOfMonth.AddSeconds(-1);
        }
        else
        {
            LastPayrollCutoffDate = DateTime.ParseExact(e.Value.ToString(), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            SelectedCutoffFrom = new DateTime(LastPayrollCutoffDate.Year, LastPayrollCutoffDate.Month, 1);
        }
        groupedResults = new List<AbsensiData>();
        await ReloadData();
    }

    private async Task LoadDataAbsensi()
    {
        
    }
}
