@page "/app/adminattendancelist"
@inject IAttendance _attendance
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IUser _user
@inject IEmployee _employee
@inject IHRServices _hr;
@attribute [Authorize]
<PageTitle>Admin - Laporan Absensi Karyawan</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Admin - Laporan Absensi Karyawan</h4>
        </div>
        @* <div class="page-btn">
            <a class="btn btn-added" style="float:left;" href="/app/attendance"><img src="assets/img/icons/plus.svg" alt="img" class="me-1">Add New</a>
        </div> *@
    </div>
    <!-- /product list -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <div class="row">
			        <div class="col-lg col-sm-6 col-12">
				        <div class="form-group">
                            <label>Periode</label>
                            <div class="row">
                                <div class="col-lg-10 col-sm-10 col-10">
                                    <select class="form-control" @onchange="SelectedCutoff">
                                        @foreach (var cutoff in PayrollCutoffs)
                                        {
                                            <option value="@cutoff.PayrollDate.ToString("dd/MM/yyyy")">@cutoff.PayrollPeriode</option>
                                        }         
                                        <option value="@DateTime.Today">Bulan Ini</option>
                                    </select>
                                </div>
                            </div>
				        </div>
			        </div>			   
                    <div class="col-lg col-sm-6 col-12">
                        <div class="form-group">
                            <label>Karyawan</label>
                            <div class="row">
                                <div class="col-lg-10 col-sm-10 col-10">
                                    <select class="form-control" @onchange="SelectedKaryawan">
                                        @foreach (var karyawan in DaftarKaryawan)
                                        {
                                            <option value="@karyawan.EmployeeId">@karyawan.EmployeeName</option>
                                        }
                                        
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    @* <div class="col-lg-1 col-sm-12 col-12">
				        <div class="form-group" style="margin-top:20px;">
					        <Loading IsLoading="isProcessing">
						        <a class="btn btn-filters ms-auto" @onclick="()=>LoadDataAbsensi()"><img src="assets/img/icons/search-whites.svg" alt="img" /></a>
					        </Loading>
				        </div>
			        </div> *@
		        </div>
            </div>
        </div>
    </div>
    <!-- /product list -->

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Tanggal</th>
                            <th>Pagi</th>
                            <th>Sore</th>
                            <th>Gaji Harian</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (groupedResults != null)
                        {
                            @foreach (var item in PeriodeDates)
                            {
                                <tr>
                                    <td>@item.Date.ToString("dd/MM/yyyy")</td>
                                    @{
                                        var attendanceItem = groupedResults.Where(x => x.Date.Date == item.Date).FirstOrDefault();                                        
                                    }
                                    @if (attendanceItem != null) 
                                    {
                                        <td>
                                            @attendanceItem.StartTime.ToString("hh:mm")
                                        </td>
                                        <td>@attendanceItem.EndTime.ToString("hh:mm")</td>
                                        <td>@string.Format("{0:n0}", attendanceItem.DailyWage)</td>
                                    }
                                    else
                                    {
                                        var adaIjin = _hr.GetPerijinanByEmployeeIDAndDate(SelectedEmployee.EmployeeId, item.Date);
                                        var keterangan = "";
                                        if (adaIjin.Count == 0)
                                        {
                                            keterangan = "ALPHA";
                                        }
                                        else
                                        {
                                            keterangan = adaIjin[0].SubmittedFor;
                                        }

                                        <td colspan="3">@keterangan</td>                                        
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    IList<DailyAttendanceMaster> listModel;
    DateTime SelectedCutoffFrom;
    Employee SelectedEmployee = null;
    UserMaster modelUser = new UserMaster();
    Employee modelEmployee = new Employee();
    DateTime LastPayrollCutoffDate;
    List<DateTime> PeriodeDates = new List<DateTime>();

    List<PayrollCutoff> PayrollCutoffs = new List<PayrollCutoff>();
    decimal DailyWage;
    List<AbsensiData> groupedResults = new List<AbsensiData>();
    List<Employee> DaftarKaryawan = new List<Employee>();

    private bool dense = true;
    private bool hover = true;
    private string searchString1 = "";
    string strMenu = "Admin Laporan Absensi Karyawan";
    private bool visible;
    private MudBlazor.DialogOptions dialogOptions = new() { FullWidth = true };
    string ShowDialogue;
    DateTime dtFromDate;
    DateTime dtToDate;
    private bool isProcessing;
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        string userName = strRole.FindFirst(ClaimTypes.Name).Value;
        modelUser = await _user.UserProfile(userName);
        modelEmployee = await _employee.GetbyUserId(modelUser.UserId);
        DailyWage = modelEmployee.DailyWage;

        await LoadData();
        // if (strShow.ShowAction == true)
        // {
        //     await LoadData();
        // }
        // else
        // {
        //     navigation.NavigateTo("/app/dashboard");
        //     Snackbar.Add("You dont have to privilege..", Severity.Error);
        // }
    }
    private async Task LoadData()
    {
        PeriodeDates = new List<DateTime>();
        DaftarKaryawan = await _employee.GetAllEmployeeActive();
        if (SelectedEmployee == null)
        {
            SelectedEmployee = DaftarKaryawan.FirstOrDefault();
        }
        PayrollCutoffs = await _attendance.GetPayrollCutoffs();
        var lastPayrollCutoff = await _attendance.GetLastPayrollCutoff();

        if (DateTime.Today > lastPayrollCutoff.PayrollDate) {
            LastPayrollCutoffDate = DateTime.Today;
            SelectedCutoffFrom = new DateTime(LastPayrollCutoffDate.Year, LastPayrollCutoffDate.Month, 1);
        }
        else {
            SelectedCutoffFrom = lastPayrollCutoff.PayrollDateStart;
            LastPayrollCutoffDate = lastPayrollCutoff.PayrollDate;
        }

        await ReloadData();

        StateHasChanged();
    }  

    private async Task ReloadData()
    {        
        PeriodeDates = new List<DateTime>();
        DateTime endDate = LastPayrollCutoffDate; // Today's date
                                                  // Iterate from the start date to the end date
        DateTime currentDate = SelectedCutoffFrom;
        while (currentDate <= endDate)
        {
            PeriodeDates.Add(currentDate);
            currentDate = currentDate.AddDays(1); // Move to the next day
        }

        listModel = await _attendance.GetAttendanceCurrentPeriodeByEmployeeId(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, LastPayrollCutoffDate.Date);
        groupedResults = listModel.OrderBy(x => x.Date)
            .GroupBy(dt => dt.Date.Date)
            .Select(g => new AbsensiData
                {
                    Date = g.Key,
                    StartTime = g.Min(dt => dt.Date),
                    EndTime = g.Max(dt => dt.Date),
                    DailyWage = DailyWage
                })
            .ToList();
    }
    public class AbsensiData
    {
        public DateTime Date { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public decimal DailyWage { get; set; }
    }

    private async Task SelectedCutoff(ChangeEventArgs e)
    {        
        var selectedDate = Convert.ToDateTime(e.Value.ToString());
        if (selectedDate == DateTime.Today)
        {
            DateTime firstDayOfMonth = new DateTime(selectedDate.Year, selectedDate.Month, 1);
            DateTime lastDayOfMonth = firstDayOfMonth.AddMonths(1);
            SelectedCutoffFrom = firstDayOfMonth;
            LastPayrollCutoffDate = lastDayOfMonth.AddSeconds(-1);
        }
        else
        {
            LastPayrollCutoffDate = Convert.ToDateTime(e.Value.ToString());
            SelectedCutoffFrom = new DateTime(LastPayrollCutoffDate.Year, LastPayrollCutoffDate.Month, 1);
        }
        groupedResults = new List<AbsensiData>();
        await ReloadData();
    }

    private async Task SelectedKaryawan(ChangeEventArgs e)
    {
        groupedResults = new List<AbsensiData>();
        SelectedEmployee = await _employee.GetbyId(Convert.ToInt32(e.Value.ToString()));
        await ReloadData();
    }

    private async Task LoadDataAbsensi()
    {
        
    }
}
