@page "/app/adminattendancelist"
@inject IAttendance _attendance
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IUser _user
@inject IEmployee _employee
@inject IHRServices _hr
@inject ApplicationDbContext _context
@inject IAuditLogService _audit
@attribute [Authorize]
<PageTitle>Admin - Laporan Absensi Karyawan</PageTitle>
<Loader IsLoading="isProcessing"></Loader>
<style type="text/css">
    .table tbody tr td {
        padding-top: 2px !important;
        padding-bottom: 2px !important;
        /* color: #637381;
                    font-weight: 200 !important;
                    border-bottom: 1px solid #E9ECEF;
                    vertical-align: middle;
                    white-space: nowrap;
                    text-align: right !important; */
    }
/* 
    .table thead th {
        color: #637381;
        padding: 2px !important;
        font-size: 14px !important;
        white-space: nowrap;
        border: 1px solid #979797 !important;
    } */
</style>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Admin - Laporan Absensi Karyawan</h4>
        </div>
        @* <div class="page-btn">
            <a class="btn btn-added" style="float:left;" href="/app/attendance"><img src="assets/img/icons/plus.svg" alt="img" class="me-1">Add New</a>
        </div> *@
    </div>
    <!-- /product list -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive table-scrollable">
                <div class="row">
			        <div class="col-lg col-sm-6 col-12">
				        <div class="form-group">
                            <label>Periode</label>
                            <div class="row">
                                <div class="col-lg-10 col-sm-10 col-10">
                                    <select class="form-control" @onchange="SelectedCutoff">
                                        @foreach (var cutoff in PayrollCutoffs)    
                                        {
                                            if (!dateAndCutoffId.ContainsKey(cutoff.PayrollDate.ToString("dd/MM/yyyy"))) 
                                            {
                                                dateAndCutoffId.Add(cutoff.PayrollDate.ToString("dd/MM/yyyy"), cutoff.ID);
                                            }

                                            if(cutoff.ID == SelectedCutoffId)
                                            {
                                                <option selected="selected" value="@cutoff.PayrollDate.ToString("dd/MM/yyyy")">@cutoff.PayrollPeriode</option>
                                            }
                                            else
                                            {
                                                <option value="@cutoff.PayrollDate.ToString("dd/MM/yyyy")">@cutoff.PayrollPeriode</option>
                                            }                                            
                                        }
                                    </select>
                                </div>
                            </div>
				        </div>
			        </div>			   
                    <div class="col-lg col-sm-6 col-12">
                        <div class="form-group">
                            <label>Karyawan</label>
                            <div class="row">
                                <div class="col-lg-10 col-sm-10 col-10">
                                    <select class="form-control" @onchange="SelectedKaryawan">
                                        @foreach (var karyawan in DaftarKaryawan)
                                        {
                                            <option value="@karyawan.EmployeeId">@karyawan.EmployeeName</option>
                                        }
                                        
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    @* <div class="col-lg-1 col-sm-12 col-12">
				        <div class="form-group" style="margin-top:20px;">
					        <Loading IsLoading="isProcessing">
						        <a class="btn btn-filters ms-auto" @onclick="()=>LoadDataAbsensi()"><img src="assets/img/icons/search-whites.svg" alt="img" /></a>
					        </Loading>
				        </div>
			        </div> *@
		        </div>
            </div>
        </div>
    </div>
    <!-- /product list -->

    <div class="card">
        <div class="card-body">
            @{
                if (SelectedEmployee != null)
                {
                    var countMasuk = 0;
                    var alpha = 0;
                    foreach (var item in detailAttendances)
                    {
                        var groupByDate = item.GroupBy(x => x.Date.Date).ToList();
                        PeriodeDatesAlpha = new List<DateTime>();
                        PeriodeDatesAlpha.AddRange(PeriodeDates);
                        foreach (var gbd in groupByDate)
                        {
                            if (gbd.Count() >= 2)
                            {
                                countMasuk++;
                            }

                            var masukPerHari = _attendance.GetAttendanceListByDateAndEmployeeId(SelectedEmployee.EmployeeId, gbd.Key).Count;
                            PeriodeDatesAlpha.Remove(gbd.Key);
                            if (masukPerHari < 2)
                            {
                                //check table libur
                                var adaIjin = _hr.GetPerijinanByEmployeeIDAndDate(SelectedEmployee.EmployeeId, gbd.Key);
                                if (adaIjin.Count == 0)
                                {
                                    alpha++;
                                }
                            }
                        }
                    }
                    decimal totalGaji = SelectedEmployee.DailyWage * (decimal)countMasuk;
                    decimal cicilan = 0;
                    decimal potonganNonCicilan = 0;
                    decimal tambahanGaji = 0;
                    decimal tunjanganTetap = SelectedEmployee.Tunjangan;
                    int hariTerlambat = 0;
                    DateTime tanggalMulaiKerja = SelectedEmployee.JoiningDate;
                    decimal gajiNonPremi = 0;

                    //calculate tunjangan hari kerja
                    decimal dailyTunjangan = SelectedEmployee.Tunjangan / 365; //rata2 hari dalam sebulan 30                                
                    DateTime endDate = DateTime.Now;
                    // Calculate the difference
                    TimeSpan difference = endDate - tanggalMulaiKerja;
                    // Get the total number of days
                    int daysBetween = difference.Days;
                    tunjanganTetap = SelectedEmployee.Tunjangan; // (decimal)daysBetween * dailyTunjangan;

                    // hitung hari terlambat
                    var listAttendances = _attendance.GetAttendanceCurrentPeriodeByEmployeeIdSync(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                    TimeSpan timeToCompare = new TimeSpan(6, 30, 59);
                    var jumlahTerlambat = listAttendances.OrderBy(x => x.Date)
                        .GroupBy(dt => dt.Date.Date)
                        .Select(g => g.Min(dt => dt.Date))
                        .ToList();
                    var jumlahTerlambatCount = 0;
                    foreach (DateTime kedatangan in jumlahTerlambat)
                    {
                        if (kedatangan.Hour == 6)
                        {
                            if (kedatangan.Minute > 30)
                            {
                                jumlahTerlambatCount++;
                            }
                        }
                        else if (kedatangan.Hour > 6)
                        {
                            jumlahTerlambatCount++;
                        }
                    }

                    var perijinanKaryawan = _hr.GetPerijinanByEmployeeIDInPeriodePayroll(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                    var libur = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("LIBUR")).DistinctBy(x => x.ForDate.Date).Count();
                    var ijin = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("IJIN")).DistinctBy(x => x.ForDate.Date).Count();
                    var sakit = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("SAKIT")).DistinctBy(x => x.ForDate.Date).Count();
                    var setengahHari = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("SETENGAH HARI")).DistinctBy(x => x.ForDate.Date).Count();
                    var ijinLembur = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("LEMBUR")).DistinctBy(x => x.ForDate.Date).Count();
                    decimal premi = 0;
                    decimal gajiBersih = 0;
                    var listPotongan = _hr.GetByCurrentMonthYearAndEmployeeId(SelectedEmployee.EmployeeId, SelectedCutoffTo.Month, SelectedCutoffTo.Year);
                    var listPenalty = _hr.GetPenaltyByCurrentMonthYearAndEmployeeId(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                    var listBonus = listPenalty.Where(x => x.IsPenalty == false).ToList();
                    listPenalty = listPenalty.Where(x => x.IsPenalty == true).ToList();

                    var totalHariLembur = listAttendances
                                            .Where(record => record.Date.TimeOfDay > new TimeSpan(16, 15, 0))
                                            .ToList();

                    int hariDinasLuar = 0;
                    decimal rpLembur = 0;

                    var matchingRecords = totalHariLembur
                        .Where(record => perijinanKaryawan
                        .Where(x => x.SubmittedFor.Equals("LEMBUR")).DistinctBy(x => x.ForDate.Date)
                        .Any(perijinan => perijinan.ForDate.Date == record.Date.Date))
                        .ToList();

                    var totalMenitLembur = matchingRecords
                        .Where(record => record.Date.TimeOfDay > new TimeSpan(16, 15, 0)) // Filter records after 16:15
                        .Select(record => (int)(record.Date.TimeOfDay - new TimeSpan(16, 15, 0)).TotalMinutes) // Get minutes difference
                        .Sum();

                    rpLembur = (SelectedEmployee.DailyWage / (decimal)480) * (decimal)totalMenitLembur;

                    hariDinasLuar = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("DINAS")).Count();

                    if (PeriodDaysCount > (countMasuk + alpha + libur + ijin + sakit))
                    {
                        alpha = PeriodDaysCount - (countMasuk + alpha + libur + ijin + sakit);
                    }

                    decimal potonganSetengahHari = 0;
                    if (setengahHari > 0)
                    {
                        potonganSetengahHari = potonganSetengahHari + (SelectedEmployee.DailyWage / 2);
                    }

                    if (listPotongan.Count > 0)
                    {
                        foreach (var pt in listPotongan)
                        {
                            cicilan = cicilan + pt.RP_POTONGAN;
                        }
                    }

                    if (listPenalty.Count > 0)
                    {
                        foreach (var penalty in listPenalty)
                        {
                            potonganNonCicilan = potonganNonCicilan + penalty.PenaltyAmount;
                        }
                    }

                    if (listBonus.Count > 0)
                    {
                        foreach (var bonus in listBonus)
                        {
                            tambahanGaji = tambahanGaji + bonus.PenaltyAmount;
                        }
                    }

                    // if (libur <= 3 && ijin == 0 && alpha == 0)
                    // {
                    //     premi = totalGaji * (decimal)0.15;
                    //     gajiBersih = totalGaji + premi;
                    // }
                    // else
                    // {
                    //     gajiBersih = totalGaji;
                    // }

                    int lamaKerja = _hr.GetMasaKerja(SelectedEmployee.JoiningDate);
                    decimal prosentasiPremi = _hr.GetProsentasePremi(lamaKerja) / 100;

                    countMasuk = countMasuk + hariDinasLuar;

                    if (countMasuk <= 27)
                    {
                        totalGaji = (SelectedEmployee.DailyWage * ((decimal)1 + (decimal)prosentasiPremi) * (decimal)countMasuk);
                    }
                    else
                    {
                        totalGaji = (SelectedEmployee.DailyWage * ((decimal)1 + (decimal)prosentasiPremi) * (decimal)27) + (SelectedEmployee.DailyWage * ((decimal)countMasuk - (decimal)27));
                    }

                    gajiNonPremi = SelectedEmployee.DailyWage * (decimal)countMasuk;
                    decimal rpPremi = totalGaji - gajiNonPremi;

                    foreach(DateTime alphaDate in PeriodeDatesAlpha)
                    {
                        if (alphaDate > SelectedEmployee.JoiningDate.Date && alphaDate > SelectedCutoffFrom.Date)
                        {
                            var adaIjin = perijinanKaryawan.Where(x => x.ForDate.Date == alphaDate.Date).Any();
                            if(!adaIjin)
                            {
                                alpha++;
                            }
                        }
                    }

                    // Apabila ada alpha, maka tidak dapat premi
                    if(alpha > 0)
                    {
                        totalGaji = gajiNonPremi;
                        rpPremi = 0;
                    }

                    int totalLiburIjin = libur + ijin;
                    if(totalLiburIjin > 3)
                    {
                        totalGaji = gajiNonPremi;
                        rpPremi = 0;
                    }

                    gajiBersih = totalGaji - SelectedEmployee.BPJS_KES - SelectedEmployee.BPJS_TK - cicilan - potonganNonCicilan + potonganSetengahHari + tambahanGaji + tunjanganTetap + rpLembur;
                    gajiKaryawanTotal = gajiKaryawanTotal + gajiBersih;

                    int totalHours = totalMenitLembur / 60; // Get the whole number of hours
                    int remainingMinutes = totalMenitLembur % 60;

                    <div class="table-responsive table-scrollable">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Karyawan</th>
                                    <th>Harian</th>
                                    <th>BPJS Kes</th>
                                    <th>BPJS TK</th>
                                    <th>Premi</th>
                                    <th>Tambahan</th>
                                    <th>Tunjangan</th>
                                    <th>M</th>
                                    <th>A</th>
                                    <th>I</th>
                                    <th>S</th>
                                    <th>1/2</th>
                                    <th>Lembur</th>
                                    <th>Waktu Lembur</th>
                                    <th>L</th>
                                    <th>DL</th>
                                    <th>Telat</th>
                                    <th>Cicilan</th>
                                    <th>Potongan</th>
                                    <th>No. Rek</th>
                                    <th>Total Gaji</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>@(SelectedEmployee != null ? SelectedEmployee.EmployeeName : "")</td>
                                    <td>@string.Format("{0:n0}", SelectedEmployee.DailyWage)</td>
                                    <td>@string.Format("{0:n0}", SelectedEmployee.BPJS_KES)</td>
                                    <td>@string.Format("{0:n0}", SelectedEmployee.BPJS_TK)</td>
                                    <td>@string.Format("{0:n0}", rpPremi)</td>
                                    <td>@string.Format("{0:n0}", tambahanGaji)</td>
                                    <td>@string.Format("{0:n0}", tunjanganTetap)</td>

                                    <td>@countMasuk</td>
                                    <td>@alpha</td>
                                    <td>@ijin</td>
                                    <td>@sakit</td>
                                    <td>@setengahHari</td>
                                    <td>@ijinLembur</td>
                                    <td>@totalHours Jam @remainingMinutes Menit</td>
                                    <td>@libur</td>
                                    <td>@hariDinasLuar</td>
                                    <td>@jumlahTerlambatCount</td>
                                    <td>@string.Format("{0:n0}", cicilan)</td>
                                    <td>@string.Format("{0:n0}", potonganNonCicilan + potonganSetengahHari)</td>
                                    <td>@SelectedEmployee.BankAccount</td>
                                    <td>@string.Format("{0:n0}", gajiBersih)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
            }
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive table-scrollable">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Tanggal</th>
                            <th>Pagi</th>
                            <th>Sore</th>
                            <th>Status Absensi</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (groupedResults != null)
                        {
                            @foreach (var item in PeriodeDates)
                            {
                                var attendanceItem = groupedResults.Where(x => x.Date.Date == item.Date).FirstOrDefault();
                                var adaIjin = _hr.GetPerijinanByEmployeeIDAndDate(SelectedEmployee.EmployeeId, item.Date);
                                var keterangan = "";
                                var trStyle = "";
                                var startHour = "";
                                var endHour = "";

                                if (attendanceItem != null)
                                {
                                    keterangan = "Absen Sudah Lengkap";//string.Format("{0:n0}", SelectedEmployee.DailyWage);

                                    if (attendanceItem.StartTime.Hour < 12)
                                    {
                                        startHour = attendanceItem.StartTime.ToString("HH:mm");

                                        if (attendanceItem.StartTime.Hour == 6)
                                        {
                                            if (attendanceItem.StartTime.Minute > 30)
                                            {
                                                keterangan = "TERLAMBAT";
                                                trStyle = "background-color:#ffd6d6; color:#000 !important; font-weight:bold !important;";
                                            }
                                        }
                                        else if (attendanceItem.StartTime.Hour > 6)
                                        {
                                            keterangan = "TERLAMBAT";
                                            trStyle = "background-color:#ffd6d6; color:#000 !important; font-weight:bold !important;";
                                        }
                                    }

                                    if (attendanceItem.StartTime == attendanceItem.EndTime)
                                    {
                                        if (attendanceItem.EndTime.Hour > 15)
                                        {
                                            endHour = attendanceItem.EndTime.ToString("HH:mm");
                                        }

                                        trStyle = "background-color:#e86b6b; color:#fff !important; font-weight:bold !important;";
                                        if (attendanceItem.StartTime.Date == DateTime.Now.Date)
                                        {
                                            keterangan = "JANGAN LUPA ABSEN";
                                        }
                                        else if (attendanceItem.StartTime.Date < DateTime.Now.Date)
                                        {
                                            keterangan = "ALPHA";
                                        }
                                    }
                                    else
                                    {
                                        if(startHour == "") startHour = attendanceItem.StartTime.ToString("HH:mm");
                                        endHour = attendanceItem.EndTime.ToString("HH:mm");
                                    }
                                }
                                else
                                {
                                    if (adaIjin.Count == 0)
                                    {
                                        keterangan = "ALPHA";
                                        trStyle = "background-color:#e86b6b; color:#fff !important; font-weight:bold !important;";
                                    }
                                    else
                                    {
                                        keterangan = adaIjin[0].SubmittedFor;
                                        switch (keterangan)
                                        {
                                            case "LIBUR":
                                                trStyle = "background-color:#4e56c7; color:#fff !important; font-weight:bold !important;";
                                                break;
                                            case "IJIN":
                                                trStyle = "background-color:#4e56c7; color:#fff !important; font-weight:bold !important;";
                                                break;
                                            case "SAKIT":
                                                trStyle = "background-color:#fce808; color:#000 !important; font-weight:bold !important;";
                                                break;
                                            case "SETENGAH HARI":
                                                trStyle = "background-color:#b2d613; color:#000 !important; font-weight:bold !important;";
                                                break;
                                        }
                                    }
                                }

                                <tr style="@trStyle">
                                    <td style="@trStyle">@item.Date.ToString("dd/MM/yyyy")</td>
                                    
                                    @if (attendanceItem != null) 
                                    {
                                        <td style="@trStyle">
                                            @startHour
                                        </td style="@trStyle">
                                        <td style="@trStyle">@endHour</td>
                                        <td style="@trStyle">@keterangan</td>                                  
                                    }
                                    else
                                    {
                                        <td colspan="3" style="@trStyle">@keterangan</td>
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    IList<DailyAttendanceMaster> listModel;
    DateTime SelectedCutoffFrom;
    DateTime SelectedCutoffTo;
    Employee SelectedEmployee = null;
    UserMaster modelUser = new UserMaster();
    Employee modelEmployee = new Employee();
    DateTime LastPayrollCutoffDate;
    List<DateTime> PeriodeDates = new List<DateTime>();
    List<DateTime> PeriodeDatesAlpha = new List<DateTime>();
    decimal gajiKaryawanTotal = 0;
    int PeriodDaysCount = 0;
    List<PayrollCutoff> PayrollCutoffs = new List<PayrollCutoff>();
    decimal DailyWage;
    List<AbsensiData> groupedResults = new List<AbsensiData>();
    List<Employee> DaftarKaryawan = new List<Employee>();
    List<DailyAttendanceMaster> absensiAllEmployeePerPeriode = new List<DailyAttendanceMaster>();
    List<IGrouping<int, DailyAttendanceMaster>> detailAttendances = new List<IGrouping<int, DailyAttendanceMaster>>();
    private bool dense = true;
    private bool hover = true;
    private string searchString1 = "";
    string strMenu = "Admin Laporan Absensi Karyawan";
    private bool visible;
    private MudBlazor.DialogOptions dialogOptions = new() { FullWidth = true };
    string ShowDialogue;
    DateTime dtFromDate;
    DateTime dtToDate;
    private bool isProcessing = true;
    Dictionary<string, int> dateAndCutoffId = new Dictionary<string, int>();
    int SelectedCutoffId = 0;
    DateTime LastPayrollCutoff;
    DateTime PayrollDate;
    bool payrollAlreadyProcessed = false;

    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        string userName = strRole.FindFirst(ClaimTypes.Name).Value;
        modelUser = await _user.UserProfile(userName);
        modelEmployee = await _employee.GetbyUserId(modelUser.UserId);
        DailyWage = modelEmployee.DailyWage;

        await LoadData();
        // if (strShow.ShowAction == true)
        // {
        //     await LoadData();
        // }
        // else
        // {
        //     navigation.NavigateTo("/app/dashboard");
        //     Snackbar.Add("You dont have to privilege..", Severity.Error);
        // }
    }

    private async Task LoadData()
    {
        PeriodeDates = new List<DateTime>();
        DaftarKaryawan = await _employee.GetAllEmployeeActive();
        DaftarKaryawan = DaftarKaryawan.OrderBy(x => x.EmployeeName).ToList();
        if (SelectedEmployee == null)
        {
            SelectedEmployee = DaftarKaryawan.FirstOrDefault();
        }
        var lastPayrollCutoff = await _attendance.GetLastPayrollCutoff();

        PayrollCutoffs = await _attendance.GetPayrollCutoffs();        
        PayrollCutoffs = PayrollCutoffs.Where(x => x.ID >= 6).ToList();
        var now = DateTime.Now;

        if(lastPayrollCutoff.RealPayrollDate.Date < now.Date)
        {
            SelectedCutoffId = 0;
            SelectedCutoffFrom = lastPayrollCutoff.RealPayrollDate;
            SelectedCutoffTo = DateTime.Now;
            LastPayrollCutoff = SelectedCutoffFrom;
            LastPayrollCutoffDate = SelectedCutoffTo;
            PayrollCutoffs.Add(new PayrollCutoff
            {
                ID = 0,
                PayrollDateStart = SelectedCutoffFrom,
                PayrollDate = SelectedCutoffTo,
                PayrollPeriode = "Periode Terkini"
            });
        }
        else
        {
            SelectedCutoffId = lastPayrollCutoff.ID;
            SelectedCutoffFrom = lastPayrollCutoff.PayrollDateStart;
            SelectedCutoffTo = lastPayrollCutoff.PayrollDate;
            LastPayrollCutoff = SelectedCutoffFrom;
            LastPayrollCutoffDate = SelectedCutoffTo;
            PayrollDate = lastPayrollCutoff.RealPayrollDate;
            payrollAlreadyProcessed = _context.Payroll.FirstOrDefault(x => x.CutoffID == SelectedCutoffId) != null;
        }

        await ReloadData();

        isProcessing = false;

        StateHasChanged();
    }  

    private async Task ReloadData()
    {        
        PeriodeDates = new List<DateTime>();
        DateTime endDate = SelectedCutoffTo; // Today's date
                                             // Iterate from the start date to the end date
        DateTime currentDate = SelectedCutoffFrom;
        while (currentDate <= endDate)
        {
            PeriodeDates.Add(currentDate);
            currentDate = currentDate.AddDays(1); // Move to the next day
        }
        PeriodeDatesAlpha.AddRange(PeriodeDates);

        listModel = new List<DailyAttendanceMaster>();
        listModel = _context.DailyAttendanceMaster.Where(x => x.EmployeeID == SelectedEmployee.EmployeeId && x.Date.Date >= SelectedCutoffFrom.Date && x.Date.Date <= LastPayrollCutoffDate.Date).ToList();
        //await _attendance.GetAttendanceCurrentPeriodeByEmployeeId(SelectedEmployee.EmployeeId, SelectedCutoffFrom.Date, LastPayrollCutoffDate.Date);
        detailAttendances = listModel.GroupBy(x => x.EmployeeID).OrderBy(x => x.Key).ToList();
        groupedResults = listModel.OrderBy(x => x.Date)
            .GroupBy(dt => dt.Date.Date)
            .Select(g => new AbsensiData
                {
                    Date = g.Key,
                    StartTime = g.Min(dt => dt.Date),
                    EndTime = g.Max(dt => dt.Date),
                    DailyWage = DailyWage
                })
            .ToList();
    }

    public class AbsensiData
    {
        public DateTime Date { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public decimal DailyWage { get; set; }
    }

    private async Task SelectedCutoff(ChangeEventArgs e)
    {
        // if(e.Value.ToString() == "31/12/2024")
        // {
        //     var selectedDate = DateTime.ParseExact(e.Value.ToString(), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
        //     SelectedCutoffFrom = DateTime.ParseExact("29/11/2024", "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
        //     LastPayrollCutoffDate = DateTime.ParseExact("30/12/2024", "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
        //     SelectedCutoffTo = LastPayrollCutoffDate; 
        //     groupedResults = new List<AbsensiData>();
        //     await ReloadData();
        // }        
        //var selectedDate = DateTime.ParseExact(e.Value.ToString(), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
        isProcessing = true;

        SelectedCutoffId = dateAndCutoffId[e.Value.ToString()];

        if(SelectedCutoffId > 0) 
        {
            // DateTime firstDayOfMonth = new DateTime(selectedDate.Year, selectedDate.Month, 1);
            // DateTime lastDayOfMonth = firstDayOfMonth.AddMonths(1);
            // SelectedCutoffFrom = firstDayOfMonth;
            // LastPayrollCutoffDate = lastDayOfMonth.AddSeconds(-1);

            payrollAlreadyProcessed = (_context.Payroll.FirstOrDefault(x => x.CutoffID == SelectedCutoffId)) != null;
            var payrollCutoff = _context.PayrollCutoff.FirstOrDefault(x => x.ID == SelectedCutoffId);
            LastPayrollCutoff = payrollCutoff.PayrollDateStart;
           
            SelectedCutoffFrom = payrollCutoff.PayrollDateStart;
            SelectedCutoffTo = payrollCutoff.PayrollDate;
            LastPayrollCutoffDate = payrollCutoff.PayrollDate;
            PayrollDate = payrollCutoff.RealPayrollDate;
            await ReloadData();
        }
        else
        {
            // LastPayrollCutoffDate = DateTime.ParseExact(e.Value.ToString(), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            // SelectedCutoffFrom = new DateTime(LastPayrollCutoffDate.Year, LastPayrollCutoffDate.Month, 1);
            var lastPayroll = await _attendance.GetLastPayrollCutoff();
            SelectedCutoffId = 0;
            SelectedCutoffFrom = lastPayroll.RealPayrollDate;
            SelectedCutoffTo = DateTime.Now;
            LastPayrollCutoff = SelectedCutoffFrom;
            LastPayrollCutoffDate = SelectedCutoffTo;
            payrollAlreadyProcessed = false;
            await ReloadData();
        }
        
        isProcessing = false;

        StateHasChanged();
    }

    private async Task SelectedKaryawan(ChangeEventArgs e)
    {
        groupedResults = new List<AbsensiData>();
        SelectedEmployee = await _employee.GetbyId(Convert.ToInt32(e.Value.ToString()));
        await ReloadData();
    }

    private async Task LoadDataAbsensi()
    {
        
    }
}
