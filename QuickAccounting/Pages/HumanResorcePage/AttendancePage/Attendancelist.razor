@page "/app/attendance"
@inject IAttendance _attendance
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>Attendance</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Attendance</h4>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Date</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <RadzenDatePicker @bind-Value=@master.Date DateFormat="d" Change="()=>ChangeDate()" Class="w-100" />
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Employee Code</th>
                            <th>Employee Name</th>
                            <th>Status</th>
                    </tr>
                    </thead>
               <tbody>
                    @if (listModel != null)
                    {
                        @foreach (var item in listModel)
                        {
                            <tr>
                                <td>@item.EmployeeCode</td>
                                        <td>@item.EmployeeName</td>
                                <td>
                                    <select @bind="@item.status">
                                        @foreach(var item1 in listStatus)
                                        {
                                        <option value="@item1.StatusPresent">@item1.StatusPresent</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
            <br /> <br />
            <div class="row">
                <div class="col-lg-12">
                    <button @onclick="@Save" class="btn btn-submit me-2">Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- /product list -->
</div>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    DailyAttendanceMaster master = new DailyAttendanceMaster();
    IList<DailyAttendanceView> listModel;
    DailyAttendanceDetails details = new DailyAttendanceDetails();
    List<StatusInfo> listStatus = new List<StatusInfo>();
    string strMenu = "Human Resources";
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }
    private async Task LoadData()
    {
        // listStatus.Add(new StatusInfo { StatusPresent = "Absent" });
        // listStatus.Add(new StatusInfo { StatusPresent = "Present" });
        // master.Date = DateTime.UtcNow;
        // String sDate = DateTime.UtcNow.ToString();
        // DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));

        // String dy = datevalue.Day.ToString();
        // String mn = datevalue.Month.ToString();
        // String yy = datevalue.Year.ToString();
        // master.Narration = dy + mn + yy;
        // listModel = _attendance.DailyAttendanceDetailsSearchGridFill();
        // foreach (var item in listModel)
        // {
        //     DailyAttendanceDetails statuspaidunpaid = new DailyAttendanceDetails();
        //     statuspaidunpaid = await _attendance.GetAttandanceDetails(master.Narration, item.EmployeeId);
        //     if (statuspaidunpaid != null)
        //     {
        //         details.Status = statuspaidunpaid.Status;
        //         details.DailyAttendanceDetailsId = statuspaidunpaid.DailyAttendanceDetailsId;
        //         var myTodos = listModel.FirstOrDefault(x => x.DailyAttendanceDetailsId == item.DailyAttendanceDetailsId && x.EmployeeId == item.EmployeeId);
        //         myTodos.status = details.Status;
        //         myTodos.DailyAttendanceDetailsId = details.DailyAttendanceDetailsId;
        //         details.Status = "Absent";
        //         details.DailyAttendanceDetailsId = 0;
        //     }
        //     else
        //     {
        //         var myTodos = listModel.FirstOrDefault(x => x.DailyAttendanceDetailsId == item.DailyAttendanceDetailsId && x.EmployeeId == item.EmployeeId);
        //         myTodos.status = "Absent";
        //         myTodos.DailyAttendanceDetailsId = 0;
        //     }

        // }
        StateHasChanged();
    }
    private async Task ChangeDate()
    {
        //listStatus.Add(new StatusInfo { StatusPresent = "Absent" });
        //listStatus.Add(new StatusInfo { StatusPresent = "Present" });
        // String sDate = master.Date.ToString();
        // DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));

        // String dy = datevalue.Day.ToString();
        // String mn = datevalue.Month.ToString();
        // String yy = datevalue.Year.ToString();
        // master.Narration = dy + mn + yy;
        // listModel = _attendance.DailyAttendanceDetailsSearchGridFill();
        // foreach (var item in listModel)
        // {
        //     DailyAttendanceDetails statuspaidunpaid = new DailyAttendanceDetails();
        //     statuspaidunpaid = await _attendance.GetAttandanceDetails(master.Narration, item.EmployeeId);
        //     if (statuspaidunpaid != null)
        //     {
        //         details.Status = statuspaidunpaid.Status;
        //         details.DailyAttendanceDetailsId = statuspaidunpaid.DailyAttendanceDetailsId;
        //         var myTodos = listModel.FirstOrDefault(x => x.DailyAttendanceDetailsId == item.DailyAttendanceDetailsId && x.EmployeeId == item.EmployeeId);
        //         myTodos.status = details.Status;
        //         myTodos.DailyAttendanceDetailsId = details.DailyAttendanceDetailsId;
        //         details.Status = string.Empty;
        //         details.DailyAttendanceDetailsId = 0;
        //     }
        //     else
        //     {
        //         //details.DailyAttendanceDetailsId = statuspaidunpaid.DailyAttendanceDetailsId;
        //         var myTodos = listModel.FirstOrDefault(x => x.DailyAttendanceDetailsId == item.DailyAttendanceDetailsId && x.EmployeeId == item.EmployeeId);
        //         myTodos.status = "Absent";
        //         myTodos.DailyAttendanceDetailsId = 0;
        //     }

        // }
        StateHasChanged();
    }
    private async void Save()
    {

        
        //     //decimal decResult = _attendance.HolidaySettings(master.Date);
        //     //if (decResult != 1)
        //     //{
        //     master.AddedDate = DateTime.UtcNow;
        //     foreach (var item in listModel)
        //     {
        //         DailyAttendanceDetails details = new DailyAttendanceDetails();
        //         if(item.status == null)
        //         {
        //             details.Status = "Absent";
        //         }
        //         else
        //         {
        //             details.Status = item.status;
        //         }
        //         details.Narration = string.Empty;
        //         details.EmployeeId = item.EmployeeId;
        //         master.listOrder.Add(details);
        //     }
        //     var result = await _attendance.Save(master);

        //     if (result > 0)
        //     {
        //         Snackbar.Add("Attendance Created Successfully.", Severity.Success);
        //         await LoadData();
        //         navigation.NavigateTo("/app/attendancelist");
        //         StateHasChanged();
        //         }
        //         else
        //         {
        //             Snackbar.Add("Transaction Failed.", Severity.Error);
        //         }
        //     //}
        // }
    }
}
