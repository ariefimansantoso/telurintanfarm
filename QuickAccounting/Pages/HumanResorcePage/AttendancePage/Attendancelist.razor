@page "/app/attendance"
@inject IAttendance _attendance
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject IUser _user
@inject IEmployee _employee
@inject IHRServices _hr;
@inject IExcelService _excelService;

@attribute [Authorize]
<PageTitle>Admin - Laporan Absensi dan Gaji Karyawan</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Admin - Laporan Absensi dan Gaji Karyawan</h4>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Periode</label>                       
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <select class="form-control" @onchange="SelectedCutoff">
                                    @foreach (var cutoff in PayrollCutoffs)
                                    {
                                        <option value="@cutoff.PayrollDate.ToString(" dd /MM/yyyy")">@cutoff.PayrollPeriode</option>
                                    }                                    
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Total Gaji</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <span style="font-size:36px; font-weight:bold;">                                    
                                    @string.Format("{0:n0}", gajiKaryawanTotal)
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">   
                        <label>&nbsp;</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                @* <input type="button" class="btn btn-primary" @onclick="(e => ExportList())" value="Unduh Payroll Excel" />&nbsp;&nbsp;<input type="button" class="btn btn-primary" @onclick="(e => ExportListWord())" value="Unduh Payroll Word" /> *@
                                <a class="btn btn-primary" href="payroll/Payroll_2024_10.xlsx">Unduh Payroll Excel</a>&nbsp;&nbsp;<a class="btn btn-primary" href="payroll/payroll_bank-SEPTEMBER-2024.docx">Unduh Payroll Word</a>
                            </div>
                        </div>
                    </div>
                </div>               
                </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Karyawan</th>
                        <th>Harian</th>
                        <th>BPJS Kes</th>
                        <th>BPJS TK</th>
                        <th>Premi</th>
                        <th>Lembur</th>
                        <th>Tunjangan</th>
                        <th>M</th>
                        <th>A</th>
                        <th>I</th>
                        <th>S</th>
                        <th>L</th>
                        <th>Cicilan</th>
                        <th>Potongan</th>
                        <th>No. Rek</th>
                        <th>Total Gaji</th>
                    </tr>
                    </thead>
               <tbody>
                        @if (detailAttendances != null)
                        {
                            gajiKaryawanTotal = 0;
                            payrollExcel = new List<PayrollExcel>();
                            int no = 1;
                            @foreach (var item in detailAttendances)
                            {
                                
                                var employee = activeEmployees.FirstOrDefault(x => x.EmployeeId == item.Key);
                                var countMasuk = 0;
                                var groupByDate = item.GroupBy(x => x.Date.Date).ToList();
                                var alpha = 0;
                                foreach(var gbd in groupByDate)
                                {
                                    if(gbd.Count() >= 2)
                                    {
                                        countMasuk++;
                                    }

                                    var masukPerHari = _attendance.GetAttendanceListByDateAndEmployeeId(employee.EmployeeId, gbd.Key).Count;
                                    if(masukPerHari < 2)
                                    {
                                        //check table libur
                                        var adaIjin = _hr.GetPerijinanByEmployeeIDAndDate(employee.EmployeeId, gbd.Key);
                                        if(adaIjin.Count == 0)
                                        {
                                            alpha++;
                                        }
                                    }
                                }
                                decimal totalGaji = employee.DailyWage * (decimal)countMasuk;
                                decimal cicilan = 0;
                                decimal potonganNonCicilan = 0;
                                decimal tunjangan = modelEmployee.Tunjangan;
                                var perijinanKaryawan = _hr.GetPerijinanByEmployeeIDInPeriodePayroll(employee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                                var libur = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("LIBUR")).Count();
                                var ijin = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("IJIN")).Count();
                                var sakit = perijinanKaryawan.Where(x => x.SubmittedFor.Equals("SAKIT")).Count();
                                decimal premi = 0;
                                decimal gajiBersih = 0;
                                var listPotongan = _hr.GetByCurrentMonthYearAndEmployeeId(employee.EmployeeId, LastPayrollCutoff.Month, 2024);
                                var listPenalty = _hr.GetPenaltyByCurrentMonthYearAndEmployeeId(employee.EmployeeId, SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
                                decimal lembur = employee.Lembur;

                                if (PeriodDaysCount > (countMasuk + alpha + libur + ijin + sakit))
                                {
                                    alpha = PeriodDaysCount - (countMasuk + alpha + libur + ijin + sakit);
                                }

                                if(listPotongan.Count > 0)
                                {
                                    foreach(var pt in listPotongan)
                                    {
                                        cicilan = cicilan + pt.RP_POTONGAN;
                                    }
                                }

                                if(listPenalty.Count > 0)
                                {
                                    foreach(var penalty in listPenalty)
                                    {
                                        potonganNonCicilan = potonganNonCicilan + penalty.PenaltyAmount;
                                    }
                                }

                                if(libur <= 3 && ijin == 0 && alpha == 0)
                                {
                                    premi = totalGaji * (decimal)0.15;
                                    gajiBersih = totalGaji + premi;
                                }
                                else
                                {
                                    gajiBersih = totalGaji;
                                }

                                gajiBersih = gajiBersih - employee.BPJS_KES - employee.BPJS_TK - cicilan - potonganNonCicilan + lembur;
                                gajiKaryawanTotal = gajiKaryawanTotal + gajiBersih;
                                if (employee.BankAccount != "0" && employee.BankAccount != "")
                                {
                                    payrollExcel.Add(new PayrollExcel
                                    {
                                        No = no,
                                        Karyawan = employee.EmployeeName,
                                        Rekening = employee.BankAccount,
                                        Gaji = gajiBersih
                                    });
                                }

                                <tr>
                                    <td>@(employee != null ? employee.EmployeeName : "")</td>
                                    <td>@string.Format("{0:n0}", employee.DailyWage)</td>
                                    <td>@string.Format("{0:n0}", employee.BPJS_KES)</td>
                                    <td>@string.Format("{0:n0}", employee.BPJS_TK)</td>
                                    <td>@string.Format("{0:n0}", premi)</td>
                                    <td>@string.Format("{0:n0}", lembur)</td>
                                    <td>@string.Format("{0:n0}", tunjangan)</td>
                                    <td>@countMasuk</td>
                                    <td>@alpha</td>
                                    <td>@ijin</td>
                                    <td>@sakit</td>
                                    <td>@libur</td>
                                    <td>@string.Format("{0:n0}", cicilan)</td>
                                    <td>@string.Format("{0:n0}", potonganNonCicilan)</td>
                                    <td>@employee.BankAccount</td>
                                    <td>@string.Format("{0:n0}", gajiBersih)</td>
                                </tr>
                            }
                            <tr>
                                <td colspan="13" style="text-align:right;">
                                    <span style="font-size:36px; font-weight:bold;">
                                        @string.Format("{0:n0}", gajiKaryawanTotal)
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>            
        </div>
    </div>
    <!-- /product list -->
</div>

<script>
    window.JS = {
        SaveAs: function (fileName, byteBase64) {
            byteBase64 = byteBase64.replace(/-/g, '+').replace(/_/g, '/');

            // Convert base64 string to byte array
            const byteCharacters = atob(byteBase64);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });

            // Create a link element and trigger the download
            const link = document.createElement('a');
            const url = window.URL.createObjectURL(blob);
            link.href = url;
            link.download = fileName;
            document.body.appendChild(link);
            link.click();

            // Clean up
            window.URL.revokeObjectURL(url);
            link.remove();
        }
    };
</script>


@code {
        [CascadingParameter]
        public Task<AuthenticationState> authenticationState { get; set; }
        DailyAttendanceMaster master = new DailyAttendanceMaster();
        IList<DailyAttendanceView> listModel;
        DailyAttendanceDetails details = new DailyAttendanceDetails();
        List<StatusInfo> listStatus = new List<StatusInfo>();
        DateTime SelectedCutoffFrom;
        DateTime SelectedCutoffTo;
        decimal gajiKaryawanTotal = 0;
        List<PayrollExcel> payrollExcel = new List<PayrollExcel>();

        UserMaster modelUser = new UserMaster();
        Employee modelEmployee = new Employee();
        DateTime LastPayrollCutoff;
        List<DateTime> PeriodeDates = new List<DateTime>();
        List<PayrollCutoff> PayrollCutoffs = new List<PayrollCutoff>();
        List<Employee> activeEmployees = new List<Employee>();
        List<DailyAttendanceMaster> absensiAllEmployeePerPeriode = new List<DailyAttendanceMaster>();
        List<IGrouping<int, DailyAttendanceMaster>> detailAttendances = new List<IGrouping<int, DailyAttendanceMaster>>();
        int PeriodDaysCount = 0;

        string strMenu = "Admin - Laporan Absensi dan Gaji Karyawan";

    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);

        string userName = strRole.FindFirst(ClaimTypes.Name).Value;
        modelUser = await _user.UserProfile(userName);
        modelEmployee = await _employee.GetbyUserId(modelUser.UserId);

        await LoadData();

        // if (strShow.ShowAction == true)
        // {
        //     await LoadData();
        // }
        // else
        // {
        //     navigation.NavigateTo("/app/dashboard");
        //     Snackbar.Add("You dont have to privilege..", Severity.Error);
        // }
    }

    private async Task LoadData()
    {
        payrollExcel = new List<PayrollExcel>();
        PayrollCutoffs = await _attendance.GetPayrollCutoffs();
        var lastPayroll = await _attendance.GetLastPayrollCutoff();

        SelectedCutoffFrom = lastPayroll.PayrollDateStart;
        SelectedCutoffTo = lastPayroll.PayrollDate;
        LastPayrollCutoff = SelectedCutoffFrom;

        activeEmployees = await _employee.GetAllEmployeeActive();
        absensiAllEmployeePerPeriode = await _attendance.GetAttendanceCurrentPeriodeAllEmployee(SelectedCutoffFrom.Date, SelectedCutoffTo.Date);
        detailAttendances = absensiAllEmployeePerPeriode.GroupBy(x => x.EmployeeID).OrderBy(x => x.Key).ToList();

        DateTime endDate = SelectedCutoffTo.Date; // Today's date
                                                  // Iterate from the start date to the end date
        DateTime currentDate = SelectedCutoffFrom.Date;
        while (currentDate <= endDate)
        {
            PeriodDaysCount++;
            PeriodeDates.Add(currentDate);
            currentDate = currentDate.AddDays(1); // Move to the next day
        }

        StateHasChanged();
    }

    private async Task ExportList()
    {
        var year = DateTime.Now.Year;
        var month = DateTime.Now.Month;
        var fileName = "Payroll_" + year + "_" + month + ".xlsx";
        var excelData = _excelService.ExportListToExcel(payrollExcel, "Sheet1");
        var base64String = Convert.ToBase64String(excelData);
        base64String = base64String.Replace('+', '-').Replace('/', '_').TrimEnd('=');

        await JSRuntime.InvokeVoidAsync("JS.SaveAs", fileName, base64String);
    }

    private async Task ExportListWord()
    {
        var year = DateTime.Now.Year;
        var month = DateTime.Now.Month;
        var fileName = "Payroll_" + year + "_" + month + ".xlsx";
        var excelData = _excelService.ExportListToExcel(payrollExcel, "Sheet1");
        var base64String = Convert.ToBase64String(excelData);
        base64String = base64String.Replace('+', '-').Replace('/', '_').TrimEnd('=');

        await JSRuntime.InvokeVoidAsync("JS.SaveAs", fileName, base64String);
    }

    private async Task ChangeDate()
    {
        //listStatus.Add(new StatusInfo { StatusPresent = "Absent" });
        //listStatus.Add(new StatusInfo { StatusPresent = "Present" });
        // String sDate = master.Date.ToString();
        // DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));

        // String dy = datevalue.Day.ToString();
        // String mn = datevalue.Month.ToString();
        // String yy = datevalue.Year.ToString();
        // master.Narration = dy + mn + yy;
        // listModel = _attendance.DailyAttendanceDetailsSearchGridFill();
        // foreach (var item in listModel)
        // {
        //     DailyAttendanceDetails statuspaidunpaid = new DailyAttendanceDetails();
        //     statuspaidunpaid = await _attendance.GetAttandanceDetails(master.Narration, item.EmployeeId);
        //     if (statuspaidunpaid != null)
        //     {
        //         details.Status = statuspaidunpaid.Status;
        //         details.DailyAttendanceDetailsId = statuspaidunpaid.DailyAttendanceDetailsId;
        //         var myTodos = listModel.FirstOrDefault(x => x.DailyAttendanceDetailsId == item.DailyAttendanceDetailsId && x.EmployeeId == item.EmployeeId);
        //         myTodos.status = details.Status;
        //         myTodos.DailyAttendanceDetailsId = details.DailyAttendanceDetailsId;
        //         details.Status = string.Empty;
        //         details.DailyAttendanceDetailsId = 0;
        //     }
        //     else
        //     {
        //         //details.DailyAttendanceDetailsId = statuspaidunpaid.DailyAttendanceDetailsId;
        //         var myTodos = listModel.FirstOrDefault(x => x.DailyAttendanceDetailsId == item.DailyAttendanceDetailsId && x.EmployeeId == item.EmployeeId);
        //         myTodos.status = "Absent";
        //         myTodos.DailyAttendanceDetailsId = 0;
        //     }

        // }
        StateHasChanged();
    }

    private async void Save()
    {


        //     //decimal decResult = _attendance.HolidaySettings(master.Date);
        //     //if (decResult != 1)
        //     //{
        //     master.AddedDate = DateTime.UtcNow;
        //     foreach (var item in listModel)
        //     {
        //         DailyAttendanceDetails details = new DailyAttendanceDetails();
        //         if(item.status == null)
        //         {
        //             details.Status = "Absent";
        //         }
        //         else
        //         {
        //             details.Status = item.status;
        //         }
        //         details.Narration = string.Empty;
        //         details.EmployeeId = item.EmployeeId;
        //         master.listOrder.Add(details);
        //     }
        //     var result = await _attendance.Save(master);

        //     if (result > 0)
        //     {
        //         Snackbar.Add("Attendance Created Successfully.", Severity.Success);
        //         await LoadData();
        //         navigation.NavigateTo("/app/attendancelist");
        //         StateHasChanged();
        //         }
        //         else
        //         {
        //             Snackbar.Add("Transaction Failed.", Severity.Error);
        //         }
        //     //}
        // }
    }

    private async Task SelectedCutoff(ChangeEventArgs e)
    {
        LastPayrollCutoff = Convert.ToDateTime(e.Value.ToString());
    }

    public class PayrollExcel
    {
        public int No { get; set; }
        public string Karyawan { get; set; }
        public string Rekening { get; set; }
        public decimal Gaji { get; set; }
    }
}
