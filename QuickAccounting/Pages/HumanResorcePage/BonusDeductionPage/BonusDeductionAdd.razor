@page "/app/bonusdeductionadd"
@inject IBonusDeduction _bonusDeduction
@inject ICustomerSupplier _ledger
@inject IInvoiceSetting _setting
@inject IEmployee _emploee
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>Bonus / Deduction </PageTitle>
<div class="content">
					<div class="page-header">
						<div class="page-title">
							<h4>Bonus Deduction Add</h4>
						</div>
					</div>
					<!-- /add -->
					<div class="card">
						<div class="card-body">
							<EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
							<div class="row">
					<div class="col-lg-6 col-sm-6 col-12">
									<div class="form-group">
										<label>Date</label>
							<RadzenDatePicker @bind-Value=@model.Date DateFormat="d" Class="w-100" />
							<ValidationMessage For="@(() => model.Date)" />
									</div>
								</div>
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Employee</label>
							<RadzenDropDown Style="width:100%;" @bind-Value="@model.EmployeeId" Placeholder="Choose Employee" AllowFiltering="true" Data="@(listEmployee)" TextProperty="EmployeeName" ValueProperty="EmployeeId" />
							<ValidationMessage For="@(() => model.EmployeeId)" />
						</div>
					</div>
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Month</label>
							<RadzenDatePicker @bind-Value=@model.Month DateFormat="MMMMyyyy" Class="w-100" Change="()=>ChangeDate()" />
							<ValidationMessage For="@(() => model.Month)" />
						</div>
					</div>
					<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
							<label>Bonus Amount</label>
										<input type="text" @bind="model.BonusAmount" >
							<ValidationMessage For="@(() => model.BonusAmount)" />
									</div>
								</div>
					<div class="col-lg-4 col-sm-6 col-12">
						<div class="form-group">
							<label>Deduction Amount</label>
							<input type="text" @bind="model.DeductionAmount">
							<ValidationMessage For="@(() => model.DeductionAmount)" />
						</div>
					</div>
					
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Narration</label>
							<input type="text" @bind="model.Narration">
							
							<ValidationMessage For="@(() => model.Narration)" />
						</div>
					</div>
								<div class="col-lg-12">
									<button type="submit" class="btn btn-submit me-2">Submit</button>
									<a href="/app/bonusdeduction" class="btn btn-cancel">Cancel</a>
								</div>
								
							</div>
							</EditForm>
						</div>
					</div>
					<!-- /add -->
				</div>
@code {
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	BonusDeduction model = new BonusDeduction();
	IList<EmployeeView> listEmployee;
	InvoiceSetting setting = new InvoiceSetting();
	string monthYear;
	string strMenu = "Human Resources";
	protected override async Task OnInitializedAsync()
	{
		//CheckPriviliagee
		var authState = await authenticationState;
		var strRole = authState.User;
		string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		var strShow = await _privilege.PriviliageCheck(strMenu, strName);
		if (strShow.ShowAction == true)
		{
			await LoadData();
		}
		else
		{
			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("You dont have to privilege..", Severity.Error);
		}
	}
	private async Task LoadData()
	{
		listEmployee = await _emploee.GetAll();
		model.EmployeeId = 0;
		model.Date = DateTime.UtcNow;
		model.BonusAmount = 0;
		model.DeductionAmount = 0;
		model.Narration = string.Empty;
		model.Month = DateTime.UtcNow;
		string strMonth = model.Month.ToString("MMMMyyyy");
		string Month = strMonth.Substring(0, 3);
		string strmonthYear = Convert.ToDateTime(strMonth.ToString()).Year.ToString();
		monthYear = Month + " " + strmonthYear;
		model.YearMonth = monthYear;
		StateHasChanged();
	}
	private async Task ChangeDate()
	{
		string strMonth = model.Month.ToString("MMMMyyyy");
		string Month = strMonth.Substring(0, 3);
		string strmonthYear = Convert.ToDateTime(strMonth.ToString()).Year.ToString();
		monthYear = Month + " " + strmonthYear;
		model.YearMonth = monthYear;
		StateHasChanged();
	}
	private async Task Save()
	{
		var isCheck = await _bonusDeduction.CheckName(model.YearMonth , model.EmployeeId);
		if (isCheck == true)
		{
			Snackbar.Add("Already payment this month.", Severity.Info);
		}
		else
		{
			model.AddedDate = DateTime.UtcNow;
				var result = await _bonusDeduction.Save(model);

				if (result > 0)
				{
					Snackbar.Add("Save Successfully.", Severity.Success);
					StateHasChanged();
				navigation.NavigateTo("/app/bonusdeduction");
				}
				else
				{
					Snackbar.Add("Invalid.", Severity.Error);
					StateHasChanged();
				}
			}
	}
}
