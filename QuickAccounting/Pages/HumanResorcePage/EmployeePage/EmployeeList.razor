@page "/app/employee"
@inject IEmployee _employee
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@inject IPrivilege _privilege
@inject NavigationManager navigation
@inject ApplicationDbContext _db
@attribute [Authorize]
<PageTitle>Employee</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Employee</h4>
            <h6>Manage Employee</h6>
        </div>
        <div class="page-btn">
            <a class="btn btn-primary" style="float:left;" @onclick="DownloadExcel">Download Excel</a>&nbsp;&nbsp;&nbsp;<a class="btn btn-added" style="float:left;margin-left:20px !important;" href="/app/employeeadd"><img src="assets/img/icons/plus.svg" alt="img" class="me-1">Add New</a>
        </div>
    </div>
    <!-- /product list -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive table-scrollable">
                <MudTable Items="@listModel" Dense="@dense" Hover="@hover" Filter="new Func<Employee,bool>(FilterFunc1)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Nama</MudTh>
                        <MudTh>NIK</MudTh>
                        <MudTh>Gaji Harian</MudTh>
                        @* <MudTh>Tunjangan</MudTh>*@                     
                        <MudTh>Rekening</MudTh>
                        <MudTh>No BPJS Kes</MudTh>
                        <MudTh>No BPJS TK</MudTh>
                        @* <MudTh>RP BPJS Kes</MudTh>
                        <MudTh>RP BPJS Kes</MudTh> *@
                        <MudTh>Aktif/Masih Kerja</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.EmployeeId</MudTd>
                        <MudTd DataLabel="Nama">@context.EmployeeName</MudTd>
                        <MudTd DataLabel="NIK">@context.NIK</MudTd>
                        <MudTd DataLabel="GajiHarian">@string.Format("{0:n0}", context.DailyWage)</MudTd>
                        @* <MudTd DataLabel="Tunjangan">@string.Format("{0:n0}", context.Tunjangan)</MudTd> *@
                        <MudTd DataLabel="Rekening">@context.BankAccount</MudTd>
                        <MudTd DataLabel="BPJSKes">@context.ID_BPJS_KES</MudTd>
                        <MudTd DataLabel="BPJSTK">@context.ID_BPJS_TK</MudTd>
                        @* <MudTd DataLabel="RPBPJSKes">@string.Format("{0:n0}", context.BPJS_KES)</MudTd>
                        <MudTd DataLabel="RPBPJSTK">@string.Format("{0:n0}", context.BPJS_TK)</MudTd> *@
                        <MudTd DataLabel="Active">@(context.isActive ? "Ya" : "Tidak")</MudTd>
                        <MudTd DataLabel="">
                                <a class="me-3" href="/app/employeeeditsop/@context.EmployeeId">
                                    SOP dan JobDesc
                                </a>
                            <a class="me-3" href="/app/employeeedit/@context.EmployeeId">
                                <img src="assets/img/icons/edit.svg" alt="img">
                            </a>
                            <a class="me-3 confirm-text" style="cursor:pointer;" @onclick="() =>Delete(context.EmployeeId)">
                                <img src="assets/img/icons/delete.svg" alt="img">
                            </a>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </div>
        </div>
    </div>
    <!-- /product list -->
</div>




    @code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    IList<Employee> listModel;
    private bool dense = true;
    private bool hover = true;
    private string searchString1 = "";
    string strMenu = "Human Resources";
    private bool visible;
    private MudBlazor.DialogOptions dialogOptions = new() { FullWidth = true };
    string ShowDialogue;
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }

    private async Task LoadData()
    {
        listModel = await _employee.GetAllEmployees();
        StateHasChanged();
    }

    private bool FilterFunc1(Employee element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Employee element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.EmployeeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;        
        return false;
    }

    private async Task Delete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var result = await _employee.Delete(id);
            if (result == true)
            {
                await LoadData();
                StateHasChanged();
                Snackbar.Add("Delete Successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
                StateHasChanged();
            }
        }
    }

    private async Task DownloadExcel()
    {
        byte[] excelBytes = null;

        using (var package = new ExcelPackage())
        {
            // Create a new worksheet
            var worksheet = package.Workbook.Worksheets.Add("Employees");

            // Add header row
            var headers = new[]
            {
                "Nama Karyawan", "Tgl Lahir", "Status Pernikahan", "Jenis Kelamin",
                "Alamat", "No Telepon", "No HP", "Email", "Tanggal Masuk", "Aktif", "Gaji Harian", "Tempat Lahir", "NIK",
                "ID BPJS KES", "ID BPJS TK", "No Rekening", "RP BPJS KES", "RP BPJS TK", "Tunjangan"
        };

            for (int i = 0; i < headers.Length; i++)
            {
                worksheet.Cells[1, i + 1].Value = headers[i];
                worksheet.Cells[1, i + 1].Style.Font.Bold = true;
                worksheet.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                worksheet.Cells[1, i + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            }

            // Add data rows
            for (int i = 0; i < listModel.Count; i++)
            {
                var employee = listModel[i];
                var row = i + 2;

                worksheet.Cells[row, 1].Value = employee.EmployeeName;
                worksheet.Cells[row, 2].Value = employee.Dob.ToString("dd/MM/yyyy");
                worksheet.Cells[row, 3].Value = employee.MaritalStatus;
                worksheet.Cells[row, 4].Value = employee.Gender;
                worksheet.Cells[row, 5].Value = employee.Address;
                worksheet.Cells[row, 6].Value = employee.PhoneNumber;
                worksheet.Cells[row, 7].Value = employee.MobileNumber;
                worksheet.Cells[row, 8].Value = employee.Email;
                worksheet.Cells[row, 9].Value = employee.JoiningDate.ToString("dd/MM/yyyy");
                worksheet.Cells[row, 10].Value = employee.isActive ? "Ya" : "Tidak";
                worksheet.Cells[row, 11].Value = employee.DailyWage;
                worksheet.Cells[row, 12].Value = employee.BirthPlace;
                worksheet.Cells[row, 13].Value = employee.NIK;
                worksheet.Cells[row, 14].Value = employee.ID_BPJS_KES;
                worksheet.Cells[row, 15].Value = employee.ID_BPJS_TK;
                worksheet.Cells[row, 16].Value = employee.BankAccount;
                worksheet.Cells[row, 17].Value = employee.BPJS_KES;
                worksheet.Cells[row, 18].Value = employee.BPJS_TK;
                worksheet.Cells[row, 19].Value = employee.Tunjangan;
            }

            // Auto-fit columns
            worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

            excelBytes = package.GetAsByteArray();
        }

        await JSRuntime.InvokeVoidAsync("saveAsFile", $"data-karyawan.xlsx", Convert.ToBase64String(excelBytes));
    }
}
