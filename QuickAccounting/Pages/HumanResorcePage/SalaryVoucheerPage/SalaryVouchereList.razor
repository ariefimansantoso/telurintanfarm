@page "/app/salaryvoucher"
@inject ISalaryVoucher _salaryVoucher
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>Monthly SalaryVoucher</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Monthly SalaryVoucher</h4>
        </div>
        <div class="page-btn">
            <a class="btn btn-added" style="float:left;" href="/app/salaryvoucheradd"><img src="assets/img/icons/plus.svg" alt="img" class="me-1">Add New</a>
        </div>
    </div>
    <!-- /product list -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <MudTable Items="@listModel" Dense="@dense" Hover="@hover" Filter="new Func<SalaryVoucherMasterView,bool>(FilterFunc1)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Voucher No</MudTh>
                        <MudTh>Date</MudTh>
                        <MudTh>Voucher Type</MudTh>
                        <MudTh>Cash / Bank</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="LedgerName">@context.VoucherNo</MudTd>
                        <MudTd DataLabel="Email">@context.Date</MudTd>
                        <MudTd DataLabel="Phone">@context.VoucherTypeName</MudTd>
                        <MudTd DataLabel="Address">@context.LedgerName</MudTd>
                        <MudTd DataLabel="IsDefault">@context.TotalAmount</MudTd>
                        <MudTd DataLabel="">
                            @*<a class="me-3" href="/app/salaryvoucheredit/@context.SalaryVoucherMasterId">
                                <img src="assets/img/icons/eye.svg" alt="img">
                            </a>*@
                            <a class="me-3 confirm-text" style="cursor:pointer;" @onclick="() =>Delete(context.SalaryVoucherMasterId)">
                                <img src="assets/img/icons/delete.svg" alt="img">
                            </a>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </div>
        </div>
    </div>
    <!-- /product list -->
</div>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    IList<SalaryVoucherMasterView> listModel;
    private bool dense = true;
    private bool hover = true;
    private string searchString1 = "";
    string strMenu = "Human Resources";
    private bool visible;
    private MudBlazor.DialogOptions dialogOptions = new() { FullWidth = true };
    string ShowDialogue;
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }
    private async Task LoadData()
    {
        listModel = await _salaryVoucher.GetAll();
        StateHasChanged();
    }
    private bool FilterFunc1(SalaryVoucherMasterView element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SalaryVoucherMasterView element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LedgerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.VoucherNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private async Task Delete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var result = await _salaryVoucher.Delete(id);
            if (result == true)
            {
                await LoadData();
                StateHasChanged();
                Snackbar.Add("Delete Successfully.", Severity.Success);
			}
			else
			{
                Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
                StateHasChanged();
			}
        }
    }
}
