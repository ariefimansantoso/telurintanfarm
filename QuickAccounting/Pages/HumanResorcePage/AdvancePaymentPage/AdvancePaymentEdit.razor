@page "/app/advancepaymentedit/{id}"
@inject IAdvancePayment _advancePayment
@inject ICustomerSupplier _ledger
@inject IInvoiceSetting _setting
@inject IEmployee _emploee
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>Advance Payment </PageTitle>
<div class="content">
					<div class="page-header">
						<div class="page-title">
							<h4>AdvancePayment Edit</h4>
						</div>
					</div>
					<!-- /add -->
					<div class="card">
						<div class="card-body">
							<EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
							<div class="row">
								<div class="col-lg-6 col-sm-6 col-12">
									<div class="form-group">
										<label>Voucher No</label>
										<input type="text" @bind="model.VoucherNo" readonly >
							<ValidationMessage For="@(() => model.VoucherNo)" />
									</div>
								</div>
					<div class="col-lg-6 col-sm-6 col-12">
									<div class="form-group">
										<label>Date</label>
							<RadzenDatePicker @bind-Value=@model.Date DateFormat="d" Class="w-100" />
							<ValidationMessage For="@(() => model.Date)" />
									</div>
								</div>
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Employee</label>
							<RadzenDropDown Style="width:100%;" @bind-Value="@model.EmployeeId" Placeholder="Choose Employee" AllowFiltering="true" Data="@(listEmployee)" TextProperty="EmployeeName" ValueProperty="EmployeeId" />
							<ValidationMessage For="@(() => model.EmployeeId)" />
						</div>
					</div>
					<div class="col-lg-4 col-sm-6 col-12">
									<div class="form-group">
							<label>Amount</label>
										<input type="text" @bind="model.Amount" >
							<ValidationMessage For="@(() => model.Amount)" />
									</div>
								</div>
								<hr/>
					<div class="col-lg-6 col-sm-6 col-12">
									<div class="form-group">
										<label>Salary Month</label>
							<RadzenDatePicker @bind-Value=@model.SalaryMonth DateFormat="MMMMyyyy" ReadOnly Class="w-100" Change="()=>ChangeDate()" />
							<ValidationMessage For="@(() => model.SalaryMonth)" />
									</div>
								</div>
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Cash / Bank</label>
							<RadzenDropDown Style="width:100%;" @bind-Value="@model.LedgerId" Placeholder="Choose Cash/Bank" AllowFiltering="true" Data="@(listCashBank)" TextProperty="LedgerName" ValueProperty="LedgerId" />
							<ValidationMessage For="@(() => model.LedgerId)" />
						</div>
					</div>
					<div class="col-lg-6 col-sm-6 col-12">
						<div class="form-group">
							<label>Narration</label>
							<input type="text" @bind="model.Narration">
							
							<ValidationMessage For="@(() => model.Narration)" />
						</div>
					</div>
								<div class="col-lg-12">
									<button type="submit" class="btn btn-submit me-2">Submit</button>
									<a href="/app/advancepayment" class="btn btn-cancel">Cancel</a>
								</div>
								
							</div>
							</EditForm>
						</div>
					</div>
					<!-- /add -->
				</div>
@code {
	[Parameter]
	public string id { get; set; }
	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }
	AdvancePayment model = new AdvancePayment();
	IList<AccountLedgerView> listCashBank;
	IList<EmployeeView> listEmployee;
	InvoiceSetting setting = new InvoiceSetting();
	string monthYear;
	int decAdvancePaymentVouchertypeId = 13;
	string strMenu = "Human Resources";
	protected override async Task OnInitializedAsync()
	{
		//CheckPriviliagee
		var authState = await authenticationState;
		var strRole = authState.User;
		string strName = strRole.FindFirst(ClaimTypes.Role).Value;
		var strShow = await _privilege.PriviliageCheck(strMenu, strName);
		if (strShow.ShowAction == true)
		{
			await LoadData();
		}
		else
		{
			navigation.NavigateTo("/app/dashboard");
			Snackbar.Add("You dont have to privilege..", Severity.Error);
		}
	}
	private async Task LoadData()
	{
		model = await _advancePayment.GetbyId(Convert.ToInt32(id));
		listCashBank = await _ledger.GetCashOrBank();
		listEmployee = await _emploee.GetAll();
		StateHasChanged();
	}
	private async Task ChangeDate()
	{
		string strMonth = model.SalaryMonth.ToString("MMMMyyyy");
		string Month = strMonth.Substring(0, 3);
		string strmonthYear = Convert.ToDateTime(strMonth.ToString()).Year.ToString();
		monthYear = Month + " " + strmonthYear;
		model.YearMonth = monthYear;
		StateHasChanged();
	}
	private async Task Save()
	{
			model.VoucherTypeId = decAdvancePaymentVouchertypeId;
			model.InvoiceNo = string.Empty;
			model.FinancialYearId = 2;
			model.ModifyDate = DateTime.Now;
				bool result = await _advancePayment.Update(model);

				if (result == true)
				{
					Snackbar.Add("Updated Successfully.", Severity.Success);
					StateHasChanged();
				navigation.NavigateTo("/app/advancepayment");
				}
				else
				{
					Snackbar.Add("Invalid.", Severity.Error);
					StateHasChanged();
				}
	}
}
