@page "/app/dailysalaryadd"
@inject IDailySalaryVoucher _salaryvoucher
@inject ICustomerSupplier _ledger
@inject IInvoiceSetting _setting
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]
<PageTitle>Daily SalaryVoucher</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Daily SalaryVoucher</h4>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Voucher No</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <input type="text" @bind="master.VoucherNo" readonly />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Voucher Date</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <RadzenDatePicker @bind-Value=@master.Date DateFormat="d" Class="w-100"/>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Salary Date</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <RadzenDatePicker @bind-Value=@master.SalaryDate DateFormat="d" Class="w-100" Change="()=>ChangeDate()"/>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label>Cash / Bank ac</label>
                        <div class="row">
                            <div class="col-lg-10 col-sm-10 col-10">
                                <RadzenDropDown Style="width:100%;" @bind-Value="@master.LedgerId" Placeholder="Choose Cash/Bank account" AllowFiltering="true" Data="@(listCashBank)" TextProperty="LedgerName" ValueProperty="LedgerId" />
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Employee Code</th>
                            <th>Employee Name</th>
                            <th>Attendance</th>
                            <th>Wages</th>
                            <th>Status</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (listModel != null)
                    {
                        @foreach (var item in listModel)
                        {
                            <tr>
                                <td>@item.EmployeeCode</td>
                                <td>@item.EmployeeName</td>
                                 <td>@item.AttendanceStatus</td>
                                  <td>@item.Wage</td>
                                    <td>
                                        <select @bind="@item.Status">
                                            @foreach (var item1 in listStatus)
                                            {
                                                <option value="@item1.DailySalaryStatus">@item1.DailySalaryStatus</option>
                                            }
                                        </select>
                                    </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
            <br /> <br />
            <div class="row">
                <div class="col-lg-12">
                    <button @onclick="@Save" class="btn btn-submit me-2">Save</button>
                    <a href="/app/salaryvoucher" class="btn btn-cancel">Cancel</a>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    DailySalaryVoucherMaster master = new DailySalaryVoucherMaster();
    IList<AccountLedgerView> listCashBank;
    IList<DailySalaryDetailsView> listModel;
    DailySalaryDetailsView details = new DailySalaryDetailsView();
    List<StatusInfo> listStatus = new List<StatusInfo>();
    string strMenu = "Human Resources";
    InvoiceSetting setting = new InvoiceSetting();
    string monthYear;
    int decDailySalaryVoucherId = 14;
    int isEditMode = 0;
    string strVoucherNoforEdit = "0";
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }
    private async Task LoadData()
    {
        listStatus.Add(new StatusInfo { StatusPresent = "UnPaid" });
        listStatus.Add(new StatusInfo { StatusPresent = "Paid" });
        //GetSerialNo
        string serial = await _salaryvoucher.GetSerialNo();
        setting = await _setting.GetbyId(decDailySalaryVoucherId);
        master.VoucherNo = setting.Prefix + serial + setting.Suffix;
        master.SerialNo = serial;
        listCashBank = await _ledger.GetCashOrBank();
        master.LedgerId = 0;
        master.Date = DateTime.UtcNow;
        master.SalaryDate = DateTime.UtcNow;
        master.Narration = string.Empty;
        master.TotalAmount = 0;
        String sDate = master.SalaryDate.ToString();
        DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));

        String dy = datevalue.Day.ToString();
        String mn = datevalue.Month.ToString();
        String yy = datevalue.Year.ToString();
        master.YearMonthDay = dy + mn + yy;
        listModel = await _salaryvoucher.GetAllEmployeeAttendance(master.YearMonthDay);
        foreach (var item in listModel)
        {
            //GetBonusAndDeductionAmount
            DailySalaryVoucherDetails salaryDetails = new DailySalaryVoucherDetails();
            salaryDetails = await _salaryvoucher.GetStatusPaidUnpaid(master.YearMonthDay, item.EmployeeId);
            if (salaryDetails != null)
            {
                details.Status = salaryDetails.Status;
                details.Wage = salaryDetails.Wage;
                details.DailySalaryVoucherMasterId = salaryDetails.DailySalaryVoucherMasterId;
                var myTodos = listModel.FirstOrDefault(x => x.DailySalaryVoucherDetailsId == item.DailySalaryVoucherDetailsId && x.EmployeeId == item.EmployeeId);
                myTodos.Status = details.Status;
                myTodos.Wage = details.Wage;
                myTodos.DailySalaryVoucherDetailsId = details.DailySalaryVoucherDetailsId;
                details.Status = "UnPaid";
                details.DailySalaryVoucherDetailsId = 0;
            }
            else
            {
                details.Wage = 0;
                details.Status = "UnPaid";
                details.DailySalaryVoucherDetailsId = 0;
            }
           
        }
        StateHasChanged();
    }
    private async Task ChangeDate()
    {
        String sDate = master.SalaryDate.ToString();
        DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));

        String dy = datevalue.Day.ToString();
        String mn = datevalue.Month.ToString();
        String yy = datevalue.Year.ToString();
        master.YearMonthDay = dy + mn + yy;
        listModel = await _salaryvoucher.GetAllEmployeeAttendance(master.YearMonthDay);
        foreach (var item in listModel)
        {
            //Employee
            DailySalaryVoucherDetails salaryDetails = new DailySalaryVoucherDetails();
            salaryDetails = await _salaryvoucher.GetStatusPaidUnpaid(master.YearMonthDay, item.EmployeeId);
            if (salaryDetails != null)
            {
                details.Status = salaryDetails.Status;
                details.Wage = salaryDetails.Wage;
                details.DailySalaryVoucherMasterId = salaryDetails.DailySalaryVoucherMasterId;
                var myTodos = listModel.FirstOrDefault(x => x.DailySalaryVoucherDetailsId == item.DailySalaryVoucherDetailsId && x.EmployeeId == item.EmployeeId);
                myTodos.Status = details.Status;
                myTodos.Wage = details.Wage;
                myTodos.DailySalaryVoucherDetailsId = details.DailySalaryVoucherDetailsId;
                details.Status = "UnPaid";
                details.DailySalaryVoucherDetailsId = 0;
            }
            else
            {
                details.Wage = 0;
                details.Status = "UnPaid";
                details.DailySalaryVoucherDetailsId = 0;
            }

        }
        StateHasChanged();
    }
    private async void Save()
    {
        if (listModel == null)
        {
            Snackbar.Add("Invalid.", Severity.Error);
        }
        else if (master.LedgerId == 0)
        {
            Snackbar.Add("Choose cash / bank.", Severity.Error);
        }
        else
        {
                master.InvoiceNo = string.Empty;
                master.VoucherTypeId = decDailySalaryVoucherId;
                master.FinancialYearId = 1;
                master.TotalAmount = listModel.Sum(item => item.Wage);
                master.Narration = string.Empty;
                master.AddedDate = DateTime.UtcNow;
                foreach (var item in listModel)
                {
                DailySalaryVoucherDetails details = new DailySalaryVoucherDetails();
                    details.EmployeeId = item.EmployeeId;
                    details.Wage = item.Wage;
                details.Status = item.Status;
                    master.listOrder.Add(details);
                }
                var result = await _salaryvoucher.Save(master);

                if (result > 0)
                {
                    Snackbar.Add("Daily Salary Created Successfully.", Severity.Success);
                    navigation.NavigateTo("/app/dailysalary");
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Transaction Failed.", Severity.Error);
                }
        }
    }
}
