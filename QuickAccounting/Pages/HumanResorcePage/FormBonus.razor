@page "/app/recordbonus"
@inject IHRServices _hr
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IUser _user
@inject IEmployee _employee
@using System.Security.Claims
@using QuickAccounting.Constants;

@inject IWebHostEnvironment _hostingEnvironment
@inject IPrivilege _privilege
@inject NavigationManager navigation
@attribute [Authorize]

<PageTitle>Form Bonus / Penambahan Gaji</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Form Bonus / Penambahan Gaji</h4>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            @if (FormSubmitted == false)
            {                                   
                    <div class="row">
                        <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group" style="text-align: center !important;">
                                <label>Tanggal Bonus/Tambahan Gaji</label>
                                <div class="row">
                                    <div class="col-lg-12 col-sm-12 col-12">
                                        <RadzenDatePicker @bind-Value=@TanggalSangsi DateFormat="d" Change="()=>ChangeDate()" Class="w-100" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group" style="text-align: center !important;">
                                <label>Karyawan</label>
                                <div class="row">
                                    <div class="col-lg-12 col-sm-12 col-12">
                                    <select class="form-control" @onchange="SelectedKaryawan">
                                        @foreach (var karyawan in DaftarKaryawan)
                                        {
                                            <option value="@karyawan.EmployeeId">@karyawan.EmployeeName</option>
                                        }
                                    </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @* <div class="row">
                        <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group" style="text-align: center !important;">
                                <label>Foto Bukti</label>
                                <div class="row">
                                    <div class="col-lg-12 col-sm-12 col-12">
                                        @if (PhotoViewer == string.Empty)
                                        {
                                            <img src="/img/noimage.png" alt="img">
                                        }
                                        else
                                        {
                                            <img src="@PhotoViewer" width="80" height="80">
                                        }
                                        <br />
                                        <InputFile OnChange="OnFileChange" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div> *@

                    <div class="row">
                        <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group" style="text-align: center !important;">
                                <label>Alasan</label>
                                <div class="row">
                                    <div class="col-lg-12 col-sm-12 col-12">
                                    <textarea type="text" style="width:100%;" @bind="Alasan" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4 col-sm-6 col-12">
                            <div class="form-group" style="text-align: center !important;">
                                <label>Nominal Penambahan</label>
                                <div class="row">
                                    <div class="col-lg-12 col-sm-12 col-12">
                                        <input type="text" style="width:100%;" @bind="Nominal" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <br /> <br />
                    <div class="row">
                        <div class="col-lg-12" style="text-align: center !important;">
                            <input type="button" @onclick="@(e => Save())" class="btn btn-submit me-2" value="Simpan" />
                        </div>
                    </div>               
            }
            else
            {
                <div class="row">
                    <div class="col-lg-4 col-sm-6 col-12">
                        <div class="form-group" style="text-align: center !important;">
                            <label style="font-size:24px; font-weight:bold;">Form Bonus / Penambahan Gaji berhasil disimpan.</label>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <!-- /product list -->
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    Penalty master = new Penalty();
    UserMaster modelUser = new UserMaster();
    Employee modelEmployee = new Employee();

    private string PhotoViewer;
    private string Alasan;
    private string PhotoBukti;
    private DateTime? TanggalSangsi;
    private decimal Nominal;
    Employee SelectedEmployee = null;
    List<Employee> DaftarKaryawan = new List<Employee>();

    MemoryStream uploadedFileStream;
    string uploadedFileExtension;

    string strMenu = "Admin - Form Bonus";

    private bool FormSubmitted;

    private async Task ChangeDate()
    {
        master.ForDate = TanggalSangsi.Value;
        StateHasChanged();
    }

    private async Task<bool> CheckPermission()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            return true;
        }
        else
        {
            return false;            
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var format = "image/png";
            uploadedFileExtension = Path.GetExtension(e.File.Name);
            uploadedFileStream = new();
            var resized = await e.File.RequestImageFileAsync(e.File.ContentType, maxWidth: 500, maxHeight: 500);
            using Stream fileStream = resized.OpenReadStream();
            await fileStream.CopyToAsync(uploadedFileStream);

            var fileString = $"data:{format};base64,{Convert.ToBase64String(uploadedFileStream.ToArray())}";
            if (fileString == null)
            {
                PhotoViewer = string.Empty;
            }
            else
            {
                PhotoViewer = fileString;
            }
        }
        catch (Exception ex)
        {
            PhotoViewer = string.Empty;
        }
    }

    private async Task SelectedKaryawan(ChangeEventArgs e)
    {
        SelectedEmployee = await _employee.GetbyId(Convert.ToInt32(e.Value.ToString()));
    }

    protected override async Task OnInitializedAsync()
    {
        var authorized = await CheckPermission();
        if(!authorized)
        {
            navigation.NavigateTo("/app/dashboard");
            Snackbar.Add("Anda tidak memiliki hak akses.", Severity.Error);
        } 

        var authState = await authenticationState;
        var currentUser = authState.User;
        string userName = currentUser.FindFirst(ClaimTypes.Name).Value;
        modelUser = await _user.UserProfile(userName);
        modelEmployee = await _employee.GetbyUserId(modelUser.UserId);
        PhotoBukti = "";
        PhotoViewer = "";

        if(modelUser.RoleId == RoleConstants.AdminRoleId) {
            DaftarKaryawan = await _employee.GetAllEmployeeActive();
        }
        else if (modelUser.RoleId == RoleConstants.SupervisorRoleId)
        {
            DaftarKaryawan = await _employee.GetAllEmployeeActiveBySupervisorID(modelEmployee.EmployeeId);        
        }

        DaftarKaryawan = DaftarKaryawan.OrderBy(x => x.EmployeeName).ToList();

        if (SelectedEmployee == null)
        {
            SelectedEmployee = DaftarKaryawan.FirstOrDefault();
        }

        //CheckPriviliagee        
        await LoadData();

        StateHasChanged();
    }

    // public async Task<string> UploadFile(string userFolder)
    // {
    //     if(PhotoViewer == "")
    //     {
    //         return "";
    //     }

    //     var uploadDirectory = Path.Combine(_hostingEnvironment.WebRootPath, "uploads/bonus/" + userFolder);
    //     if (!Directory.Exists(uploadDirectory))
    //     {
    //         Directory.CreateDirectory(uploadDirectory);
    //     }

    //     var fileExtension = uploadedFileExtension;
    //     var fileName = $"{Guid.NewGuid()}{fileExtension}";
    //     var path = Path.Combine(uploadDirectory, fileName);
    //     await using var fs = new FileStream(path, FileMode.Create);
    //     //await file.OpenReadStream(file.Size).CopyToAsync(fs);
    //     uploadedFileStream.Position = 0;
    //     await uploadedFileStream.CopyToAsync(fs);
    //     PhotoBukti = fileName;
    //     return fileName;
    // }

    private async Task LoadData()
    {                
        TanggalSangsi = null;
        Alasan = string.Empty;
        Nominal = 0;

        FormSubmitted = false;

        StateHasChanged();
    }

    private async Task Save()
    {
        if (TanggalSangsi.HasValue == false || Nominal == 0)
        {
            Snackbar.Add("Anda belum mengisi tanggal atau Nominal. Keduanya wajib diisi.", Severity.Error);
            return;
        }

        // string userFolder = SelectedEmployee.EmployeeId + "_" + SelectedEmployee.EmployeeName.Replace(" ", "_");
        // string fileName = await UploadFile(userFolder);

        // if (PhotoBukti == "")
        // {
        //     Snackbar.Add("Anda belum mengambil foto bukti.", Severity.Error);
        //     return;
        // }

        DateTime now = DateTime.Now;
        master.ForDate = TanggalSangsi.Value;
        master.PenaltyDescription = Alasan;
        master.PenaltyAmount = Nominal;
        master.DateSubmitted = now;
        master.EmployeeID = SelectedEmployee.EmployeeId;
        master.AdminUserID = modelEmployee.EmployeeId;
        master.PenaltyPhoto = "nophoto.png";
        master.IsPenalty = false;

        var result = await _hr.InsertPenalty(master);

        if (result > 0)
        {
            Snackbar.Add(strMenu + " telah berhasil disimpan.", Severity.Success);
            FormSubmitted = true;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(strMenu + " gagal disimpan, silakan coba lagi, atau hubungi programmer.", Severity.Error);
        }
    }
}
